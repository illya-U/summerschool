
base_ss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c7c  0800ebdc  0800ebdc  0001ebdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f858  0800f858  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f858  0800f858  0001f858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f860  0800f860  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f860  0800f860  0001f860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f864  0800f864  0001f864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800f868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000660c  2000016c  0800f9d4  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006778  0800f9d4  00026778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236cb  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004563  00000000  00000000  00043867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca0  00000000  00000000  00047dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  00049a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4da  00000000  00000000  0004b560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024780  00000000  00000000  00067a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac43c  00000000  00000000  0008c1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001385f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008930  00000000  00000000  00138648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000016c 	.word	0x2000016c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ebc4 	.word	0x0800ebc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000170 	.word	0x20000170
 80001dc:	0800ebc4 	.word	0x0800ebc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_ldivmod>:
 8000290:	b97b      	cbnz	r3, 80002b2 <__aeabi_ldivmod+0x22>
 8000292:	b972      	cbnz	r2, 80002b2 <__aeabi_ldivmod+0x22>
 8000294:	2900      	cmp	r1, #0
 8000296:	bfbe      	ittt	lt
 8000298:	2000      	movlt	r0, #0
 800029a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800029e:	e006      	blt.n	80002ae <__aeabi_ldivmod+0x1e>
 80002a0:	bf08      	it	eq
 80002a2:	2800      	cmpeq	r0, #0
 80002a4:	bf1c      	itt	ne
 80002a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002aa:	f04f 30ff 	movne.w	r0, #4294967295
 80002ae:	f000 b9bf 	b.w	8000630 <__aeabi_idiv0>
 80002b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ba:	2900      	cmp	r1, #0
 80002bc:	db09      	blt.n	80002d2 <__aeabi_ldivmod+0x42>
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db1a      	blt.n	80002f8 <__aeabi_ldivmod+0x68>
 80002c2:	f000 f84d 	bl	8000360 <__udivmoddi4>
 80002c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ce:	b004      	add	sp, #16
 80002d0:	4770      	bx	lr
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db1b      	blt.n	8000314 <__aeabi_ldivmod+0x84>
 80002dc:	f000 f840 	bl	8000360 <__udivmoddi4>
 80002e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e8:	b004      	add	sp, #16
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	4252      	negs	r2, r2
 80002f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f6:	4770      	bx	lr
 80002f8:	4252      	negs	r2, r2
 80002fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fe:	f000 f82f 	bl	8000360 <__udivmoddi4>
 8000302:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030a:	b004      	add	sp, #16
 800030c:	4240      	negs	r0, r0
 800030e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000312:	4770      	bx	lr
 8000314:	4252      	negs	r2, r2
 8000316:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031a:	f000 f821 	bl	8000360 <__udivmoddi4>
 800031e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000326:	b004      	add	sp, #16
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <baro_init>:
static int16_t dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
static int32_t t_fine;
static _Bool inited = false;
static uint8_t data[25];

baro_stat_t baro_init(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;

	// Check barometer on I2C bus
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_ID, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	9302      	str	r3, [sp, #8]
 8000640:	2301      	movs	r3, #1
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	4b6f      	ldr	r3, [pc, #444]	; (8000804 <baro_init+0x1d0>)
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	22d0      	movs	r2, #208	; 0xd0
 800064c:	21ec      	movs	r1, #236	; 0xec
 800064e:	486e      	ldr	r0, [pc, #440]	; (8000808 <baro_init+0x1d4>)
 8000650:	f004 fcbe 	bl	8004fd0 <HAL_I2C_Mem_Read>
 8000654:	4603      	mov	r3, r0
 8000656:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <baro_init+0x38>
		if (status == HAL_TIMEOUT)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d101      	bne.n	8000668 <baro_init+0x34>
			return BARO_ERR_TIMEOUT;
 8000664:	2302      	movs	r3, #2
 8000666:	e0c9      	b.n	80007fc <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8000668:	2301      	movs	r3, #1
 800066a:	e0c7      	b.n	80007fc <baro_init+0x1c8>
	}

	if (data[0] != BARO_ID_VALUE) {
 800066c:	4b65      	ldr	r3, [pc, #404]	; (8000804 <baro_init+0x1d0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b58      	cmp	r3, #88	; 0x58
 8000672:	d001      	beq.n	8000678 <baro_init+0x44>
		return BARO_ERR_GENERAL;
 8000674:	2303      	movs	r3, #3
 8000676:	e0c1      	b.n	80007fc <baro_init+0x1c8>
	}

	// Config barometer
	// T and P oversampling - 16, Normal mode
	// SPI 3 wire Off, Filter 2x, Standby duration - 62.5 ms
	data[0] = BARO_MODE_NORMAL | BARO_OSRS_T_1 | BARO_OSRS_P_1;
 8000678:	4b62      	ldr	r3, [pc, #392]	; (8000804 <baro_init+0x1d0>)
 800067a:	2227      	movs	r2, #39	; 0x27
 800067c:	701a      	strb	r2, [r3, #0]
	data[1] = BARO_SPI3W_OFF | BARO_FILTER_OFF | BARO_T_SB_0_5;
 800067e:	4b61      	ldr	r3, [pc, #388]	; (8000804 <baro_init+0x1d0>)
 8000680:	2200      	movs	r2, #0
 8000682:	705a      	strb	r2, [r3, #1]

	status = HAL_I2C_Mem_Write(&hi2c1, BARO_I2C_ADDR, BARO_REG_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, data, 2, 1000);
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	2302      	movs	r3, #2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <baro_init+0x1d0>)
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	22f4      	movs	r2, #244	; 0xf4
 8000696:	21ec      	movs	r1, #236	; 0xec
 8000698:	485b      	ldr	r0, [pc, #364]	; (8000808 <baro_init+0x1d4>)
 800069a:	f004 fb9f 	bl	8004ddc <HAL_I2C_Mem_Write>
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d006      	beq.n	80006b6 <baro_init+0x82>
		if (status == HAL_TIMEOUT)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d101      	bne.n	80006b2 <baro_init+0x7e>
			return BARO_ERR_TIMEOUT;
 80006ae:	2302      	movs	r3, #2
 80006b0:	e0a4      	b.n	80007fc <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e0a2      	b.n	80007fc <baro_init+0x1c8>
	}

	// Readout compensation values
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_CALIB00, I2C_MEMADD_SIZE_8BIT, data, 25, 1000);
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	9302      	str	r3, [sp, #8]
 80006bc:	2319      	movs	r3, #25
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	4b50      	ldr	r3, [pc, #320]	; (8000804 <baro_init+0x1d0>)
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	2288      	movs	r2, #136	; 0x88
 80006c8:	21ec      	movs	r1, #236	; 0xec
 80006ca:	484f      	ldr	r0, [pc, #316]	; (8000808 <baro_init+0x1d4>)
 80006cc:	f004 fc80 	bl	8004fd0 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <baro_init+0xb4>
		if (status == HAL_TIMEOUT)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d101      	bne.n	80006e4 <baro_init+0xb0>
			return BARO_ERR_TIMEOUT;
 80006e0:	2302      	movs	r3, #2
 80006e2:	e08b      	b.n	80007fc <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e089      	b.n	80007fc <baro_init+0x1c8>
	}
	dig_T1 = (uint16_t)data [1] << 8 | (uint16_t)data [0];
 80006e8:	4b46      	ldr	r3, [pc, #280]	; (8000804 <baro_init+0x1d0>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b44      	ldr	r3, [pc, #272]	; (8000804 <baro_init+0x1d0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	4313      	orrs	r3, r2
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <baro_init+0x1d8>)
 80006fe:	801a      	strh	r2, [r3, #0]
	dig_T2 =  (int16_t)data [3] << 8 |  (int16_t)data [2];
 8000700:	4b40      	ldr	r3, [pc, #256]	; (8000804 <baro_init+0x1d0>)
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	021b      	lsls	r3, r3, #8
 8000706:	b21a      	sxth	r2, r3
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <baro_init+0x1d0>)
 800070a:	789b      	ldrb	r3, [r3, #2]
 800070c:	b21b      	sxth	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b21a      	sxth	r2, r3
 8000712:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <baro_init+0x1dc>)
 8000714:	801a      	strh	r2, [r3, #0]
	dig_T3 =  (int16_t)data [5] << 8 |  (int16_t)data [4];
 8000716:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <baro_init+0x1d0>)
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <baro_init+0x1d0>)
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b21a      	sxth	r2, r3
 8000728:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <baro_init+0x1e0>)
 800072a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (uint16_t)data [7] << 8 | (uint16_t)data [6];
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <baro_init+0x1d0>)
 800072e:	79db      	ldrb	r3, [r3, #7]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21a      	sxth	r2, r3
 8000734:	4b33      	ldr	r3, [pc, #204]	; (8000804 <baro_init+0x1d0>)
 8000736:	799b      	ldrb	r3, [r3, #6]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21b      	sxth	r3, r3
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b35      	ldr	r3, [pc, #212]	; (8000818 <baro_init+0x1e4>)
 8000742:	801a      	strh	r2, [r3, #0]
	dig_P2 =  (int16_t)data [9] << 8 |  (int16_t)data [8];
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <baro_init+0x1d0>)
 8000746:	7a5b      	ldrb	r3, [r3, #9]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <baro_init+0x1d0>)
 800074e:	7a1b      	ldrb	r3, [r3, #8]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21a      	sxth	r2, r3
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <baro_init+0x1e8>)
 8000758:	801a      	strh	r2, [r3, #0]
	dig_P3 =  (int16_t)data[11] << 8 |  (int16_t)data[10];
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <baro_init+0x1d0>)
 800075c:	7adb      	ldrb	r3, [r3, #11]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	b21a      	sxth	r2, r3
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <baro_init+0x1d0>)
 8000764:	7a9b      	ldrb	r3, [r3, #10]
 8000766:	b21b      	sxth	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b21a      	sxth	r2, r3
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <baro_init+0x1ec>)
 800076e:	801a      	strh	r2, [r3, #0]
	dig_P4 =  (int16_t)data[13] << 8 |  (int16_t)data[12];
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <baro_init+0x1d0>)
 8000772:	7b5b      	ldrb	r3, [r3, #13]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21a      	sxth	r2, r3
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <baro_init+0x1d0>)
 800077a:	7b1b      	ldrb	r3, [r3, #12]
 800077c:	b21b      	sxth	r3, r3
 800077e:	4313      	orrs	r3, r2
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <baro_init+0x1f0>)
 8000784:	801a      	strh	r2, [r3, #0]
	dig_P5 =  (int16_t)data[15] << 8 |  (int16_t)data[14];
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <baro_init+0x1d0>)
 8000788:	7bdb      	ldrb	r3, [r3, #15]
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	b21a      	sxth	r2, r3
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <baro_init+0x1d0>)
 8000790:	7b9b      	ldrb	r3, [r3, #14]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <baro_init+0x1f4>)
 800079a:	801a      	strh	r2, [r3, #0]
	dig_P6 =  (int16_t)data[17] << 8 |  (int16_t)data[16];
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <baro_init+0x1d0>)
 800079e:	7c5b      	ldrb	r3, [r3, #17]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <baro_init+0x1d0>)
 80007a6:	7c1b      	ldrb	r3, [r3, #16]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <baro_init+0x1f8>)
 80007b0:	801a      	strh	r2, [r3, #0]
	dig_P7 =  (int16_t)data[19] << 8 |  (int16_t)data[18];
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <baro_init+0x1d0>)
 80007b4:	7cdb      	ldrb	r3, [r3, #19]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <baro_init+0x1d0>)
 80007bc:	7c9b      	ldrb	r3, [r3, #18]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <baro_init+0x1fc>)
 80007c6:	801a      	strh	r2, [r3, #0]
	dig_P8 =  (int16_t)data[21] << 8 |  (int16_t)data[20];
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <baro_init+0x1d0>)
 80007ca:	7d5b      	ldrb	r3, [r3, #21]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <baro_init+0x1d0>)
 80007d2:	7d1b      	ldrb	r3, [r3, #20]
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b21a      	sxth	r2, r3
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <baro_init+0x200>)
 80007dc:	801a      	strh	r2, [r3, #0]
	dig_P9 =  (int16_t)data[23] << 8 |  (int16_t)data[22];
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <baro_init+0x1d0>)
 80007e0:	7ddb      	ldrb	r3, [r3, #23]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <baro_init+0x1d0>)
 80007e8:	7d9b      	ldrb	r3, [r3, #22]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <baro_init+0x204>)
 80007f2:	801a      	strh	r2, [r3, #0]

	inited = true;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <baro_init+0x208>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]

	return BARO_OK;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200001a8 	.word	0x200001a8
 8000808:	2000021c 	.word	0x2000021c
 800080c:	20000188 	.word	0x20000188
 8000810:	2000018c 	.word	0x2000018c
 8000814:	2000018e 	.word	0x2000018e
 8000818:	2000018a 	.word	0x2000018a
 800081c:	20000190 	.word	0x20000190
 8000820:	20000192 	.word	0x20000192
 8000824:	20000194 	.word	0x20000194
 8000828:	20000196 	.word	0x20000196
 800082c:	20000198 	.word	0x20000198
 8000830:	2000019a 	.word	0x2000019a
 8000834:	2000019c 	.word	0x2000019c
 8000838:	2000019e 	.word	0x2000019e
 800083c:	200001a4 	.word	0x200001a4

08000840 <baro_read_temp>:

int32_t baro_read_temp(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af04      	add	r7, sp, #16
	int32_t var1, var2, temp;

	if (!inited)
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <baro_read_temp+0xc4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	f083 0301 	eor.w	r3, r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <baro_read_temp+0x1a>
		return INT32_MAX;
 8000854:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000858:	e050      	b.n	80008fc <baro_read_temp+0xbc>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2303      	movs	r3, #3
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <baro_read_temp+0xc8>)
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	22fa      	movs	r2, #250	; 0xfa
 800086c:	21ec      	movs	r1, #236	; 0xec
 800086e:	4827      	ldr	r0, [pc, #156]	; (800090c <baro_read_temp+0xcc>)
 8000870:	f004 fbae 	bl	8004fd0 <HAL_I2C_Mem_Read>
 8000874:	4603      	mov	r3, r0
 8000876:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <baro_read_temp+0x44>
		return INT32_MAX;
 800087e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000882:	e03b      	b.n	80008fc <baro_read_temp+0xbc>
	}
	int32_t adc_T = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <baro_read_temp+0xc8>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	031a      	lsls	r2, r3, #12
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <baro_read_temp+0xc8>)
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	4313      	orrs	r3, r2
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <baro_read_temp+0xc8>)
 8000894:	7892      	ldrb	r2, [r2, #2]
 8000896:	0912      	lsrs	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	4313      	orrs	r3, r2
 800089c:	613b      	str	r3, [r7, #16]

	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	10da      	asrs	r2, r3, #3
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <baro_read_temp+0xd0>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	1ad3      	subs	r3, r2, r3
		   ((int32_t)dig_T2)) >> 11;
 80008aa:	4a1a      	ldr	r2, [pc, #104]	; (8000914 <baro_read_temp+0xd4>)
 80008ac:	f9b2 2000 	ldrsh.w	r2, [r2]
	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	12db      	asrs	r3, r3, #11
 80008b6:	60fb      	str	r3, [r7, #12]

	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	111b      	asrs	r3, r3, #4
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <baro_read_temp+0xd0>)
 80008be:	8812      	ldrh	r2, [r2, #0]
 80008c0:	1a9b      	subs	r3, r3, r2
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	1112      	asrs	r2, r2, #4
 80008c6:	4912      	ldr	r1, [pc, #72]	; (8000910 <baro_read_temp+0xd0>)
 80008c8:	8809      	ldrh	r1, [r1, #0]
 80008ca:	1a52      	subs	r2, r2, r1
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008cc:	fb02 f303 	mul.w	r3, r2, r3
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008d0:	131b      	asrs	r3, r3, #12
		      ((int32_t)dig_T3)) >> 14;
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <baro_read_temp+0xd8>)
 80008d4:	f9b2 2000 	ldrsh.w	r2, [r2]
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008dc:	139b      	asrs	r3, r3, #14
 80008de:	60bb      	str	r3, [r7, #8]

	t_fine = var1 + var2;
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a0d      	ldr	r2, [pc, #52]	; (800091c <baro_read_temp+0xdc>)
 80008e8:	6013      	str	r3, [r2, #0]

	temp = (t_fine * 5 + 128) >> 8;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <baro_read_temp+0xdc>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	3380      	adds	r3, #128	; 0x80
 80008f6:	121b      	asrs	r3, r3, #8
 80008f8:	607b      	str	r3, [r7, #4]

	return temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200001a4 	.word	0x200001a4
 8000908:	200001a8 	.word	0x200001a8
 800090c:	2000021c 	.word	0x2000021c
 8000910:	20000188 	.word	0x20000188
 8000914:	2000018c 	.word	0x2000018c
 8000918:	2000018e 	.word	0x2000018e
 800091c:	200001a0 	.word	0x200001a0

08000920 <baro_read_press>:

uint32_t baro_read_press(void) {
 8000920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000924:	b0d0      	sub	sp, #320	; 0x140
 8000926:	af04      	add	r7, sp, #16
	int64_t var1, var2, p;

	if (!inited)
 8000928:	4bc6      	ldr	r3, [pc, #792]	; (8000c44 <baro_read_press+0x324>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	f083 0301 	eor.w	r3, r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <baro_read_press+0x1c>
		return INT32_MAX;
 8000936:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800093a:	e2f6      	b.n	8000f2a <baro_read_press+0x60a>

	if (baro_read_temp() == INT32_MAX)
 800093c:	f7ff ff80 	bl	8000840 <baro_read_temp>
 8000940:	4602      	mov	r2, r0
 8000942:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000946:	429a      	cmp	r2, r3
 8000948:	d102      	bne.n	8000950 <baro_read_press+0x30>
		return UINT32_MAX;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e2ec      	b.n	8000f2a <baro_read_press+0x60a>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 8000950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	2303      	movs	r3, #3
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	4bbb      	ldr	r3, [pc, #748]	; (8000c48 <baro_read_press+0x328>)
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	22f7      	movs	r2, #247	; 0xf7
 8000962:	21ec      	movs	r1, #236	; 0xec
 8000964:	48b9      	ldr	r0, [pc, #740]	; (8000c4c <baro_read_press+0x32c>)
 8000966:	f004 fb33 	bl	8004fd0 <HAL_I2C_Mem_Read>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (status != HAL_OK) {
 8000970:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <baro_read_press+0x5e>
		return INT32_MAX;
 8000978:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800097c:	e2d5      	b.n	8000f2a <baro_read_press+0x60a>
	}
	int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800097e:	4bb2      	ldr	r3, [pc, #712]	; (8000c48 <baro_read_press+0x328>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	031a      	lsls	r2, r3, #12
 8000984:	4bb0      	ldr	r3, [pc, #704]	; (8000c48 <baro_read_press+0x328>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	431a      	orrs	r2, r3
 800098c:	4bae      	ldr	r3, [pc, #696]	; (8000c48 <baro_read_press+0x328>)
 800098e:	789b      	ldrb	r3, [r3, #2]
 8000990:	091b      	lsrs	r3, r3, #4
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	var1 = ((int64_t)t_fine) - 128000;
 800099a:	4bad      	ldr	r3, [pc, #692]	; (8000c50 <baro_read_press+0x330>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	17da      	asrs	r2, r3, #31
 80009a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80009a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80009a8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80009ac:	460b      	mov	r3, r1
 80009ae:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80009b2:	653b      	str	r3, [r7, #80]	; 0x50
 80009b4:	4613      	mov	r3, r2
 80009b6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
 80009bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80009c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009c4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009cc:	fb03 f102 	mul.w	r1, r3, r2
 80009d0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009d8:	fb02 f303 	mul.w	r3, r2, r3
 80009dc:	18ca      	adds	r2, r1, r3
 80009de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009e2:	fba3 4503 	umull	r4, r5, r3, r3
 80009e6:	1953      	adds	r3, r2, r5
 80009e8:	461d      	mov	r5, r3
 80009ea:	4b9a      	ldr	r3, [pc, #616]	; (8000c54 <baro_read_press+0x334>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	17da      	asrs	r2, r3, #31
 80009f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80009f8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80009fc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000a00:	4603      	mov	r3, r0
 8000a02:	fb03 f205 	mul.w	r2, r3, r5
 8000a06:	460b      	mov	r3, r1
 8000a08:	fb04 f303 	mul.w	r3, r4, r3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4602      	mov	r2, r0
 8000a10:	fba4 8902 	umull	r8, r9, r4, r2
 8000a14:	444b      	add	r3, r9
 8000a16:	4699      	mov	r9, r3
 8000a18:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8000a1c:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 8000a20:	4b8d      	ldr	r3, [pc, #564]	; (8000c58 <baro_read_press+0x338>)
 8000a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	17da      	asrs	r2, r3, #31
 8000a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000a2e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000a32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a36:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8000a3a:	462a      	mov	r2, r5
 8000a3c:	fb02 f203 	mul.w	r2, r2, r3
 8000a40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a44:	4621      	mov	r1, r4
 8000a46:	fb01 f303 	mul.w	r3, r1, r3
 8000a4a:	441a      	add	r2, r3
 8000a4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a50:	4621      	mov	r1, r4
 8000a52:	fba3 ab01 	umull	sl, fp, r3, r1
 8000a56:	eb02 030b 	add.w	r3, r2, fp
 8000a5a:	469b      	mov	fp, r3
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	f04f 0100 	mov.w	r1, #0
 8000a64:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000a68:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000a6c:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000a70:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000a74:	1814      	adds	r4, r2, r0
 8000a76:	64bc      	str	r4, [r7, #72]	; 0x48
 8000a78:	414b      	adcs	r3, r1
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a7c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000a80:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4) << 35);
 8000a84:	4b75      	ldr	r3, [pc, #468]	; (8000c5c <baro_read_press+0x33c>)
 8000a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	17da      	asrs	r2, r3, #31
 8000a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000a92:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	f04f 0100 	mov.w	r1, #0
 8000a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000aa2:	00d9      	lsls	r1, r3, #3
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000aaa:	1814      	adds	r4, r2, r0
 8000aac:	643c      	str	r4, [r7, #64]	; 0x40
 8000aae:	414b      	adcs	r3, r1
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ab2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000ab6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 8000aba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000abe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ac2:	fb03 f102 	mul.w	r1, r3, r2
 8000ac6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000aca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ace:	fb02 f303 	mul.w	r3, r2, r3
 8000ad2:	18ca      	adds	r2, r1, r3
 8000ad4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ad8:	fba3 1303 	umull	r1, r3, r3, r3
 8000adc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000af0:	4b5b      	ldr	r3, [pc, #364]	; (8000c60 <baro_read_press+0x340>)
 8000af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	17da      	asrs	r2, r3, #31
 8000afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000afe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000b02:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8000b06:	462b      	mov	r3, r5
 8000b08:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	fb02 f203 	mul.w	r2, r2, r3
 8000b12:	464b      	mov	r3, r9
 8000b14:	4621      	mov	r1, r4
 8000b16:	fb01 f303 	mul.w	r3, r1, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4622      	mov	r2, r4
 8000b1e:	4641      	mov	r1, r8
 8000b20:	fba2 1201 	umull	r1, r2, r2, r1
 8000b24:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8000b28:	460a      	mov	r2, r1
 8000b2a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8000b2e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000b32:	4413      	add	r3, r2
 8000b34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	f04f 0100 	mov.w	r1, #0
 8000b40:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000b44:	4623      	mov	r3, r4
 8000b46:	0a18      	lsrs	r0, r3, #8
 8000b48:	462b      	mov	r3, r5
 8000b4a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b4e:	462b      	mov	r3, r5
 8000b50:	1219      	asrs	r1, r3, #8
		   ((var1 * (int64_t)dig_P2) << 12);
 8000b52:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <baro_read_press+0x344>)
 8000b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b58:	b21b      	sxth	r3, r3
 8000b5a:	17da      	asrs	r2, r3, #31
 8000b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000b64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b68:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	fb02 f203 	mul.w	r2, r2, r3
 8000b72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b76:	4644      	mov	r4, r8
 8000b78:	fb04 f303 	mul.w	r3, r4, r3
 8000b7c:	441a      	add	r2, r3
 8000b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b82:	4644      	mov	r4, r8
 8000b84:	fba3 4304 	umull	r4, r3, r3, r4
 8000b88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b8c:	4623      	mov	r3, r4
 8000b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b96:	18d3      	adds	r3, r2, r3
 8000b98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8000ba8:	464c      	mov	r4, r9
 8000baa:	0323      	lsls	r3, r4, #12
 8000bac:	4644      	mov	r4, r8
 8000bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000bb2:	4644      	mov	r4, r8
 8000bb4:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 8000bb6:	1884      	adds	r4, r0, r2
 8000bb8:	63bc      	str	r4, [r7, #56]	; 0x38
 8000bba:	eb41 0303 	adc.w	r3, r1, r3
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bc0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000bc4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 8000bc8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000bcc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000bd0:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8000bd4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <baro_read_press+0x348>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	2200      	movs	r2, #0
 8000be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000be4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000be8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8000bec:	462b      	mov	r3, r5
 8000bee:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	fb02 f203 	mul.w	r2, r2, r3
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	fb01 f303 	mul.w	r3, r1, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	4622      	mov	r2, r4
 8000c04:	4641      	mov	r1, r8
 8000c06:	fba2 1201 	umull	r1, r2, r2, r1
 8000c0a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000c0e:	460a      	mov	r2, r1
 8000c10:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000c14:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000c18:	4413      	add	r3, r2
 8000c1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	f04f 0300 	mov.w	r3, #0
 8000c26:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	104a      	asrs	r2, r1, #1
 8000c2e:	4629      	mov	r1, r5
 8000c30:	17cb      	asrs	r3, r1, #31
 8000c32:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0) {
 8000c36:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	d116      	bne.n	8000c6c <baro_read_press+0x34c>
		return 0; // avoid exception caused by division by zero
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e173      	b.n	8000f2a <baro_read_press+0x60a>
 8000c42:	bf00      	nop
 8000c44:	200001a4 	.word	0x200001a4
 8000c48:	200001a8 	.word	0x200001a8
 8000c4c:	2000021c 	.word	0x2000021c
 8000c50:	200001a0 	.word	0x200001a0
 8000c54:	20000198 	.word	0x20000198
 8000c58:	20000196 	.word	0x20000196
 8000c5c:	20000194 	.word	0x20000194
 8000c60:	20000192 	.word	0x20000192
 8000c64:	20000190 	.word	0x20000190
 8000c68:	2000018a 	.word	0x2000018a
	}
	p = 1048576 - adc_P;
 8000c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c70:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000c74:	17da      	asrs	r2, r3, #31
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
 8000c78:	637a      	str	r2, [r7, #52]	; 0x34
 8000c7a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000c7e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 8000c82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c86:	105b      	asrs	r3, r3, #1
 8000c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c90:	07db      	lsls	r3, r3, #31
 8000c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c96:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	1a89      	subs	r1, r1, r2
 8000ca2:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	eb61 0303 	sbc.w	r3, r1, r3
 8000cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000cb0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000cb4:	4622      	mov	r2, r4
 8000cb6:	462b      	mov	r3, r5
 8000cb8:	1891      	adds	r1, r2, r2
 8000cba:	62b9      	str	r1, [r7, #40]	; 0x28
 8000cbc:	415b      	adcs	r3, r3
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	1851      	adds	r1, r2, r1
 8000cc8:	6239      	str	r1, [r7, #32]
 8000cca:	4629      	mov	r1, r5
 8000ccc:	414b      	adcs	r3, r1
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000cdc:	4649      	mov	r1, r9
 8000cde:	018b      	lsls	r3, r1, #6
 8000ce0:	4641      	mov	r1, r8
 8000ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	018a      	lsls	r2, r1, #6
 8000cea:	4641      	mov	r1, r8
 8000cec:	1889      	adds	r1, r1, r2
 8000cee:	61b9      	str	r1, [r7, #24]
 8000cf0:	4649      	mov	r1, r9
 8000cf2:	eb43 0101 	adc.w	r1, r3, r1
 8000cf6:	61f9      	str	r1, [r7, #28]
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d04:	4649      	mov	r1, r9
 8000d06:	008b      	lsls	r3, r1, #2
 8000d08:	4641      	mov	r1, r8
 8000d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d0e:	4641      	mov	r1, r8
 8000d10:	008a      	lsls	r2, r1, #2
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	4603      	mov	r3, r0
 8000d18:	4622      	mov	r2, r4
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	462a      	mov	r2, r5
 8000d22:	eb42 0303 	adc.w	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	008b      	lsls	r3, r1, #2
 8000d38:	4641      	mov	r1, r8
 8000d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d3e:	4641      	mov	r1, r8
 8000d40:	008a      	lsls	r2, r1, #2
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	4603      	mov	r3, r0
 8000d48:	4622      	mov	r2, r4
 8000d4a:	189b      	adds	r3, r3, r2
 8000d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d50:	462b      	mov	r3, r5
 8000d52:	460a      	mov	r2, r1
 8000d54:	eb42 0303 	adc.w	r3, r2, r3
 8000d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000d60:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000d64:	f7ff fa94 	bl	8000290 <__aeabi_ldivmod>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000d70:	4b71      	ldr	r3, [pc, #452]	; (8000f38 <baro_read_press+0x618>)
 8000d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	17da      	asrs	r2, r3, #31
 8000d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d7c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d7e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	f04f 0100 	mov.w	r1, #0
 8000d8a:	0b50      	lsrs	r0, r2, #13
 8000d8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d90:	1359      	asrs	r1, r3, #13
 8000d92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000d96:	462b      	mov	r3, r5
 8000d98:	fb00 f203 	mul.w	r2, r0, r3
 8000d9c:	4623      	mov	r3, r4
 8000d9e:	fb03 f301 	mul.w	r3, r3, r1
 8000da2:	4413      	add	r3, r2
 8000da4:	4622      	mov	r2, r4
 8000da6:	fba2 1200 	umull	r1, r2, r2, r0
 8000daa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000dae:	460a      	mov	r2, r1
 8000db0:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8000db4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000db8:	4413      	add	r3, r2
 8000dba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000df4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	0e4a      	lsrs	r2, r1, #25
 8000e0e:	4629      	mov	r1, r5
 8000e10:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e14:	4629      	mov	r1, r5
 8000e16:	164b      	asrs	r3, r1, #25
 8000e18:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e1c:	4b47      	ldr	r3, [pc, #284]	; (8000f3c <baro_read_press+0x61c>)
 8000e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	17da      	asrs	r2, r3, #31
 8000e26:	673b      	str	r3, [r7, #112]	; 0x70
 8000e28:	677a      	str	r2, [r7, #116]	; 0x74
 8000e2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e2e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8000e32:	462a      	mov	r2, r5
 8000e34:	fb02 f203 	mul.w	r2, r2, r3
 8000e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	fb01 f303 	mul.w	r3, r1, r3
 8000e42:	441a      	add	r2, r3
 8000e44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e48:	4621      	mov	r1, r4
 8000e4a:	fba3 1301 	umull	r1, r3, r3, r1
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e52:	460b      	mov	r3, r1
 8000e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000e6e:	4621      	mov	r1, r4
 8000e70:	0cca      	lsrs	r2, r1, #19
 8000e72:	4629      	mov	r1, r5
 8000e74:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000e78:	4629      	mov	r1, r5
 8000e7a:	14cb      	asrs	r3, r1, #19
 8000e7c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 8000e80:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000e84:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000e88:	1884      	adds	r4, r0, r2
 8000e8a:	66bc      	str	r4, [r7, #104]	; 0x68
 8000e8c:	eb41 0303 	adc.w	r3, r1, r3
 8000e90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e92:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000e96:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	1889      	adds	r1, r1, r2
 8000e9e:	6639      	str	r1, [r7, #96]	; 0x60
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	eb43 0101 	adc.w	r1, r3, r1
 8000ea6:	6679      	str	r1, [r7, #100]	; 0x64
 8000ea8:	f04f 0000 	mov.w	r0, #0
 8000eac:	f04f 0100 	mov.w	r1, #0
 8000eb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000eb4:	4623      	mov	r3, r4
 8000eb6:	0a18      	lsrs	r0, r3, #8
 8000eb8:	462b      	mov	r3, r5
 8000eba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ebe:	462b      	mov	r3, r5
 8000ec0:	1219      	asrs	r1, r3, #8
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <baro_read_press+0x620>)
 8000ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	17da      	asrs	r2, r3, #31
 8000ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ece:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8000edc:	464c      	mov	r4, r9
 8000ede:	0123      	lsls	r3, r4, #4
 8000ee0:	4644      	mov	r4, r8
 8000ee2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ee6:	4644      	mov	r4, r8
 8000ee8:	0122      	lsls	r2, r4, #4
 8000eea:	1884      	adds	r4, r0, r2
 8000eec:	60bc      	str	r4, [r7, #8]
 8000eee:	eb41 0303 	adc.w	r3, r1, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000ef8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return p / 256;
 8000efc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	da07      	bge.n	8000f14 <baro_read_press+0x5f4>
 8000f04:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	f143 0300 	adc.w	r3, r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	f04f 0100 	mov.w	r1, #0
 8000f1c:	0a10      	lsrs	r0, r2, #8
 8000f1e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f22:	1219      	asrs	r1, r3, #8
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4613      	mov	r3, r2

}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f30:	46bd      	mov	sp, r7
 8000f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f36:	bf00      	nop
 8000f38:	2000019e 	.word	0x2000019e
 8000f3c:	2000019c 	.word	0x2000019c
 8000f40:	2000019a 	.word	0x2000019a

08000f44 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <lcd_start_write+0x14>)
 8000f4e:	f003 fdcf 	bl	8004af0 <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020000 	.word	0x40020000

08000f5c <lcd_end_write>:

static void lcd_end_write(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2110      	movs	r1, #16
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <lcd_end_write+0x14>)
 8000f66:	f003 fdc3 	bl	8004af0 <HAL_GPIO_WritePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40020000 	.word	0x40020000

08000f74 <lcd_start_command>:

static void lcd_start_command(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <lcd_start_command+0x14>)
 8000f7e:	f003 fdb7 	bl	8004af0 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020000 	.word	0x40020000

08000f8c <lcd_start_data>:

static void lcd_start_data(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2102      	movs	r1, #2
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <lcd_start_data+0x14>)
 8000f96:	f003 fdab 	bl	8004af0 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 8000fae:	f7ff ffe1 	bl	8000f74 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 8000fb2:	1df9      	adds	r1, r7, #7
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <lcd_spi_send_com+0x30>)
 8000fbc:	f005 fa6b 	bl	8006496 <HAL_SPI_Transmit>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d000      	beq.n	8000fcc <lcd_spi_send_com+0x28>
		while (1) {}
 8000fca:	e7fe      	b.n	8000fca <lcd_spi_send_com+0x26>
	}
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000270 	.word	0x20000270

08000fd8 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00f      	beq.n	8001008 <lcd_spi_send_data+0x30>
		lcd_start_data();
 8000fe8:	f7ff ffd0 	bl	8000f8c <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <lcd_spi_send_data+0x38>)
 8000ff8:	f005 fa4d 	bl	8006496 <HAL_SPI_Transmit>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d000      	beq.n	8001008 <lcd_spi_send_data+0x30>
			while (1) {}
 8001006:	e7fe      	b.n	8001006 <lcd_spi_send_data+0x2e>
		}
	}
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000270 	.word	0x20000270

08001014 <lcd_set_window>:

static void lcd_set_window(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	4604      	mov	r4, r0
 800101c:	4608      	mov	r0, r1
 800101e:	4611      	mov	r1, r2
 8001020:	461a      	mov	r2, r3
 8001022:	4623      	mov	r3, r4
 8001024:	80fb      	strh	r3, [r7, #6]
 8001026:	4603      	mov	r3, r0
 8001028:	80bb      	strh	r3, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	807b      	strh	r3, [r7, #2]
 800102e:	4613      	mov	r3, r2
 8001030:	803b      	strh	r3, [r7, #0]
	x += _xstart;
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <lcd_set_window+0xc4>)
 8001034:	881a      	ldrh	r2, [r3, #0]
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4413      	add	r3, r2
 800103a:	80fb      	strh	r3, [r7, #6]
	y += _ystart;
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <lcd_set_window+0xc8>)
 800103e:	881a      	ldrh	r2, [r3, #0]
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	80bb      	strh	r3, [r7, #4]

	uint8_t xa[4] = {x >> 8, x, (x+w-1)>>8, (x+w-1) };
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	733b      	strb	r3, [r7, #12]
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	737b      	strb	r3, [r7, #13]
 8001056:	88fa      	ldrh	r2, [r7, #6]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4413      	add	r3, r2
 800105c:	3b01      	subs	r3, #1
 800105e:	121b      	asrs	r3, r3, #8
 8001060:	b2db      	uxtb	r3, r3
 8001062:	73bb      	strb	r3, [r7, #14]
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	b2db      	uxtb	r3, r3
 8001070:	3b01      	subs	r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	73fb      	strb	r3, [r7, #15]
	uint8_t ya[4] = {y >> 8, y, (y+h-1)>>8, (y+h-1) };
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	b29b      	uxth	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	723b      	strb	r3, [r7, #8]
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	727b      	strb	r3, [r7, #9]
 8001086:	88ba      	ldrh	r2, [r7, #4]
 8001088:	883b      	ldrh	r3, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	3b01      	subs	r3, #1
 800108e:	121b      	asrs	r3, r3, #8
 8001090:	b2db      	uxtb	r3, r3
 8001092:	72bb      	strb	r3, [r7, #10]
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	883b      	ldrh	r3, [r7, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	4413      	add	r3, r2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3b01      	subs	r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	72fb      	strb	r3, [r7, #11]

	lcd_spi_send_com(ST77XX_CASET);
 80010a6:	202a      	movs	r0, #42	; 0x2a
 80010a8:	f7ff ff7c 	bl	8000fa4 <lcd_spi_send_com>
	lcd_spi_send_data(xa, 4);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff90 	bl	8000fd8 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RASET);
 80010b8:	202b      	movs	r0, #43	; 0x2b
 80010ba:	f7ff ff73 	bl	8000fa4 <lcd_spi_send_com>
	lcd_spi_send_data(ya, 4);
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2104      	movs	r1, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff87 	bl	8000fd8 <lcd_spi_send_data>
	lcd_spi_send_com(ST77XX_RAMWR);
 80010ca:	202c      	movs	r0, #44	; 0x2c
 80010cc:	f7ff ff6a 	bl	8000fa4 <lcd_spi_send_com>
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	200001c2 	.word	0x200001c2
 80010dc:	200001c4 	.word	0x200001c4

080010e0 <lcd_init>:

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <lcd_init+0xd4>)
 80010e8:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2108      	movs	r1, #8
 80010ee:	4832      	ldr	r0, [pc, #200]	; (80011b8 <lcd_init+0xd8>)
 80010f0:	f003 fcfe 	bl	8004af0 <HAL_GPIO_WritePin>
	osDelay(100);
 80010f4:	2064      	movs	r0, #100	; 0x64
 80010f6:	f007 fc36 	bl	8008966 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2108      	movs	r1, #8
 80010fe:	482e      	ldr	r0, [pc, #184]	; (80011b8 <lcd_init+0xd8>)
 8001100:	f003 fcf6 	bl	8004af0 <HAL_GPIO_WritePin>
	osDelay(100);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f007 fc2e 	bl	8008966 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2108      	movs	r1, #8
 800110e:	482a      	ldr	r0, [pc, #168]	; (80011b8 <lcd_init+0xd8>)
 8001110:	f003 fcee 	bl	8004af0 <HAL_GPIO_WritePin>
	osDelay(100);
 8001114:	2064      	movs	r0, #100	; 0x64
 8001116:	f007 fc26 	bl	8008966 <osDelay>

	numCommands = *ptr++;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	60ba      	str	r2, [r7, #8]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 8001124:	e035      	b.n	8001192 <lcd_init+0xb2>
		cmd = *ptr++;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	b29b      	uxth	r3, r3
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114a:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 800114c:	f7ff fefa 	bl	8000f44 <lcd_start_write>
		lcd_spi_send_com(cmd);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff26 	bl	8000fa4 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	4619      	mov	r1, r3
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff ff3b 	bl	8000fd8 <lcd_spi_send_data>
		lcd_end_write();
 8001162:	f7ff fefb 	bl	8000f5c <lcd_end_write>
		ptr += numArgs;
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]

		if (ms) {
 800116e:	89bb      	ldrh	r3, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00e      	beq.n	8001192 <lcd_init+0xb2>
			ms = *ptr++;
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60ba      	str	r2, [r7, #8]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 800117e:	89bb      	ldrh	r3, [r7, #12]
 8001180:	2bff      	cmp	r3, #255	; 0xff
 8001182:	d102      	bne.n	800118a <lcd_init+0xaa>
				ms = 500;
 8001184:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001188:	81bb      	strh	r3, [r7, #12]
			osDelay(ms);
 800118a:	89bb      	ldrh	r3, [r7, #12]
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fbea 	bl	8008966 <osDelay>
	while (numCommands--) {
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	73fa      	strb	r2, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1c4      	bne.n	8001126 <lcd_init+0x46>
		}
	}

	lcd_start_write();
 800119c:	f7ff fed2 	bl	8000f44 <lcd_start_write>
	lcd_set_rotation(2);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f000 f80b 	bl	80011bc <lcd_set_rotation>
	lcd_end_write();
 80011a6:	f7ff fed9 	bl	8000f5c <lcd_end_write>

	return 0;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	0800f4d0 	.word	0x0800f4d0
 80011b8:	40020000 	.word	0x40020000

080011bc <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <lcd_set_rotation+0xec>)
 80011d4:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <lcd_set_rotation+0xec>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d856      	bhi.n	800128c <lcd_set_rotation+0xd0>
 80011de:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <lcd_set_rotation+0x28>)
 80011e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e4:	080011f5 	.word	0x080011f5
 80011e8:	0800121b 	.word	0x0800121b
 80011ec:	08001241 	.word	0x08001241
 80011f0:	08001267 	.word	0x08001267
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 80011f4:	23c0      	movs	r3, #192	; 0xc0
 80011f6:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <lcd_set_rotation+0xf0>)
 80011fa:	22a0      	movs	r2, #160	; 0xa0
 80011fc:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <lcd_set_rotation+0xf4>)
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <lcd_set_rotation+0xf8>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <lcd_set_rotation+0xfc>)
 800120c:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <lcd_set_rotation+0x100>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <lcd_set_rotation+0x104>)
 8001216:	801a      	strh	r2, [r3, #0]
		break;
 8001218:	e038      	b.n	800128c <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 800121a:	23a0      	movs	r3, #160	; 0xa0
 800121c:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <lcd_set_rotation+0xf4>)
 8001220:	22a0      	movs	r2, #160	; 0xa0
 8001222:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <lcd_set_rotation+0xf0>)
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <lcd_set_rotation+0xf8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <lcd_set_rotation+0x104>)
 8001232:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <lcd_set_rotation+0x100>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <lcd_set_rotation+0xfc>)
 800123c:	801a      	strh	r2, [r3, #0]
		break;
 800123e:	e025      	b.n	800128c <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <lcd_set_rotation+0xf0>)
 8001246:	22a0      	movs	r2, #160	; 0xa0
 8001248:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <lcd_set_rotation+0xf4>)
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <lcd_set_rotation+0xf8>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <lcd_set_rotation+0xfc>)
 8001258:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <lcd_set_rotation+0x100>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <lcd_set_rotation+0x104>)
 8001262:	801a      	strh	r2, [r3, #0]
		break;
 8001264:	e012      	b.n	800128c <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 8001266:	2368      	movs	r3, #104	; 0x68
 8001268:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <lcd_set_rotation+0xf4>)
 800126c:	22a0      	movs	r2, #160	; 0xa0
 800126e:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <lcd_set_rotation+0xf0>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <lcd_set_rotation+0xf8>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <lcd_set_rotation+0x104>)
 800127e:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <lcd_set_rotation+0x100>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <lcd_set_rotation+0xfc>)
 8001288:	801a      	strh	r2, [r3, #0]
		break;
 800128a:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 800128c:	2036      	movs	r0, #54	; 0x36
 800128e:	f7ff fe89 	bl	8000fa4 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 8001292:	f107 030f 	add.w	r3, r7, #15
 8001296:	2101      	movs	r1, #1
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe9d 	bl	8000fd8 <lcd_spi_send_data>
	return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200001c1 	.word	0x200001c1
 80012ac:	200001c8 	.word	0x200001c8
 80012b0:	200001c6 	.word	0x200001c6
 80012b4:	200001ca 	.word	0x200001ca
 80012b8:	200001c2 	.word	0x200001c2
 80012bc:	200001cb 	.word	0x200001cb
 80012c0:	200001c4 	.word	0x200001c4

080012c4 <lcd_pixel>:

void lcd_pixel(int16_t x, int16_t y, uint16_t color) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
 80012ce:	460b      	mov	r3, r1
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 80012d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db29      	blt.n	8001332 <lcd_pixel+0x6e>
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	4a16      	ldr	r2, [pc, #88]	; (800133c <lcd_pixel+0x78>)
 80012e4:	8812      	ldrh	r2, [r2, #0]
 80012e6:	4293      	cmp	r3, r2
 80012e8:	da23      	bge.n	8001332 <lcd_pixel+0x6e>
 80012ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db1f      	blt.n	8001332 <lcd_pixel+0x6e>
 80012f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <lcd_pixel+0x7c>)
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	4293      	cmp	r3, r2
 80012fc:	da19      	bge.n	8001332 <lcd_pixel+0x6e>
		lcd_start_write();
 80012fe:	f7ff fe21 	bl	8000f44 <lcd_start_write>
		lcd_set_window(x, y, 1, 1);
 8001302:	88f8      	ldrh	r0, [r7, #6]
 8001304:	88b9      	ldrh	r1, [r7, #4]
 8001306:	2301      	movs	r3, #1
 8001308:	2201      	movs	r2, #1
 800130a:	f7ff fe83 	bl	8001014 <lcd_set_window>
		lcd_start_data();
 800130e:	f7ff fe3d 	bl	8000f8c <lcd_start_data>
		uint8_t c[2] = { color >> 8, color};
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	b29b      	uxth	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	733b      	strb	r3, [r7, #12]
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	737b      	strb	r3, [r7, #13]
		lcd_spi_send_data(c, 2);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2102      	movs	r1, #2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe55 	bl	8000fd8 <lcd_spi_send_data>
		lcd_end_write();
 800132e:	f7ff fe15 	bl	8000f5c <lcd_end_write>
	}
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001c6 	.word	0x200001c6
 8001340:	200001c8 	.word	0x200001c8

08001344 <lcd_vline>:

void lcd_vline(uint16_t x, uint16_t y, uint16_t h, uint16_t color) {
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	80fb      	strh	r3, [r7, #6]
 8001356:	4603      	mov	r3, r0
 8001358:	80bb      	strh	r3, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	807b      	strh	r3, [r7, #2]
 800135e:	4613      	mov	r3, r2
 8001360:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 8001362:	f7ff fdef 	bl	8000f44 <lcd_start_write>
	lcd_set_window(x, y, 1, h);
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	88b9      	ldrh	r1, [r7, #4]
 800136a:	88f8      	ldrh	r0, [r7, #6]
 800136c:	2201      	movs	r2, #1
 800136e:	f7ff fe51 	bl	8001014 <lcd_set_window>
	lcd_start_data();
 8001372:	f7ff fe0b 	bl	8000f8c <lcd_start_data>
	uint8_t c[2] = { color >> 8, color};
 8001376:	883b      	ldrh	r3, [r7, #0]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	733b      	strb	r3, [r7, #12]
 8001380:	883b      	ldrh	r3, [r7, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	737b      	strb	r3, [r7, #13]
	do
		lcd_spi_send_data(c, 2);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2102      	movs	r1, #2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe23 	bl	8000fd8 <lcd_spi_send_data>
	while (h--);
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	1e5a      	subs	r2, r3, #1
 8001396:	807a      	strh	r2, [r7, #2]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f4      	bne.n	8001386 <lcd_vline+0x42>
	lcd_end_write();
 800139c:	f7ff fdde 	bl	8000f5c <lcd_end_write>
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}

080013a8 <lcd_fill_rect>:
	lcd_vline(x+w, y, h, color);
	lcd_hline(x, y, w, color);
	lcd_hline(x, y+h, w, color);
}

void lcd_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4604      	mov	r4, r0
 80013b0:	4608      	mov	r0, r1
 80013b2:	4611      	mov	r1, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4623      	mov	r3, r4
 80013b8:	80fb      	strh	r3, [r7, #6]
 80013ba:	4603      	mov	r3, r0
 80013bc:	80bb      	strh	r3, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
 80013c2:	4613      	mov	r3, r2
 80013c4:	803b      	strh	r3, [r7, #0]
	if (x < 0) x = 0;
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da01      	bge.n	80013d2 <lcd_fill_rect+0x2a>
 80013ce:	2300      	movs	r3, #0
 80013d0:	80fb      	strh	r3, [r7, #6]
	if (y < 0) y = 0;
 80013d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da01      	bge.n	80013de <lcd_fill_rect+0x36>
 80013da:	2300      	movs	r3, #0
 80013dc:	80bb      	strh	r3, [r7, #4]
	if (x + w > _width) w = _width - x;
 80013de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a20      	ldr	r2, [pc, #128]	; (800146c <lcd_fill_rect+0xc4>)
 80013ea:	8812      	ldrh	r2, [r2, #0]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	dd05      	ble.n	80013fc <lcd_fill_rect+0x54>
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <lcd_fill_rect+0xc4>)
 80013f2:	881a      	ldrh	r2, [r3, #0]
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	807b      	strh	r3, [r7, #2]
	if (y + h > _height) h = _height - y;
 80013fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001400:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001404:	4413      	add	r3, r2
 8001406:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <lcd_fill_rect+0xc8>)
 8001408:	8812      	ldrh	r2, [r2, #0]
 800140a:	4293      	cmp	r3, r2
 800140c:	dd05      	ble.n	800141a <lcd_fill_rect+0x72>
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <lcd_fill_rect+0xc8>)
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b29b      	uxth	r3, r3
 8001418:	803b      	strh	r3, [r7, #0]
	lcd_start_write();
 800141a:	f7ff fd93 	bl	8000f44 <lcd_start_write>
	lcd_set_window(x, y, w, h);
 800141e:	88f8      	ldrh	r0, [r7, #6]
 8001420:	88b9      	ldrh	r1, [r7, #4]
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	883b      	ldrh	r3, [r7, #0]
 8001426:	f7ff fdf5 	bl	8001014 <lcd_set_window>
	uint8_t c[2] = { color >> 8, color};
 800142a:	8c3b      	ldrh	r3, [r7, #32]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	b29b      	uxth	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	723b      	strb	r3, [r7, #8]
 8001434:	8c3b      	ldrh	r3, [r7, #32]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	727b      	strb	r3, [r7, #9]
	uint32_t cnt = w * h;
 800143a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800143e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	60fb      	str	r3, [r7, #12]
	while (cnt--)
 8001448:	e005      	b.n	8001456 <lcd_fill_rect+0xae>
		lcd_spi_send_data(c, 2);
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	2102      	movs	r1, #2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fdc1 	bl	8000fd8 <lcd_spi_send_data>
	while (cnt--)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	60fa      	str	r2, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f4      	bne.n	800144a <lcd_fill_rect+0xa2>
	lcd_end_write();
 8001460:	f7ff fd7c 	bl	8000f5c <lcd_end_write>
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	200001c6 	.word	0x200001c6
 8001470:	200001c8 	.word	0x200001c8

08001474 <lcd_fill>:

void lcd_fill(uint16_t color) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af02      	add	r7, sp, #8
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
	lcd_fill_rect(0, 0, _width, _height, color);
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <lcd_fill+0x2c>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <lcd_fill+0x30>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	b219      	sxth	r1, r3
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	460b      	mov	r3, r1
 8001490:	2100      	movs	r1, #0
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff ff88 	bl	80013a8 <lcd_fill_rect>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200001c6 	.word	0x200001c6
 80014a4:	200001c8 	.word	0x200001c8

080014a8 <lcd_set_text_color>:
		px = x;
	}
	lcd_vline(x0, y0 - r, 2 * r + 1, color);
}

void lcd_set_text_color(uint16_t color) {
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
	textcolor = color;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <lcd_set_text_color+0x1c>)
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	8013      	strh	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	20000004 	.word	0x20000004

080014c8 <lcd_set_text_bg_color>:

void lcd_set_text_bg_color(uint16_t color) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	textbgcolor = color;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <lcd_set_text_bg_color+0x1c>)
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	8013      	strh	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	200001d0 	.word	0x200001d0

080014e8 <lcd_char>:

void lcd_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	4603      	mov	r3, r0
 80014fc:	80bb      	strh	r3, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	4613      	mov	r3, r2
 8001504:	803b      	strh	r3, [r7, #0]

	if ((x >= _width) ||
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	4a87      	ldr	r2, [pc, #540]	; (8001728 <lcd_char+0x240>)
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	4293      	cmp	r3, r2
 8001510:	f280 8106 	bge.w	8001720 <lcd_char+0x238>
		(y >= _height) ||
 8001514:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001518:	4a84      	ldr	r2, [pc, #528]	; (800172c <lcd_char+0x244>)
 800151a:	8812      	ldrh	r2, [r2, #0]
	if ((x >= _width) ||
 800151c:	4293      	cmp	r3, r2
 800151e:	f280 80ff 	bge.w	8001720 <lcd_char+0x238>
		((x + 6 * size_x - 1) < 0) ||
 8001522:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001526:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	440b      	add	r3, r1
		(y >= _height) ||
 8001534:	2b00      	cmp	r3, #0
 8001536:	f340 80f3 	ble.w	8001720 <lcd_char+0x238>
		((y + 8 * size_y - 1) < 0))
 800153a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800153e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4413      	add	r3, r2
		((x + 6 * size_x - 1) < 0) ||
 8001546:	2b00      	cmp	r3, #0
 8001548:	f340 80ea 	ble.w	8001720 <lcd_char+0x238>
		return;

	if (c >= 176)
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	2baf      	cmp	r3, #175	; 0xaf
 8001550:	d902      	bls.n	8001558 <lcd_char+0x70>
		c++;
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	3301      	adds	r3, #1
 8001556:	70fb      	strb	r3, [r7, #3]

	for (int8_t i = 0; i < 5; i++) {
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e0aa      	b.n	80016b4 <lcd_char+0x1cc>
		uint8_t line = font[c * 5 + i];
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	441a      	add	r2, r3
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4413      	add	r3, r2
 800156c:	4a70      	ldr	r2, [pc, #448]	; (8001730 <lcd_char+0x248>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	73bb      	strb	r3, [r7, #14]
		for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001572:	2300      	movs	r3, #0
 8001574:	737b      	strb	r3, [r7, #13]
 8001576:	e092      	b.n	800169e <lcd_char+0x1b6>
			if (line & 1) {
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d040      	beq.n	8001604 <lcd_char+0x11c>
				if (size_x == 1 && size_y == 1)
 8001582:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001586:	2b01      	cmp	r3, #1
 8001588:	d116      	bne.n	80015b8 <lcd_char+0xd0>
 800158a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800158e:	2b01      	cmp	r3, #1
 8001590:	d112      	bne.n	80015b8 <lcd_char+0xd0>
					lcd_pixel(x + i, y + j, color);
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	b29a      	uxth	r2, r3
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	4413      	add	r3, r2
 800159c:	b29b      	uxth	r3, r3
 800159e:	b218      	sxth	r0, r3
 80015a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	883a      	ldrh	r2, [r7, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fe87 	bl	80012c4 <lcd_pixel>
 80015b6:	e069      	b.n	800168c <lcd_char+0x1a4>
				else
					lcd_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y,
 80015b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	fb12 f303 	smulbb	r3, r2, r3
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4413      	add	r3, r2
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b218      	sxth	r0, r3
 80015d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015dc:	b29b      	uxth	r3, r3
 80015de:	fb12 f303 	smulbb	r3, r2, r3
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b219      	sxth	r1, r3
 80015ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015f6:	b21c      	sxth	r4, r3
 80015f8:	883b      	ldrh	r3, [r7, #0]
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4623      	mov	r3, r4
 80015fe:	f7ff fed3 	bl	80013a8 <lcd_fill_rect>
 8001602:	e043      	b.n	800168c <lcd_char+0x1a4>
				color);
			} else if (bg != color) {
 8001604:	8c3a      	ldrh	r2, [r7, #32]
 8001606:	883b      	ldrh	r3, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d03f      	beq.n	800168c <lcd_char+0x1a4>
				if (size_x == 1 && size_y == 1)
 800160c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001610:	2b01      	cmp	r3, #1
 8001612:	d116      	bne.n	8001642 <lcd_char+0x15a>
 8001614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001618:	2b01      	cmp	r3, #1
 800161a:	d112      	bne.n	8001642 <lcd_char+0x15a>
					lcd_pixel(x + i, y + j, bg);
 800161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001620:	b29a      	uxth	r2, r3
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	4413      	add	r3, r2
 8001626:	b29b      	uxth	r3, r3
 8001628:	b218      	sxth	r0, r3
 800162a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800162e:	b29a      	uxth	r2, r3
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	b21b      	sxth	r3, r3
 8001638:	8c3a      	ldrh	r2, [r7, #32]
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fe42 	bl	80012c4 <lcd_pixel>
 8001640:	e024      	b.n	800168c <lcd_char+0x1a4>
				else
					lcd_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	b29a      	uxth	r2, r3
 8001648:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800164c:	b29b      	uxth	r3, r3
 800164e:	fb12 f303 	smulbb	r3, r2, r3
 8001652:	b29a      	uxth	r2, r3
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	4413      	add	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	b218      	sxth	r0, r3
 800165c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001660:	b29a      	uxth	r2, r3
 8001662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001666:	b29b      	uxth	r3, r3
 8001668:	fb12 f303 	smulbb	r3, r2, r3
 800166c:	b29a      	uxth	r2, r3
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	b29b      	uxth	r3, r3
 8001674:	b219      	sxth	r1, r3
 8001676:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800167a:	b21a      	sxth	r2, r3
 800167c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001680:	b21c      	sxth	r4, r3
 8001682:	8c3b      	ldrh	r3, [r7, #32]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	4623      	mov	r3, r4
 8001688:	f7ff fe8e 	bl	80013a8 <lcd_fill_rect>
		for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800168c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	737b      	strb	r3, [r7, #13]
 8001698:	7bbb      	ldrb	r3, [r7, #14]
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	73bb      	strb	r3, [r7, #14]
 800169e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016a2:	2b07      	cmp	r3, #7
 80016a4:	f77f af68 	ble.w	8001578 <lcd_char+0x90>
	for (int8_t i = 0; i < 5; i++) {
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	f77f af50 	ble.w	800155e <lcd_char+0x76>
			}
		}
	}
	if (bg != color) {
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	883b      	ldrh	r3, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d02d      	beq.n	8001722 <lcd_char+0x23a>
		if (size_x == 1 && size_y == 1)
 80016c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10c      	bne.n	80016e8 <lcd_char+0x200>
 80016ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <lcd_char+0x200>
			lcd_vline(x + 5, y, 8, bg);
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	3305      	adds	r3, #5
 80016da:	b298      	uxth	r0, r3
 80016dc:	88b9      	ldrh	r1, [r7, #4]
 80016de:	8c3b      	ldrh	r3, [r7, #32]
 80016e0:	2208      	movs	r2, #8
 80016e2:	f7ff fe2f 	bl	8001344 <lcd_vline>
 80016e6:	e01c      	b.n	8001722 <lcd_char+0x23a>
		else
			lcd_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80016e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4413      	add	r3, r2
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	b218      	sxth	r0, r3
 80016fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001702:	b21a      	sxth	r2, r3
 8001704:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001708:	b29b      	uxth	r3, r3
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	b29b      	uxth	r3, r3
 800170e:	b21c      	sxth	r4, r3
 8001710:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001714:	8c3b      	ldrh	r3, [r7, #32]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4623      	mov	r3, r4
 800171a:	f7ff fe45 	bl	80013a8 <lcd_fill_rect>
 800171e:	e000      	b.n	8001722 <lcd_char+0x23a>
		return;
 8001720:	bf00      	nop
	}
}
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	200001c6 	.word	0x200001c6
 800172c:	200001c8 	.word	0x200001c8
 8001730:	0800efd0 	.word	0x0800efd0

08001734 <lcd_putchar>:

void lcd_putchar(char c) {
 8001734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001736:	b087      	sub	sp, #28
 8001738:	af04      	add	r7, sp, #16
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	if (c == '\n') {
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b0a      	cmp	r3, #10
 8001742:	d10d      	bne.n	8001760 <lcd_putchar+0x2c>
		cursor_x = 0;
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <lcd_putchar+0xc8>)
 8001746:	2200      	movs	r2, #0
 8001748:	801a      	strh	r2, [r3, #0]
		cursor_y += textsize_y * 8;
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <lcd_putchar+0xcc>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	b29a      	uxth	r2, r3
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <lcd_putchar+0xd0>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <lcd_putchar+0xd0>)
 800175c:	801a      	strh	r2, [r3, #0]
			cursor_y += textsize_y * 8;
		}
		lcd_char(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
		cursor_x += textsize_x * 6;
	}
}
 800175e:	e048      	b.n	80017f2 <lcd_putchar+0xbe>
	} else if (c != '\r') {
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b0d      	cmp	r3, #13
 8001764:	d045      	beq.n	80017f2 <lcd_putchar+0xbe>
		if (wrap && ((cursor_x + textsize_x * 6) > _width)) {
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <lcd_putchar+0xd4>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01b      	beq.n	80017a6 <lcd_putchar+0x72>
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <lcd_putchar+0xc8>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <lcd_putchar+0xd8>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	440b      	add	r3, r1
 8001784:	4a22      	ldr	r2, [pc, #136]	; (8001810 <lcd_putchar+0xdc>)
 8001786:	8812      	ldrh	r2, [r2, #0]
 8001788:	4293      	cmp	r3, r2
 800178a:	dd0c      	ble.n	80017a6 <lcd_putchar+0x72>
			cursor_x = 0;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <lcd_putchar+0xc8>)
 800178e:	2200      	movs	r2, #0
 8001790:	801a      	strh	r2, [r3, #0]
			cursor_y += textsize_y * 8;
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <lcd_putchar+0xcc>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <lcd_putchar+0xd0>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <lcd_putchar+0xd0>)
 80017a4:	801a      	strh	r2, [r3, #0]
		lcd_char(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <lcd_putchar+0xc8>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b218      	sxth	r0, r3
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <lcd_putchar+0xd0>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b21c      	sxth	r4, r3
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <lcd_putchar+0xe0>)
 80017b4:	881e      	ldrh	r6, [r3, #0]
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <lcd_putchar+0xe4>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	4a14      	ldr	r2, [pc, #80]	; (800180c <lcd_putchar+0xd8>)
 80017bc:	8812      	ldrh	r2, [r2, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	490f      	ldr	r1, [pc, #60]	; (8001800 <lcd_putchar+0xcc>)
 80017c2:	8809      	ldrh	r1, [r1, #0]
 80017c4:	b2c9      	uxtb	r1, r1
 80017c6:	79fd      	ldrb	r5, [r7, #7]
 80017c8:	9102      	str	r1, [sp, #8]
 80017ca:	9201      	str	r2, [sp, #4]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	4633      	mov	r3, r6
 80017d0:	462a      	mov	r2, r5
 80017d2:	4621      	mov	r1, r4
 80017d4:	f7ff fe88 	bl	80014e8 <lcd_char>
		cursor_x += textsize_x * 6;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <lcd_putchar+0xd8>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	0052      	lsls	r2, r2, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <lcd_putchar+0xc8>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b03      	ldr	r3, [pc, #12]	; (80017fc <lcd_putchar+0xc8>)
 80017f0:	801a      	strh	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200001ce 	.word	0x200001ce
 8001800:	20000002 	.word	0x20000002
 8001804:	200001cc 	.word	0x200001cc
 8001808:	20000006 	.word	0x20000006
 800180c:	20000000 	.word	0x20000000
 8001810:	200001c6 	.word	0x200001c6
 8001814:	20000004 	.word	0x20000004
 8001818:	200001d0 	.word	0x200001d0

0800181c <lcd_print>:

void lcd_print(char *text) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	while (*text) {
 8001824:	e006      	b.n	8001834 <lcd_print+0x18>
		lcd_putchar(*text++);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <lcd_putchar>
	while (*text) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f4      	bne.n	8001826 <lcd_print+0xa>
	}
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <lcd_set_cursor>:

void lcd_set_cursor(int16_t x, int16_t y) {
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	80fb      	strh	r3, [r7, #6]
 8001854:	4613      	mov	r3, r2
 8001856:	80bb      	strh	r3, [r7, #4]
  cursor_x = x * textsize_x * 6;
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <lcd_set_cursor+0x4c>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	fb12 f303 	smulbb	r3, r2, r3
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	0052      	lsls	r2, r2, #1
 8001868:	4413      	add	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <lcd_set_cursor+0x50>)
 8001870:	801a      	strh	r2, [r3, #0]
  cursor_y = y * textsize_y * 8;
 8001872:	88ba      	ldrh	r2, [r7, #4]
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <lcd_set_cursor+0x54>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	fb12 f303 	smulbb	r3, r2, r3
 800187c:	b29b      	uxth	r3, r3
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	b29a      	uxth	r2, r3
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <lcd_set_cursor+0x58>)
 8001884:	801a      	strh	r2, [r3, #0]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000000 	.word	0x20000000
 8001898:	200001ce 	.word	0x200001ce
 800189c:	20000002 	.word	0x20000002
 80018a0:	200001cc 	.word	0x200001cc

080018a4 <lcd_set_text_size>:

void lcd_set_text_size(int16_t size_x, int16_t size_y) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	80fb      	strh	r3, [r7, #6]
 80018b0:	4613      	mov	r3, r2
 80018b2:	80bb      	strh	r3, [r7, #4]
  textsize_x = size_x;
 80018b4:	88fa      	ldrh	r2, [r7, #6]
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <lcd_set_text_size+0x28>)
 80018b8:	801a      	strh	r2, [r3, #0]
  textsize_y = size_y;
 80018ba:	88ba      	ldrh	r2, [r7, #4]
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <lcd_set_text_size+0x2c>)
 80018be:	801a      	strh	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000002 	.word	0x20000002

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f001 ff92 	bl	8003800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 f886 	bl	80019ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f000 fa6e 	bl	8001dc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e4:	f000 fa44 	bl	8001d70 <MX_DMA_Init>
  MX_TIM3_Init();
 80018e8:	f000 f9a0 	bl	8001c2c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80018ec:	f000 f9ec 	bl	8001cc8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80018f0:	f000 f938 	bl	8001b64 <MX_I2C1_Init>
  MX_SPI1_Init();
 80018f4:	f000 f964 	bl	8001bc0 <MX_SPI1_Init>
  MX_ADC1_Init();
 80018f8:	f000 f8e2 	bl	8001ac0 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80018fc:	f000 fa0e 	bl	8001d1c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001900:	f006 fe86 	bl	8008610 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of muxUART_LOG */
  muxUART_LOGHandle = osMutexNew(&muxUART_LOG_attributes);
 8001904:	4823      	ldr	r0, [pc, #140]	; (8001994 <main+0xc0>)
 8001906:	f007 f849 	bl	800899c <osMutexNew>
 800190a:	4603      	mov	r3, r0
 800190c:	4a22      	ldr	r2, [pc, #136]	; (8001998 <main+0xc4>)
 800190e:	6013      	str	r3, [r2, #0]

  /* creation of muxUART_WIFI */
  muxUART_WIFIHandle = osMutexNew(&muxUART_WIFI_attributes);
 8001910:	4822      	ldr	r0, [pc, #136]	; (800199c <main+0xc8>)
 8001912:	f007 f843 	bl	800899c <osMutexNew>
 8001916:	4603      	mov	r3, r0
 8001918:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <main+0xcc>)
 800191a:	6013      	str	r3, [r2, #0]

  /* creation of muxLCD */
  muxLCDHandle = osMutexNew(&muxLCD_attributes);
 800191c:	4821      	ldr	r0, [pc, #132]	; (80019a4 <main+0xd0>)
 800191e:	f007 f83d 	bl	800899c <osMutexNew>
 8001922:	4603      	mov	r3, r0
 8001924:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <main+0xd4>)
 8001926:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semUART_TX_WIFI */
  semUART_TX_WIFIHandle = osSemaphoreNew(1, 1, &semUART_TX_WIFI_attributes);
 8001928:	4a20      	ldr	r2, [pc, #128]	; (80019ac <main+0xd8>)
 800192a:	2101      	movs	r1, #1
 800192c:	2001      	movs	r0, #1
 800192e:	f007 f943 	bl	8008bb8 <osSemaphoreNew>
 8001932:	4603      	mov	r3, r0
 8001934:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <main+0xdc>)
 8001936:	6013      	str	r3, [r2, #0]

  /* creation of semUART_RX_WIFI */
  semUART_RX_WIFIHandle = osSemaphoreNew(1, 1, &semUART_RX_WIFI_attributes);
 8001938:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <main+0xe0>)
 800193a:	2101      	movs	r1, #1
 800193c:	2001      	movs	r0, #1
 800193e:	f007 f93b 	bl	8008bb8 <osSemaphoreNew>
 8001942:	4603      	mov	r3, r0
 8001944:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <main+0xe4>)
 8001946:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskWiFi */
  taskWiFiHandle = osThreadNew(StartTaskWiFi, NULL, &taskWiFi_attributes);
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <main+0xe8>)
 800194a:	2100      	movs	r1, #0
 800194c:	481c      	ldr	r0, [pc, #112]	; (80019c0 <main+0xec>)
 800194e:	f006 fea9 	bl	80086a4 <osThreadNew>
 8001952:	4603      	mov	r3, r0
 8001954:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <main+0xf0>)
 8001956:	6013      	str	r3, [r2, #0]

  /* creation of taskBaro */
  taskBaroHandle = osThreadNew(StartTaskBaro, NULL, &taskBaro_attributes);
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <main+0xf4>)
 800195a:	2100      	movs	r1, #0
 800195c:	481b      	ldr	r0, [pc, #108]	; (80019cc <main+0xf8>)
 800195e:	f006 fea1 	bl	80086a4 <osThreadNew>
 8001962:	4603      	mov	r3, r0
 8001964:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <main+0xfc>)
 8001966:	6013      	str	r3, [r2, #0]

  /* creation of taskDefault */
  taskDefaultHandle = osThreadNew(StartTaskDefault, NULL, &taskDefault_attributes);
 8001968:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <main+0x100>)
 800196a:	2100      	movs	r1, #0
 800196c:	481a      	ldr	r0, [pc, #104]	; (80019d8 <main+0x104>)
 800196e:	f006 fe99 	bl	80086a4 <osThreadNew>
 8001972:	4603      	mov	r3, r0
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <main+0x108>)
 8001976:	6013      	str	r3, [r2, #0]

  /* creation of taskWiFiListen */
  taskWiFiListenHandle = osThreadNew(StartTaskWiFiListen, NULL, &taskWiFiListen_attributes);
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <main+0x10c>)
 800197a:	2100      	movs	r1, #0
 800197c:	4819      	ldr	r0, [pc, #100]	; (80019e4 <main+0x110>)
 800197e:	f006 fe91 	bl	80086a4 <osThreadNew>
 8001982:	4603      	mov	r3, r0
 8001984:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <main+0x114>)
 8001986:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  streams_init();
 8001988:	f001 f896 	bl	8002ab8 <streams_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800198c:	f006 fe64 	bl	8008658 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001990:	e7fe      	b.n	8001990 <main+0xbc>
 8001992:	bf00      	nop
 8001994:	0800f5d4 	.word	0x0800f5d4
 8001998:	20000468 	.word	0x20000468
 800199c:	0800f5e4 	.word	0x0800f5e4
 80019a0:	2000046c 	.word	0x2000046c
 80019a4:	0800f5f4 	.word	0x0800f5f4
 80019a8:	20000470 	.word	0x20000470
 80019ac:	0800f604 	.word	0x0800f604
 80019b0:	20000474 	.word	0x20000474
 80019b4:	0800f614 	.word	0x0800f614
 80019b8:	20000478 	.word	0x20000478
 80019bc:	0800f544 	.word	0x0800f544
 80019c0:	08001eed 	.word	0x08001eed
 80019c4:	20000458 	.word	0x20000458
 80019c8:	0800f568 	.word	0x0800f568
 80019cc:	08002071 	.word	0x08002071
 80019d0:	2000045c 	.word	0x2000045c
 80019d4:	0800f58c 	.word	0x0800f58c
 80019d8:	08002105 	.word	0x08002105
 80019dc:	20000460 	.word	0x20000460
 80019e0:	0800f5b0 	.word	0x0800f5b0
 80019e4:	08002dc9 	.word	0x08002dc9
 80019e8:	20000464 	.word	0x20000464

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b094      	sub	sp, #80	; 0x50
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	2230      	movs	r2, #48	; 0x30
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00b f930 	bl	800cc60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <SystemClock_Config+0xcc>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <SystemClock_Config+0xcc>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <SystemClock_Config+0xcc>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <SystemClock_Config+0xd0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <SystemClock_Config+0xd0>)
 8001a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <SystemClock_Config+0xd0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a50:	2301      	movs	r3, #1
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a54:	2310      	movs	r3, #16
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a60:	2308      	movs	r3, #8
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001a64:	2354      	movs	r3, #84	; 0x54
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 f82d 	bl	8005ad4 <HAL_RCC_OscConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a80:	f000 fbe6 	bl	8002250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a84:	230f      	movs	r3, #15
 8001a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fa8f 	bl	8005fc4 <HAL_RCC_ClockConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001aac:	f000 fbd0 	bl	8002250 <Error_Handler>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3750      	adds	r7, #80	; 0x50
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000

08001ac0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001ad4:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <MX_ADC1_Init+0x9c>)
 8001ad6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001ada:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ade:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <MX_ADC1_Init+0xa0>)
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b22:	f001 fedf 	bl	80038e4 <HAL_ADC_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b2c:	f000 fb90 	bl	8002250 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_ADC1_Init+0x98>)
 8001b42:	f001 ff13 	bl	800396c <HAL_ADC_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b4c:	f000 fb80 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200001d4 	.word	0x200001d4
 8001b5c:	40012000 	.word	0x40012000
 8001b60:	0f000001 	.word	0x0f000001

08001b64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b6a:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <MX_I2C1_Init+0x54>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b70:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_I2C1_Init+0x58>)
 8001b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_I2C1_Init+0x50>)
 8001ba2:	f002 ffd7 	bl	8004b54 <HAL_I2C_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bac:	f000 fb50 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000021c 	.word	0x2000021c
 8001bb8:	40005400 	.word	0x40005400
 8001bbc:	000186a0 	.word	0x000186a0

08001bc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <MX_SPI1_Init+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001bcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MX_SPI1_Init+0x64>)
 8001c12:	f004 fbb7 	bl	8006384 <HAL_SPI_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c1c:	f000 fb18 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000270 	.word	0x20000270
 8001c28:	40013000 	.word	0x40013000

08001c2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <MX_TIM3_Init+0x98>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c50:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001c54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c70:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c72:	f004 fe17 	bl	80068a4 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001c7c:	f000 fae8 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c8e:	f004 ff60 	bl	8006b52 <HAL_TIM_ConfigClockSource>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001c98:	f000 fada 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001caa:	f005 f965 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001cb4:	f000 facc 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200002c8 	.word	0x200002c8
 8001cc4:	40000400 	.word	0x40000400

08001cc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <MX_USART1_UART_Init+0x50>)
 8001cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cee:	220c      	movs	r2, #12
 8001cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001d00:	f005 f9bc 	bl	800707c <HAL_UART_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d0a:	f000 faa1 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000310 	.word	0x20000310
 8001d18:	40011000 	.word	0x40011000

08001d1c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_USART6_UART_Init+0x4c>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <MX_USART6_UART_Init+0x50>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <MX_USART6_UART_Init+0x4c>)
 8001d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d2c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_USART6_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_USART6_UART_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_USART6_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_USART6_UART_Init+0x4c>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_USART6_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_USART6_UART_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_USART6_UART_Init+0x4c>)
 8001d54:	f005 f992 	bl	800707c <HAL_UART_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d5e:	f000 fa77 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000354 	.word	0x20000354
 8001d6c:	40011400 	.word	0x40011400

08001d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_DMA_Init+0x4c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <MX_DMA_Init+0x4c>)
 8001d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <MX_DMA_Init+0x4c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2105      	movs	r1, #5
 8001d96:	2039      	movs	r0, #57	; 0x39
 8001d98:	f002 f8e1 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d9c:	2039      	movs	r0, #57	; 0x39
 8001d9e:	f002 f8fa 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2105      	movs	r1, #5
 8001da6:	203a      	movs	r0, #58	; 0x3a
 8001da8:	f002 f8d9 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001dac:	203a      	movs	r0, #58	; 0x3a
 8001dae:	f002 f8f2 	bl	8003f96 <HAL_NVIC_EnableIRQ>

}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a33      	ldr	r2, [pc, #204]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b31      	ldr	r3, [pc, #196]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <MX_GPIO_Init+0x108>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4c:	481f      	ldr	r0, [pc, #124]	; (8001ecc <MX_GPIO_Init+0x10c>)
 8001e4e:	f002 fe4f 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_A0_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	211a      	movs	r1, #26
 8001e56:	481e      	ldr	r0, [pc, #120]	; (8001ed0 <MX_GPIO_Init+0x110>)
 8001e58:	f002 fe4a 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4815      	ldr	r0, [pc, #84]	; (8001ecc <MX_GPIO_Init+0x10c>)
 8001e76:	f002 fcb7 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_A0_Pin LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_A0_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 8001e7a:	231a      	movs	r3, #26
 8001e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480f      	ldr	r0, [pc, #60]	; (8001ed0 <MX_GPIO_Init+0x110>)
 8001e92:	f002 fca9 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001e96:	2340      	movs	r3, #64	; 0x40
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <MX_GPIO_Init+0x110>)
 8001eac:	f002 fc9c 	bl	80047e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2105      	movs	r1, #5
 8001eb4:	2017      	movs	r0, #23
 8001eb6:	f002 f852 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eba:	2017      	movs	r0, #23
 8001ebc:	f002 f86b 	bl	8003f96 <HAL_NVIC_EnableIRQ>

}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	; 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <StartTaskWiFi>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskWiFi */
void StartTaskWiFi(void *argument)
{
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eee:	b099      	sub	sp, #100	; 0x64
 8001ef0:	af08      	add	r7, sp, #32
 8001ef2:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
  // Wait for WiFi init
  osThreadFlagsWait(FLAG_WIFI_RDY, osFlagsWaitAll, osWaitForever);
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2001      	movs	r0, #1
 8001efc:	f006 fcb2 	bl	8008864 <osThreadFlagsWait>

  // And try to connect to AP
  printf("Try to connect to '%s'... ", wifi_ap);
 8001f00:	494e      	ldr	r1, [pc, #312]	; (800203c <StartTaskWiFi+0x150>)
 8001f02:	484f      	ldr	r0, [pc, #316]	; (8002040 <StartTaskWiFi+0x154>)
 8001f04:	f00b fa94 	bl	800d430 <iprintf>
  wifi_status_t st = wifi_connect_to_ap(wifi_ap, wifi_pass, pdMS_TO_TICKS(30000));
 8001f08:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001f0c:	494d      	ldr	r1, [pc, #308]	; (8002044 <StartTaskWiFi+0x158>)
 8001f0e:	484b      	ldr	r0, [pc, #300]	; (800203c <StartTaskWiFi+0x150>)
 8001f10:	f001 f94c 	bl	80031ac <wifi_connect_to_ap>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (st) {
 8001f1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01e      	beq.n	8001f60 <StartTaskWiFi+0x74>
    if (st == WIFI_ERR_TMT)
 8001f22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d103      	bne.n	8001f32 <StartTaskWiFi+0x46>
      printf("timeout\n");
 8001f2a:	4847      	ldr	r0, [pc, #284]	; (8002048 <StartTaskWiFi+0x15c>)
 8001f2c:	f00b fb06 	bl	800d53c <puts>
 8001f30:	e012      	b.n	8001f58 <StartTaskWiFi+0x6c>
    else if (st == WIFI_ERR_NO_AP)
 8001f32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d103      	bne.n	8001f42 <StartTaskWiFi+0x56>
      printf("no AP\n");
 8001f3a:	4844      	ldr	r0, [pc, #272]	; (800204c <StartTaskWiFi+0x160>)
 8001f3c:	f00b fafe 	bl	800d53c <puts>
 8001f40:	e00a      	b.n	8001f58 <StartTaskWiFi+0x6c>
    else if (st == WIFI_ERR_NO_IP)
 8001f42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d103      	bne.n	8001f52 <StartTaskWiFi+0x66>
      printf("didn't get IP\n");
 8001f4a:	4841      	ldr	r0, [pc, #260]	; (8002050 <StartTaskWiFi+0x164>)
 8001f4c:	f00b faf6 	bl	800d53c <puts>
 8001f50:	e002      	b.n	8001f58 <StartTaskWiFi+0x6c>
    else
      printf("ERROR\n");
 8001f52:	4840      	ldr	r0, [pc, #256]	; (8002054 <StartTaskWiFi+0x168>)
 8001f54:	f00b faf2 	bl	800d53c <puts>
    while (1) {
      osDelay(10);
 8001f58:	200a      	movs	r0, #10
 8001f5a:	f006 fd04 	bl	8008966 <osDelay>
 8001f5e:	e7fb      	b.n	8001f58 <StartTaskWiFi+0x6c>
    }
  }
  printf("OK\n");
 8001f60:	483d      	ldr	r0, [pc, #244]	; (8002058 <StartTaskWiFi+0x16c>)
 8001f62:	f00b faeb 	bl	800d53c <puts>
  lcd_set_text_size(2, 2);
 8001f66:	2102      	movs	r1, #2
 8001f68:	2002      	movs	r0, #2
 8001f6a:	f7ff fc9b 	bl	80018a4 <lcd_set_text_size>
  lcd_set_cursor(4, 4);
 8001f6e:	2104      	movs	r1, #4
 8001f70:	2004      	movs	r0, #4
 8001f72:	f7ff fc69 	bl	8001848 <lcd_set_cursor>
  lcd_print(wifi_ap);
 8001f76:	4831      	ldr	r0, [pc, #196]	; (800203c <StartTaskWiFi+0x150>)
 8001f78:	f7ff fc50 	bl	800181c <lcd_print>

  uint32_t ip[4], mac[6];
  if (wifi_get_own_ip(ip, mac) == WIFI_OK) {
 8001f7c:	f107 0214 	add.w	r2, r7, #20
 8001f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f9a2 	bl	80032d0 <wifi_get_own_ip>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d131      	bne.n	8001ff6 <StartTaskWiFi+0x10a>
    printf("IP: %lu.%lu.%lu.%lu, MAC: %02lX:%02lX:%02lX:%02lX:%02lX:%02lX\n",
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f9c:	6038      	str	r0, [r7, #0]
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	69f8      	ldr	r0, [r7, #28]
 8001fa6:	6a3c      	ldr	r4, [r7, #32]
 8001fa8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8001faa:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8001fac:	9606      	str	r6, [sp, #24]
 8001fae:	9505      	str	r5, [sp, #20]
 8001fb0:	9404      	str	r4, [sp, #16]
 8001fb2:	9003      	str	r0, [sp, #12]
 8001fb4:	9102      	str	r1, [sp, #8]
 8001fb6:	9201      	str	r2, [sp, #4]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	4826      	ldr	r0, [pc, #152]	; (800205c <StartTaskWiFi+0x170>)
 8001fc2:	f00b fa35 	bl	800d430 <iprintf>
        ip[0], ip[1], ip[2], ip[3],
        mac[0], mac[1], mac[2],
        mac[3], mac[4], mac[5]);
    sprintf(text, "%ld.%ld.%ld.%ld", ip[0], ip[1], ip[2], ip[3]);
 8001fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fce:	9201      	str	r2, [sp, #4]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	4922      	ldr	r1, [pc, #136]	; (8002060 <StartTaskWiFi+0x174>)
 8001fd8:	4822      	ldr	r0, [pc, #136]	; (8002064 <StartTaskWiFi+0x178>)
 8001fda:	f00b fc8b 	bl	800d8f4 <siprintf>
    lcd_set_text_size(2, 2);
 8001fde:	2102      	movs	r1, #2
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	f7ff fc5f 	bl	80018a4 <lcd_set_text_size>
    lcd_set_cursor(3, 2);
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f7ff fc2d 	bl	8001848 <lcd_set_cursor>
    lcd_print(text);
 8001fee:	481d      	ldr	r0, [pc, #116]	; (8002064 <StartTaskWiFi+0x178>)
 8001ff0:	f7ff fc14 	bl	800181c <lcd_print>
 8001ff4:	e00e      	b.n	8002014 <StartTaskWiFi+0x128>
  } else {
    sprintf(text, "none");
 8001ff6:	491c      	ldr	r1, [pc, #112]	; (8002068 <StartTaskWiFi+0x17c>)
 8001ff8:	481a      	ldr	r0, [pc, #104]	; (8002064 <StartTaskWiFi+0x178>)
 8001ffa:	f00b fc7b 	bl	800d8f4 <siprintf>
    lcd_set_text_size(2, 2);
 8001ffe:	2102      	movs	r1, #2
 8002000:	2002      	movs	r0, #2
 8002002:	f7ff fc4f 	bl	80018a4 <lcd_set_text_size>
    lcd_set_cursor(3, 2);
 8002006:	2102      	movs	r1, #2
 8002008:	2003      	movs	r0, #3
 800200a:	f7ff fc1d 	bl	8001848 <lcd_set_cursor>
    lcd_print(text);
 800200e:	4815      	ldr	r0, [pc, #84]	; (8002064 <StartTaskWiFi+0x178>)
 8002010:	f7ff fc04 	bl	800181c <lcd_print>
  }

  wifi_server(1, 80);
 8002014:	2150      	movs	r1, #80	; 0x50
 8002016:	2001      	movs	r0, #1
 8002018:	f001 fa5a 	bl	80034d0 <wifi_server>
  lcd_set_text_size(2, 2);
 800201c:	2102      	movs	r1, #2
 800201e:	2002      	movs	r0, #2
 8002020:	f7ff fc40 	bl	80018a4 <lcd_set_text_size>
  lcd_set_cursor(0, 5);
 8002024:	2105      	movs	r1, #5
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff fc0e 	bl	8001848 <lcd_set_cursor>
  lcd_print("SRV START");
 800202c:	480f      	ldr	r0, [pc, #60]	; (800206c <StartTaskWiFi+0x180>)
 800202e:	f7ff fbf5 	bl	800181c <lcd_print>

  /* Infinite loop */
  for(;;) {
    osDelay(pdMS_TO_TICKS(1000));
 8002032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002036:	f006 fc96 	bl	8008966 <osDelay>
 800203a:	e7fa      	b.n	8002032 <StartTaskWiFi+0x146>
 800203c:	200000e4 	.word	0x200000e4
 8002040:	0800ec54 	.word	0x0800ec54
 8002044:	200000f0 	.word	0x200000f0
 8002048:	0800ec70 	.word	0x0800ec70
 800204c:	0800ec78 	.word	0x0800ec78
 8002050:	0800ec80 	.word	0x0800ec80
 8002054:	0800ec90 	.word	0x0800ec90
 8002058:	0800ec98 	.word	0x0800ec98
 800205c:	0800ec9c 	.word	0x0800ec9c
 8002060:	0800ecdc 	.word	0x0800ecdc
 8002064:	20000480 	.word	0x20000480
 8002068:	0800ecec 	.word	0x0800ecec
 800206c:	0800ecf4 	.word	0x0800ecf4

08002070 <StartTaskBaro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBaro */
void StartTaskBaro(void *argument)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBaro */
	  osThreadFlagsWait(FLAG_BARO_RDY, osFlagsNoClear | osFlagsWaitAny, osWaitForever);
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	2102      	movs	r1, #2
 800207e:	2002      	movs	r0, #2
 8002080:	f006 fbf0 	bl	8008864 <osThreadFlagsWait>
	  lcd_set_text_size(1, 1);
 8002084:	2101      	movs	r1, #1
 8002086:	2001      	movs	r0, #1
 8002088:	f7ff fc0c 	bl	80018a4 <lcd_set_text_size>
	  lcd_set_cursor(0, 12);
 800208c:	210c      	movs	r1, #12
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff fbda 	bl	8001848 <lcd_set_cursor>
	  lcd_print("Pressure:");
 8002094:	4816      	ldr	r0, [pc, #88]	; (80020f0 <StartTaskBaro+0x80>)
 8002096:	f7ff fbc1 	bl	800181c <lcd_print>

	  /* Infinite loop */
	  for(;;) {
	    pressure = baro_read_press();
 800209a:	f7fe fc41 	bl	8000920 <baro_read_press>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <StartTaskBaro+0x84>)
 80020a2:	6013      	str	r3, [r2, #0]
	    sprintf(text, "%ld.%02ld hPa", pressure/100, pressure%100);
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <StartTaskBaro+0x84>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <StartTaskBaro+0x88>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	0959      	lsrs	r1, r3, #5
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <StartTaskBaro+0x84>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <StartTaskBaro+0x88>)
 80020b6:	fba3 0302 	umull	r0, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2064      	movs	r0, #100	; 0x64
 80020be:	fb00 f303 	mul.w	r3, r0, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	460a      	mov	r2, r1
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <StartTaskBaro+0x8c>)
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <StartTaskBaro+0x90>)
 80020ca:	f00b fc13 	bl	800d8f4 <siprintf>
	    lcd_set_text_size(1, 1);
 80020ce:	2101      	movs	r1, #1
 80020d0:	2001      	movs	r0, #1
 80020d2:	f7ff fbe7 	bl	80018a4 <lcd_set_text_size>
	    lcd_set_cursor(10, 12);
 80020d6:	210c      	movs	r1, #12
 80020d8:	200a      	movs	r0, #10
 80020da:	f7ff fbb5 	bl	8001848 <lcd_set_cursor>
	    lcd_print(text);
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <StartTaskBaro+0x90>)
 80020e0:	f7ff fb9c 	bl	800181c <lcd_print>
	    osDelay(pdMS_TO_TICKS(1000));
 80020e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020e8:	f006 fc3d 	bl	8008966 <osDelay>
	    pressure = baro_read_press();
 80020ec:	e7d5      	b.n	800209a <StartTaskBaro+0x2a>
 80020ee:	bf00      	nop
 80020f0:	0800ed00 	.word	0x0800ed00
 80020f4:	2000047c 	.word	0x2000047c
 80020f8:	51eb851f 	.word	0x51eb851f
 80020fc:	0800ed0c 	.word	0x0800ed0c
 8002100:	20000480 	.word	0x20000480

08002104 <StartTaskDefault>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDefault */
void StartTaskDefault(void *argument)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDefault */
  printf("\nInit LCD... ");
 800210c:	4843      	ldr	r0, [pc, #268]	; (800221c <StartTaskDefault+0x118>)
 800210e:	f00b f98f 	bl	800d430 <iprintf>
  lcd_init();
 8002112:	f7fe ffe5 	bl	80010e0 <lcd_init>
  lcd_fill(ST7735_BLUE);
 8002116:	201f      	movs	r0, #31
 8002118:	f7ff f9ac 	bl	8001474 <lcd_fill>
  lcd_set_text_bg_color(ST7735_BLUE);
 800211c:	201f      	movs	r0, #31
 800211e:	f7ff f9d3 	bl	80014c8 <lcd_set_text_bg_color>
  lcd_set_text_color(ST7735_YELLOW);
 8002122:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002126:	f7ff f9bf 	bl	80014a8 <lcd_set_text_color>
  lcd_set_text_size(2, 2);
 800212a:	2102      	movs	r1, #2
 800212c:	2002      	movs	r0, #2
 800212e:	f7ff fbb9 	bl	80018a4 <lcd_set_text_size>
  lcd_set_cursor(0, 0);
 8002132:	2100      	movs	r1, #0
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff fb87 	bl	8001848 <lcd_set_cursor>
  lcd_print("Baro:");
 800213a:	4839      	ldr	r0, [pc, #228]	; (8002220 <StartTaskDefault+0x11c>)
 800213c:	f7ff fb6e 	bl	800181c <lcd_print>
  lcd_set_cursor(0, 1);
 8002140:	2101      	movs	r1, #1
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fb80 	bl	8001848 <lcd_set_cursor>
  lcd_print("WiFi:");
 8002148:	4836      	ldr	r0, [pc, #216]	; (8002224 <StartTaskDefault+0x120>)
 800214a:	f7ff fb67 	bl	800181c <lcd_print>
  lcd_set_cursor(0, 2);
 800214e:	2102      	movs	r1, #2
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff fb79 	bl	8001848 <lcd_set_cursor>
  lcd_print("IP:");
 8002156:	4834      	ldr	r0, [pc, #208]	; (8002228 <StartTaskDefault+0x124>)
 8002158:	f7ff fb60 	bl	800181c <lcd_print>
  lcd_set_cursor(0, 4);
 800215c:	2104      	movs	r1, #4
 800215e:	2000      	movs	r0, #0
 8002160:	f7ff fb72 	bl	8001848 <lcd_set_cursor>
  lcd_print("AP:");
 8002164:	4831      	ldr	r0, [pc, #196]	; (800222c <StartTaskDefault+0x128>)
 8002166:	f7ff fb59 	bl	800181c <lcd_print>
  printf("OK\n");
 800216a:	4831      	ldr	r0, [pc, #196]	; (8002230 <StartTaskDefault+0x12c>)
 800216c:	f00b f9e6 	bl	800d53c <puts>

  printf("Init Barometer... ");
 8002170:	4830      	ldr	r0, [pc, #192]	; (8002234 <StartTaskDefault+0x130>)
 8002172:	f00b f95d 	bl	800d430 <iprintf>
  baro_stat_t b_st = baro_init();
 8002176:	f7fe fa5d 	bl	8000634 <baro_init>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
  lcd_set_text_size(2, 2);
 800217e:	2102      	movs	r1, #2
 8002180:	2002      	movs	r0, #2
 8002182:	f7ff fb8f 	bl	80018a4 <lcd_set_text_size>
  lcd_set_cursor(6, 0);
 8002186:	2100      	movs	r1, #0
 8002188:	2006      	movs	r0, #6
 800218a:	f7ff fb5d 	bl	8001848 <lcd_set_cursor>
  if (b_st) {
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <StartTaskDefault+0x9e>
    lcd_print("FAIL");
 8002194:	4828      	ldr	r0, [pc, #160]	; (8002238 <StartTaskDefault+0x134>)
 8002196:	f7ff fb41 	bl	800181c <lcd_print>
    printf("ERROR\n");
 800219a:	4828      	ldr	r0, [pc, #160]	; (800223c <StartTaskDefault+0x138>)
 800219c:	f00b f9ce 	bl	800d53c <puts>
 80021a0:	e00b      	b.n	80021ba <StartTaskDefault+0xb6>
  } else {
    lcd_print("OK");
 80021a2:	4823      	ldr	r0, [pc, #140]	; (8002230 <StartTaskDefault+0x12c>)
 80021a4:	f7ff fb3a 	bl	800181c <lcd_print>
    printf("OK\n");
 80021a8:	4821      	ldr	r0, [pc, #132]	; (8002230 <StartTaskDefault+0x12c>)
 80021aa:	f00b f9c7 	bl	800d53c <puts>
    osThreadFlagsSet(taskBaroHandle, FLAG_BARO_RDY);
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <StartTaskDefault+0x13c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f006 fb07 	bl	80087c8 <osThreadFlagsSet>
  }

  printf("Init WIFI... ");
 80021ba:	4822      	ldr	r0, [pc, #136]	; (8002244 <StartTaskDefault+0x140>)
 80021bc:	f00b f938 	bl	800d430 <iprintf>
  wifi_status_t w_st = wifi_init();
 80021c0:	f000 fea0 	bl	8002f04 <wifi_init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73bb      	strb	r3, [r7, #14]
  lcd_set_text_size(2, 2);
 80021c8:	2102      	movs	r1, #2
 80021ca:	2002      	movs	r0, #2
 80021cc:	f7ff fb6a 	bl	80018a4 <lcd_set_text_size>
  lcd_set_cursor(6, 1);
 80021d0:	2101      	movs	r1, #1
 80021d2:	2006      	movs	r0, #6
 80021d4:	f7ff fb38 	bl	8001848 <lcd_set_cursor>
  if (w_st) {
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <StartTaskDefault+0xf6>
    lcd_print("FAIL");
 80021de:	4816      	ldr	r0, [pc, #88]	; (8002238 <StartTaskDefault+0x134>)
 80021e0:	f7ff fb1c 	bl	800181c <lcd_print>
    if (w_st == WIFI_ERR_TMT)
 80021e4:	7bbb      	ldrb	r3, [r7, #14]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d103      	bne.n	80021f2 <StartTaskDefault+0xee>
      printf("timeout\n");
 80021ea:	4817      	ldr	r0, [pc, #92]	; (8002248 <StartTaskDefault+0x144>)
 80021ec:	f00b f9a6 	bl	800d53c <puts>
 80021f0:	e00f      	b.n	8002212 <StartTaskDefault+0x10e>
    else
      printf("ERROR\n");
 80021f2:	4812      	ldr	r0, [pc, #72]	; (800223c <StartTaskDefault+0x138>)
 80021f4:	f00b f9a2 	bl	800d53c <puts>
 80021f8:	e00b      	b.n	8002212 <StartTaskDefault+0x10e>

  } else {
    printf("OK\n");
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <StartTaskDefault+0x12c>)
 80021fc:	f00b f99e 	bl	800d53c <puts>
    lcd_print("OK");
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <StartTaskDefault+0x12c>)
 8002202:	f7ff fb0b 	bl	800181c <lcd_print>
    osThreadFlagsSet(taskWiFiHandle, FLAG_WIFI_RDY);
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <StartTaskDefault+0x148>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f006 fadb 	bl	80087c8 <osThreadFlagsSet>
  }

  /* Infinite loop */
  for(;;) {
    osDelay(pdMS_TO_TICKS(1000));
 8002212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002216:	f006 fba6 	bl	8008966 <osDelay>
 800221a:	e7fa      	b.n	8002212 <StartTaskDefault+0x10e>
 800221c:	0800ed1c 	.word	0x0800ed1c
 8002220:	0800ed2c 	.word	0x0800ed2c
 8002224:	0800ed34 	.word	0x0800ed34
 8002228:	0800ed3c 	.word	0x0800ed3c
 800222c:	0800ed40 	.word	0x0800ed40
 8002230:	0800ec98 	.word	0x0800ec98
 8002234:	0800ed44 	.word	0x0800ed44
 8002238:	0800ed58 	.word	0x0800ed58
 800223c:	0800ec90 	.word	0x0800ec90
 8002240:	2000045c 	.word	0x2000045c
 8002244:	0800ed60 	.word	0x0800ed60
 8002248:	0800ec70 	.word	0x0800ec70
 800224c:	20000458 	.word	0x20000458

08002250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002258:	e7fe      	b.n	8002258 <Error_Handler+0x8>
	...

0800225c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_MspInit+0x54>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_MspInit+0x54>)
 800226c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_MspInit+0x54>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_MspInit+0x54>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_MspInit+0x54>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_MspInit+0x54>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	210f      	movs	r1, #15
 800229e:	f06f 0001 	mvn.w	r0, #1
 80022a2:	f001 fe5c 	bl	8003f5e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_ADC_MspInit+0x7c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d127      	bne.n	8002326 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_ADC_MspInit+0x80>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_ADC_MspInit+0x80>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800230e:	2301      	movs	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002312:	2303      	movs	r3, #3
 8002314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4805      	ldr	r0, [pc, #20]	; (8002338 <HAL_ADC_MspInit+0x84>)
 8002322:	f002 fa61 	bl	80047e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40012000 	.word	0x40012000
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000

0800233c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_I2C_MspInit+0x84>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d12c      	bne.n	80023b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_I2C_MspInit+0x88>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_I2C_MspInit+0x88>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_I2C_MspInit+0x88>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800237a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002380:	2312      	movs	r3, #18
 8002382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800238c:	2304      	movs	r3, #4
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	480c      	ldr	r0, [pc, #48]	; (80023c8 <HAL_I2C_MspInit+0x8c>)
 8002398:	f002 fa26 	bl	80047e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_I2C_MspInit+0x88>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_I2C_MspInit+0x88>)
 80023a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023aa:	6413      	str	r3, [r2, #64]	; 0x40
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_I2C_MspInit+0x88>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023b8:	bf00      	nop
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40005400 	.word	0x40005400
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020400 	.word	0x40020400

080023cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <HAL_SPI_MspInit+0x84>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d12b      	bne.n	8002446 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_SPI_MspInit+0x88>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_SPI_MspInit+0x88>)
 80023f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_SPI_MspInit+0x88>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_SPI_MspInit+0x88>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_SPI_MspInit+0x88>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_SPI_MspInit+0x88>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 8002426:	23a0      	movs	r3, #160	; 0xa0
 8002428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002436:	2305      	movs	r3, #5
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <HAL_SPI_MspInit+0x8c>)
 8002442:	f002 f9d1 	bl	80047e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40013000 	.word	0x40013000
 8002454:	40023800 	.word	0x40023800
 8002458:	40020000 	.word	0x40020000

0800245c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <HAL_TIM_Base_MspInit+0x48>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d115      	bne.n	800249a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2105      	movs	r1, #5
 800248e:	201d      	movs	r0, #29
 8002490:	f001 fd65 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002494:	201d      	movs	r0, #29
 8002496:	f001 fd7e 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a69      	ldr	r2, [pc, #420]	; (8002670 <HAL_UART_MspInit+0x1c4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d163      	bne.n	8002596 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	4b68      	ldr	r3, [pc, #416]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a67      	ldr	r2, [pc, #412]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80024d8:	f043 0310 	orr.w	r3, r3, #16
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b65      	ldr	r3, [pc, #404]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	4b61      	ldr	r3, [pc, #388]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a60      	ldr	r2, [pc, #384]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b5e      	ldr	r3, [pc, #376]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002506:	23c0      	movs	r3, #192	; 0xc0
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002516:	2307      	movs	r3, #7
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	4619      	mov	r1, r3
 8002520:	4855      	ldr	r0, [pc, #340]	; (8002678 <HAL_UART_MspInit+0x1cc>)
 8002522:	f002 f961 	bl	80047e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002526:	4b55      	ldr	r3, [pc, #340]	; (800267c <HAL_UART_MspInit+0x1d0>)
 8002528:	4a55      	ldr	r2, [pc, #340]	; (8002680 <HAL_UART_MspInit+0x1d4>)
 800252a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800252c:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_UART_MspInit+0x1d0>)
 800252e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002532:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002534:	4b51      	ldr	r3, [pc, #324]	; (800267c <HAL_UART_MspInit+0x1d0>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800253a:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_UART_MspInit+0x1d0>)
 800253c:	2200      	movs	r2, #0
 800253e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002540:	4b4e      	ldr	r3, [pc, #312]	; (800267c <HAL_UART_MspInit+0x1d0>)
 8002542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002546:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002548:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_UART_MspInit+0x1d0>)
 800254a:	2200      	movs	r2, #0
 800254c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800254e:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_UART_MspInit+0x1d0>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002554:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_UART_MspInit+0x1d0>)
 8002556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800255a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800255c:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_UART_MspInit+0x1d0>)
 800255e:	2200      	movs	r2, #0
 8002560:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002562:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_UART_MspInit+0x1d0>)
 8002564:	2200      	movs	r2, #0
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002568:	4844      	ldr	r0, [pc, #272]	; (800267c <HAL_UART_MspInit+0x1d0>)
 800256a:	f001 fd2f 	bl	8003fcc <HAL_DMA_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002574:	f7ff fe6c 	bl	8002250 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a40      	ldr	r2, [pc, #256]	; (800267c <HAL_UART_MspInit+0x1d0>)
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
 800257e:	4a3f      	ldr	r2, [pc, #252]	; (800267c <HAL_UART_MspInit+0x1d0>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2105      	movs	r1, #5
 8002588:	2025      	movs	r0, #37	; 0x25
 800258a:	f001 fce8 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800258e:	2025      	movs	r0, #37	; 0x25
 8002590:	f001 fd01 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002594:	e068      	b.n	8002668 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART6)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a3a      	ldr	r2, [pc, #232]	; (8002684 <HAL_UART_MspInit+0x1d8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d163      	bne.n	8002668 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	4b33      	ldr	r3, [pc, #204]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	4a32      	ldr	r2, [pc, #200]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80025aa:	f043 0320 	orr.w	r3, r3, #32
 80025ae:	6453      	str	r3, [r2, #68]	; 0x44
 80025b0:	4b30      	ldr	r3, [pc, #192]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4a2b      	ldr	r2, [pc, #172]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6313      	str	r3, [r2, #48]	; 0x30
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_UART_MspInit+0x1c8>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025ea:	2308      	movs	r3, #8
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4619      	mov	r1, r3
 80025f4:	4824      	ldr	r0, [pc, #144]	; (8002688 <HAL_UART_MspInit+0x1dc>)
 80025f6:	f002 f8f7 	bl	80047e8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_UART_MspInit+0x1e0>)
 80025fc:	4a24      	ldr	r2, [pc, #144]	; (8002690 <HAL_UART_MspInit+0x1e4>)
 80025fe:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <HAL_UART_MspInit+0x1e0>)
 8002602:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002606:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_UART_MspInit+0x1e0>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800260e:	4b1f      	ldr	r3, [pc, #124]	; (800268c <HAL_UART_MspInit+0x1e0>)
 8002610:	2200      	movs	r2, #0
 8002612:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_UART_MspInit+0x1e0>)
 8002616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_UART_MspInit+0x1e0>)
 800261e:	2200      	movs	r2, #0
 8002620:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <HAL_UART_MspInit+0x1e0>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_UART_MspInit+0x1e0>)
 800262a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_UART_MspInit+0x1e0>)
 8002632:	2200      	movs	r2, #0
 8002634:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_UART_MspInit+0x1e0>)
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800263c:	4813      	ldr	r0, [pc, #76]	; (800268c <HAL_UART_MspInit+0x1e0>)
 800263e:	f001 fcc5 	bl	8003fcc <HAL_DMA_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002648:	f7ff fe02 	bl	8002250 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_UART_MspInit+0x1e0>)
 8002650:	639a      	str	r2, [r3, #56]	; 0x38
 8002652:	4a0e      	ldr	r2, [pc, #56]	; (800268c <HAL_UART_MspInit+0x1e0>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002658:	2200      	movs	r2, #0
 800265a:	2105      	movs	r1, #5
 800265c:	2047      	movs	r0, #71	; 0x47
 800265e:	f001 fc7e 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002662:	2047      	movs	r0, #71	; 0x47
 8002664:	f001 fc97 	bl	8003f96 <HAL_NVIC_EnableIRQ>
}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	; 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40011000 	.word	0x40011000
 8002674:	40023800 	.word	0x40023800
 8002678:	40020400 	.word	0x40020400
 800267c:	20000398 	.word	0x20000398
 8002680:	40026440 	.word	0x40026440
 8002684:	40011400 	.word	0x40011400
 8002688:	40020000 	.word	0x40020000
 800268c:	200003f8 	.word	0x200003f8
 8002690:	40026428 	.word	0x40026428

08002694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002698:	e7fe      	b.n	8002698 <NMI_Handler+0x4>

0800269a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269e:	e7fe      	b.n	800269e <HardFault_Handler+0x4>

080026a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <MemManage_Handler+0x4>

080026a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026aa:	e7fe      	b.n	80026aa <BusFault_Handler+0x4>

080026ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <UsageFault_Handler+0x4>

080026b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c4:	f001 f8ee 	bl	80038a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026c8:	f008 fb9a 	bl	800ae00 <xTaskGetSchedulerState>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80026d2:	f009 fc81 	bl	800bfd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}

080026da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80026de:	2040      	movs	r0, #64	; 0x40
 80026e0:	f002 fa20 	bl	8004b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <TIM3_IRQHandler+0x10>)
 80026ee:	f004 f928 	bl	8006942 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200002c8 	.word	0x200002c8

080026fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <USART1_IRQHandler+0x10>)
 8002702:	f004 fe99 	bl	8007438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000310 	.word	0x20000310

08002710 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <DMA2_Stream1_IRQHandler+0x10>)
 8002716:	f001 fdf1 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200003f8 	.word	0x200003f8

08002724 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <DMA2_Stream2_IRQHandler+0x10>)
 800272a:	f001 fde7 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000398 	.word	0x20000398

08002738 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <USART6_IRQHandler+0x10>)
 800273e:	f004 fe7b 	bl	8007438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000354 	.word	0x20000354

0800274c <__io_getchar>:
osSemaphoreId_t semUART_STDIOHandle;
const osSemaphoreAttr_t semUART_STDIO_attributes = {
  .name = "semUART_STDIO"
};

int __io_getchar(int file) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	int buf;
	if (file == FILE_STDIN)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <__io_getchar+0x14>
		buf = BUF_STDIO;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	e008      	b.n	8002772 <__io_getchar+0x26>
	else if (file == FILE_WIFI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d102      	bne.n	800276c <__io_getchar+0x20>
		buf = BUF_WIFI;
 8002766:	2301      	movs	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e002      	b.n	8002772 <__io_getchar+0x26>
	else
		return EOF;
 800276c:	f04f 33ff 	mov.w	r3, #4294967295
 8002770:	e09e      	b.n	80028b0 <__io_getchar+0x164>

	buffer[buf].head = &buffer[buf].buffer[UART_RX_BUF_SIZE - buffer[buf].hdma->Instance->NDTR];
 8002772:	4951      	ldr	r1, [pc, #324]	; (80028b8 <__io_getchar+0x16c>)
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3308      	adds	r3, #8
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	484c      	ldr	r0, [pc, #304]	; (80028b8 <__io_getchar+0x16c>)
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4403      	add	r3, r0
 8002792:	3304      	adds	r3, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800279e:	4419      	add	r1, r3
 80027a0:	4845      	ldr	r0, [pc, #276]	; (80028b8 <__io_getchar+0x16c>)
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4403      	add	r3, r0
 80027ae:	330c      	adds	r3, #12
 80027b0:	6019      	str	r1, [r3, #0]

	while (buffer[buf].tail == buffer[buf].head) {
 80027b2:	e022      	b.n	80027fa <__io_getchar+0xae>
		buffer[buf].head = &buffer[buf].buffer[UART_RX_BUF_SIZE - buffer[buf].hdma->Instance->NDTR];
 80027b4:	4940      	ldr	r1, [pc, #256]	; (80028b8 <__io_getchar+0x16c>)
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	3308      	adds	r3, #8
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	483c      	ldr	r0, [pc, #240]	; (80028b8 <__io_getchar+0x16c>)
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4403      	add	r3, r0
 80027d4:	3304      	adds	r3, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80027e0:	4419      	add	r1, r3
 80027e2:	4835      	ldr	r0, [pc, #212]	; (80028b8 <__io_getchar+0x16c>)
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4403      	add	r3, r0
 80027f0:	330c      	adds	r3, #12
 80027f2:	6019      	str	r1, [r3, #0]
		osDelay(1);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f006 f8b6 	bl	8008966 <osDelay>
	while (buffer[buf].tail == buffer[buf].head) {
 80027fa:	492f      	ldr	r1, [pc, #188]	; (80028b8 <__io_getchar+0x16c>)
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3310      	adds	r3, #16
 800280a:	6819      	ldr	r1, [r3, #0]
 800280c:	482a      	ldr	r0, [pc, #168]	; (80028b8 <__io_getchar+0x16c>)
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4403      	add	r3, r0
 800281a:	330c      	adds	r3, #12
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4299      	cmp	r1, r3
 8002820:	d0c8      	beq.n	80027b4 <__io_getchar+0x68>
	}

	uint8_t b = *buffer[buf].tail;
 8002822:	4925      	ldr	r1, [pc, #148]	; (80028b8 <__io_getchar+0x16c>)
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3310      	adds	r3, #16
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	72fb      	strb	r3, [r7, #11]

	if (++buffer[buf].tail == (buffer[buf].buffer + UART_RX_BUF_SIZE))
 8002838:	491f      	ldr	r1, [pc, #124]	; (80028b8 <__io_getchar+0x16c>)
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3310      	adds	r3, #16
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	1c59      	adds	r1, r3, #1
 800284c:	481a      	ldr	r0, [pc, #104]	; (80028b8 <__io_getchar+0x16c>)
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4403      	add	r3, r0
 800285a:	3310      	adds	r3, #16
 800285c:	6019      	str	r1, [r3, #0]
 800285e:	4916      	ldr	r1, [pc, #88]	; (80028b8 <__io_getchar+0x16c>)
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	3310      	adds	r3, #16
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	4811      	ldr	r0, [pc, #68]	; (80028b8 <__io_getchar+0x16c>)
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4403      	add	r3, r0
 800287e:	3308      	adds	r3, #8
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002886:	4299      	cmp	r1, r3
 8002888:	d111      	bne.n	80028ae <__io_getchar+0x162>
		buffer[buf].tail = buffer[buf].buffer;
 800288a:	490b      	ldr	r1, [pc, #44]	; (80028b8 <__io_getchar+0x16c>)
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3308      	adds	r3, #8
 800289a:	6819      	ldr	r1, [r3, #0]
 800289c:	4806      	ldr	r0, [pc, #24]	; (80028b8 <__io_getchar+0x16c>)
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4403      	add	r3, r0
 80028aa:	3310      	adds	r3, #16
 80028ac:	6019      	str	r1, [r3, #0]

	return (int)b;
 80028ae:	7afb      	ldrb	r3, [r7, #11]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000008 	.word	0x20000008

080028bc <__io_putchar>:

int __io_putchar(int file, int ch) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
	int buf;
	if (file == FILE_STDOUT || file == FILE_STDERR)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d002      	beq.n	80028d2 <__io_putchar+0x16>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d102      	bne.n	80028d8 <__io_putchar+0x1c>
		buf = BUF_STDIO;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e007      	b.n	80028e8 <__io_putchar+0x2c>
	else if (file == FILE_WIFI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d102      	bne.n	80028e4 <__io_putchar+0x28>
		buf = BUF_WIFI;
 80028de:	2301      	movs	r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	e001      	b.n	80028e8 <__io_putchar+0x2c>
	else
		return 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e035      	b.n	8002954 <__io_putchar+0x98>

	osMutexAcquire(buffer[buf].mutex_tx, osWaitForever);
 80028e8:	491c      	ldr	r1, [pc, #112]	; (800295c <__io_putchar+0xa0>)
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	3314      	adds	r3, #20
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f04f 31ff 	mov.w	r1, #4294967295
 80028fe:	4618      	mov	r0, r3
 8002900:	f006 f8d2 	bl	8008aa8 <osMutexAcquire>
	HAL_UART_Transmit_IT(buffer[buf].huart, (uint8_t*)&ch, 1);
 8002904:	4915      	ldr	r1, [pc, #84]	; (800295c <__io_putchar+0xa0>)
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4639      	mov	r1, r7
 8002916:	2201      	movs	r2, #1
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fbfc 	bl	8007116 <HAL_UART_Transmit_IT>
	osSemaphoreAcquire(buffer[buf].sem, osWaitForever);
 800291e:	490f      	ldr	r1, [pc, #60]	; (800295c <__io_putchar+0xa0>)
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	331c      	adds	r3, #28
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	4618      	mov	r0, r3
 8002936:	f006 f9c9 	bl	8008ccc <osSemaphoreAcquire>
	osMutexRelease(buffer[buf].mutex_tx);
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__io_putchar+0xa0>)
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	3314      	adds	r3, #20
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f006 f8f6 	bl	8008b3e <osMutexRelease>
	return 0;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000008 	.word	0x20000008

08002960 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_UART_TxCpltCallback+0x34>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d104      	bne.n	800297a <HAL_UART_TxCpltCallback+0x1a>
		osSemaphoreRelease(semUART_STDIOHandle);
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_UART_TxCpltCallback+0x38>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f006 f9fb 	bl	8008d70 <osSemaphoreRelease>
	}

	if (huart == &huart6) {
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a07      	ldr	r2, [pc, #28]	; (800299c <HAL_UART_TxCpltCallback+0x3c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d104      	bne.n	800298c <HAL_UART_TxCpltCallback+0x2c>
		osSemaphoreRelease(semUART_WIFIHandle);
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_UART_TxCpltCallback+0x40>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f006 f9f2 	bl	8008d70 <osSemaphoreRelease>
	}
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000310 	.word	0x20000310
 8002998:	200014f8 	.word	0x200014f8
 800299c:	20000354 	.word	0x20000354
 80029a0:	200014f4 	.word	0x200014f4

080029a4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	int b;
	if (huart == &huart1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3f      	ldr	r2, [pc, #252]	; (8002aac <HAL_UART_ErrorCallback+0x108>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d102      	bne.n	80029ba <HAL_UART_ErrorCallback+0x16>
		b = BUF_STDIO;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	e005      	b.n	80029c6 <HAL_UART_ErrorCallback+0x22>
	else if (huart == &huart6)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <HAL_UART_ErrorCallback+0x10c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d170      	bne.n	8002aa4 <HAL_UART_ErrorCallback+0x100>
		b = BUF_WIFI;
 80029c2:	2301      	movs	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
	else
		return;

	// Stop UART reception
	HAL_UART_Abort(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f004 fc4a 	bl	8007260 <HAL_UART_Abort>
	*            @arg UART_FLAG_NE:   Noise Error flag
	*            @arg UART_FLAG_FE:   Framing Error flag
	*            @arg UART_FLAG_PE:   Parity Error flag
	*/
	// Clear error flags
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d104      	bne.n	80029e4 <HAL_UART_ErrorCallback+0x40>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f06f 0208 	mvn.w	r2, #8
 80029e2:	601a      	str	r2, [r3, #0]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d104      	bne.n	80029fc <HAL_UART_ErrorCallback+0x58>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f06f 0204 	mvn.w	r2, #4
 80029fa:	601a      	str	r2, [r3, #0]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d104      	bne.n	8002a14 <HAL_UART_ErrorCallback+0x70>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 0202 	mvn.w	r2, #2
 8002a12:	601a      	str	r2, [r3, #0]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d104      	bne.n	8002a2c <HAL_UART_ErrorCallback+0x88>
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_PE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f06f 0201 	mvn.w	r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

	// Reset ring buffer
	buffer[b].head = buffer[b].tail = buffer[b].buffer;
 8002a2c:	4921      	ldr	r1, [pc, #132]	; (8002ab4 <HAL_UART_ErrorCallback+0x110>)
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	481d      	ldr	r0, [pc, #116]	; (8002ab4 <HAL_UART_ErrorCallback+0x110>)
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4403      	add	r3, r0
 8002a4c:	3310      	adds	r3, #16
 8002a4e:	6019      	str	r1, [r3, #0]
 8002a50:	4918      	ldr	r1, [pc, #96]	; (8002ab4 <HAL_UART_ErrorCallback+0x110>)
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3310      	adds	r3, #16
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	4814      	ldr	r0, [pc, #80]	; (8002ab4 <HAL_UART_ErrorCallback+0x110>)
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4403      	add	r3, r0
 8002a70:	330c      	adds	r3, #12
 8002a72:	6019      	str	r1, [r3, #0]
	// Restart UART reception
	HAL_UART_Receive_IT(huart, (uint8_t*)buffer[b].buffer, buffer[b].size);
 8002a74:	490f      	ldr	r1, [pc, #60]	; (8002ab4 <HAL_UART_ErrorCallback+0x110>)
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	3308      	adds	r3, #8
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	480b      	ldr	r0, [pc, #44]	; (8002ab4 <HAL_UART_ErrorCallback+0x110>)
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4403      	add	r3, r0
 8002a94:	3320      	adds	r3, #32
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f004 fb7f 	bl	80071a0 <HAL_UART_Receive_IT>
 8002aa2:	e000      	b.n	8002aa6 <HAL_UART_ErrorCallback+0x102>
		return;
 8002aa4:	bf00      	nop
}
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000310 	.word	0x20000310
 8002ab0:	20000354 	.word	0x20000354
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <streams_init>:

/*********************************************************************/
/* INIT                                                              */
/*********************************************************************/
void streams_init(void) {
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
	muxUART_STDIO_TXHandle = osMutexNew(&muxUART_STDIO_TX_attributes);
 8002abe:	483a      	ldr	r0, [pc, #232]	; (8002ba8 <streams_init+0xf0>)
 8002ac0:	f005 ff6c 	bl	800899c <osMutexNew>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4a39      	ldr	r2, [pc, #228]	; (8002bac <streams_init+0xf4>)
 8002ac8:	6013      	str	r3, [r2, #0]
	muxUART_STDIO_RXHandle = osMutexNew(&muxUART_STDIO_RX_attributes);
 8002aca:	4839      	ldr	r0, [pc, #228]	; (8002bb0 <streams_init+0xf8>)
 8002acc:	f005 ff66 	bl	800899c <osMutexNew>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <streams_init+0xfc>)
 8002ad4:	6013      	str	r3, [r2, #0]
	muxUART_WIFI_TXHandle = osMutexNew(&muxUART_WIFI_TX_attributes);
 8002ad6:	4838      	ldr	r0, [pc, #224]	; (8002bb8 <streams_init+0x100>)
 8002ad8:	f005 ff60 	bl	800899c <osMutexNew>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a37      	ldr	r2, [pc, #220]	; (8002bbc <streams_init+0x104>)
 8002ae0:	6013      	str	r3, [r2, #0]
	muxUART_WIFI_RXHandle = osMutexNew(&muxUART_WIFI_RX_attributes);
 8002ae2:	4837      	ldr	r0, [pc, #220]	; (8002bc0 <streams_init+0x108>)
 8002ae4:	f005 ff5a 	bl	800899c <osMutexNew>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a36      	ldr	r2, [pc, #216]	; (8002bc4 <streams_init+0x10c>)
 8002aec:	6013      	str	r3, [r2, #0]

	semUART_WIFIHandle = osSemaphoreNew(1, 0, &semUART_WIFI_attributes);
 8002aee:	4a36      	ldr	r2, [pc, #216]	; (8002bc8 <streams_init+0x110>)
 8002af0:	2100      	movs	r1, #0
 8002af2:	2001      	movs	r0, #1
 8002af4:	f006 f860 	bl	8008bb8 <osSemaphoreNew>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <streams_init+0x114>)
 8002afc:	6013      	str	r3, [r2, #0]
	semUART_STDIOHandle = osSemaphoreNew(1, 0, &semUART_STDIO_attributes);
 8002afe:	4a34      	ldr	r2, [pc, #208]	; (8002bd0 <streams_init+0x118>)
 8002b00:	2100      	movs	r1, #0
 8002b02:	2001      	movs	r0, #1
 8002b04:	f006 f858 	bl	8008bb8 <osSemaphoreNew>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <streams_init+0x11c>)
 8002b0c:	6013      	str	r3, [r2, #0]

	buffer[BUF_STDIO].sem = semUART_STDIOHandle;
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <streams_init+0x11c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a31      	ldr	r2, [pc, #196]	; (8002bd8 <streams_init+0x120>)
 8002b14:	61d3      	str	r3, [r2, #28]
	buffer[BUF_STDIO].mutex_rx = muxUART_STDIO_RXHandle;
 8002b16:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <streams_init+0xfc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <streams_init+0x120>)
 8002b1c:	6193      	str	r3, [r2, #24]
	buffer[BUF_STDIO].mutex_tx = muxUART_STDIO_TXHandle;
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <streams_init+0xf4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a2d      	ldr	r2, [pc, #180]	; (8002bd8 <streams_init+0x120>)
 8002b24:	6153      	str	r3, [r2, #20]
	buffer[BUF_WIFI].sem = semUART_WIFIHandle;
 8002b26:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <streams_init+0x114>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2b      	ldr	r2, [pc, #172]	; (8002bd8 <streams_init+0x120>)
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
	buffer[BUF_WIFI].mutex_rx = muxUART_WIFI_RXHandle;
 8002b2e:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <streams_init+0x10c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a29      	ldr	r2, [pc, #164]	; (8002bd8 <streams_init+0x120>)
 8002b34:	63d3      	str	r3, [r2, #60]	; 0x3c
	buffer[BUF_WIFI].mutex_tx = muxUART_WIFI_TXHandle;
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <streams_init+0x104>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <streams_init+0x120>)
 8002b3c:	6393      	str	r3, [r2, #56]	; 0x38

	for (uint32_t b = 0; b < BUF_MAX; b++) {
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	e028      	b.n	8002b96 <streams_init+0xde>
		if (HAL_UART_Receive_DMA(buffer[b].huart,
 8002b44:	4924      	ldr	r1, [pc, #144]	; (8002bd8 <streams_init+0x120>)
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	6818      	ldr	r0, [r3, #0]
								 (uint8_t*)buffer[b].buffer,
 8002b54:	4920      	ldr	r1, [pc, #128]	; (8002bd8 <streams_init+0x120>)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3308      	adds	r3, #8
 8002b64:	6819      	ldr	r1, [r3, #0]
								 buffer[b].size) != HAL_OK) {
 8002b66:	4c1c      	ldr	r4, [pc, #112]	; (8002bd8 <streams_init+0x120>)
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4423      	add	r3, r4
 8002b74:	3320      	adds	r3, #32
 8002b76:	681b      	ldr	r3, [r3, #0]
		if (HAL_UART_Receive_DMA(buffer[b].huart,
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f004 fb40 	bl	8007200 <HAL_UART_Receive_DMA>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <streams_init+0xd8>
			printf("Error start UART RX %ld\n", b);
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4814      	ldr	r0, [pc, #80]	; (8002bdc <streams_init+0x124>)
 8002b8a:	f00a fc51 	bl	800d430 <iprintf>
			while (1) {}
 8002b8e:	e7fe      	b.n	8002b8e <streams_init+0xd6>
	for (uint32_t b = 0; b < BUF_MAX; b++) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d9d3      	bls.n	8002b44 <streams_init+0x8c>
		}
	}
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	0800f624 	.word	0x0800f624
 8002bac:	200014e4 	.word	0x200014e4
 8002bb0:	0800f634 	.word	0x0800f634
 8002bb4:	200014e8 	.word	0x200014e8
 8002bb8:	0800f644 	.word	0x0800f644
 8002bbc:	200014ec 	.word	0x200014ec
 8002bc0:	0800f654 	.word	0x0800f654
 8002bc4:	200014f0 	.word	0x200014f0
 8002bc8:	0800f664 	.word	0x0800f664
 8002bcc:	200014f4 	.word	0x200014f4
 8002bd0:	0800f674 	.word	0x0800f674
 8002bd4:	200014f8 	.word	0x200014f8
 8002bd8:	20000008 	.word	0x20000008
 8002bdc:	0800edd8 	.word	0x0800edd8

08002be0 <_read>:
void _exit (int status) {
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read(int file, char *ptr, int len) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e00b      	b.n	8002c0a <_read+0x2a>
		*ptr++ = __io_getchar(file);
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff fdaa 	bl	800274c <__io_getchar>
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	60ba      	str	r2, [r7, #8]
 8002c00:	b2ca      	uxtb	r2, r1
 8002c02:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dbef      	blt.n	8002bf2 <_read+0x12>
	}
	return len;
 8002c12:	687b      	ldr	r3, [r7, #4]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_write>:

int _write(int file, char *ptr, int len) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e00a      	b.n	8002c44 <_write+0x28>
		__io_putchar(file, *ptr++);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	60ba      	str	r2, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	4619      	mov	r1, r3
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff fe3f 	bl	80028bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	3301      	adds	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	dbf0      	blt.n	8002c2e <_write+0x12>
	}
	return len;
 8002c4c:	687b      	ldr	r3, [r7, #4]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_close>:

int _close(int file) {
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
	if (file == FILE_WIFI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d101      	bne.n	8002c68 <_close+0x12>
		return 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e001      	b.n	8002c6c <_close+0x16>
	return -1;
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_fstat>:


int _fstat(int file, struct stat *st) {
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c88:	605a      	str	r2, [r3, #4]
	return 0;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_isatty>:

int _isatty(int file)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	return 1;
 8002ca0:	2301      	movs	r3, #1
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
	return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_open>:

int _open(char *path, int flags, ...) {
 8002cc8:	b40e      	push	{r1, r2, r3}
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
	if (strncmp(path, "wifi", 4) == 0)
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4908      	ldr	r1, [pc, #32]	; (8002cf8 <_open+0x30>)
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f00a fe9d 	bl	800da16 <strncmp>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <_open+0x1e>
		return FILE_WIFI;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e001      	b.n	8002cea <_open+0x22>
	return -1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cf4:	b003      	add	sp, #12
 8002cf6:	4770      	bx	lr
 8002cf8:	0800edf4 	.word	0x0800edf4

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f009 fbce 	bl	800c4cc <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <_sbrk+0x64>)
 8002d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20010000 	.word	0x20010000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	200014fc 	.word	0x200014fc
 8002d64:	20006778 	.word	0x20006778

08002d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <SystemInit+0x20>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <SystemInit+0x20>)
 8002d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <cmp_resp>:
	[AT_RESP_WIFI_DISCONNECT] = "WIFI DISCONNECT",
	[AT_RESP_UNLINK] = "UNLINK",
	[AT_RESP_SEND_OK] = "SEND OK"
};

static int cmp_resp(char *text, int num) {
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
	return strncmp(text, at_response[num], strlen(at_response[num]));
 8002d96:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <cmp_resp+0x38>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <cmp_resp+0x38>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fa6a 	bl	8000280 <strlen>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	4621      	mov	r1, r4
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f00a fe2f 	bl	800da16 <strncmp>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000054 	.word	0x20000054

08002dc8 <StartTaskWiFiListen>:
    <h1>WiFi embedded server</h1>\
    <p>Pressure: %ld.%02ld hPa</p>\
</body>\
</html>";

void StartTaskWiFiListen(void *argument) {
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	while (1) {
		osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 8002dd0:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f005 fe65 	bl	8008aa8 <osMutexAcquire>
		volatile uint8_t *head;
		head = &buffer[BUF_WIFI].buffer[UART_RX_BUF_SIZE - buffer[BUF_WIFI].hdma->Instance->NDTR];
 8002dde:	4b40      	ldr	r3, [pc, #256]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002dee:	4413      	add	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
		int link = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
		if (buffer[BUF_WIFI].tail != head) {
 8002df6:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d065      	beq.n	8002ecc <StartTaskWiFiListen+0x104>
			do {
				head = &buffer[BUF_WIFI].buffer[UART_RX_BUF_SIZE - buffer[BUF_WIFI].hdma->Instance->NDTR];
 8002e00:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e10:	4413      	add	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
				memset(listener_buf, 0, LISTENER_BUF_SIZE);
 8002e14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4832      	ldr	r0, [pc, #200]	; (8002ee4 <StartTaskWiFiListen+0x11c>)
 8002e1c:	f009 ff20 	bl	800cc60 <memset>
				uint32_t bytes = (uint32_t)buffer[BUF_WIFI].tail + buffer[BUF_WIFI].size - (uint32_t)head;
 8002e20:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b2e      	ldr	r3, [pc, #184]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	441a      	add	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	613b      	str	r3, [r7, #16]
				fgets((char*)listener_buf, bytes, fp);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4a2c      	ldr	r2, [pc, #176]	; (8002ee8 <StartTaskWiFiListen+0x120>)
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	482a      	ldr	r0, [pc, #168]	; (8002ee4 <StartTaskWiFiListen+0x11c>)
 8002e3c:	f009 fbc6 	bl	800c5cc <fgets>
				if (strstr((char*)listener_buf, ",CONNECT")) {
 8002e40:	492a      	ldr	r1, [pc, #168]	; (8002eec <StartTaskWiFiListen+0x124>)
 8002e42:	4828      	ldr	r0, [pc, #160]	; (8002ee4 <StartTaskWiFiListen+0x11c>)
 8002e44:	f00a fe07 	bl	800da56 <strstr>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <StartTaskWiFiListen+0x94>
					sscanf((char*)listener_buf, "%d,CONNECT", &link);
 8002e4e:	f107 030c 	add.w	r3, r7, #12
 8002e52:	461a      	mov	r2, r3
 8002e54:	4926      	ldr	r1, [pc, #152]	; (8002ef0 <StartTaskWiFiListen+0x128>)
 8002e56:	4823      	ldr	r0, [pc, #140]	; (8002ee4 <StartTaskWiFiListen+0x11c>)
 8002e58:	f00a fd6c 	bl	800d934 <siscanf>
				}
				if (strncmp((char*)listener_buf, "+IPD,", 5) == 0) {
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	4925      	ldr	r1, [pc, #148]	; (8002ef4 <StartTaskWiFiListen+0x12c>)
 8002e60:	4820      	ldr	r0, [pc, #128]	; (8002ee4 <StartTaskWiFiListen+0x11c>)
 8002e62:	f00a fdd8 	bl	800da16 <strncmp>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d12a      	bne.n	8002ec2 <StartTaskWiFiListen+0xfa>
					osDelay(pdMS_TO_TICKS(100));
 8002e6c:	2032      	movs	r0, #50	; 0x32
 8002e6e:	f005 fd7a 	bl	8008966 <osDelay>
					// HOORAY!
					osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	4618      	mov	r0, r3
 8002e78:	f005 fe61 	bl	8008b3e <osMutexRelease>
					if (wifi_printf(link, html, pressure/100, pressure%100) == WIFI_OK) {
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <StartTaskWiFiListen+0x130>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1e      	ldr	r2, [pc, #120]	; (8002efc <StartTaskWiFiListen+0x134>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	0959      	lsrs	r1, r3, #5
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <StartTaskWiFiListen+0x130>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <StartTaskWiFiListen+0x134>)
 8002e90:	fba3 4302 	umull	r4, r3, r3, r2
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	2464      	movs	r4, #100	; 0x64
 8002e98:	fb04 f303 	mul.w	r3, r4, r3
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	4917      	ldr	r1, [pc, #92]	; (8002f00 <StartTaskWiFiListen+0x138>)
 8002ea2:	f000 fc01 	bl	80036a8 <wifi_printf>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <StartTaskWiFiListen+0xec>
						wifi_close(link);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fc26 	bl	8003700 <wifi_close>
					}
					osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f005 fdf3 	bl	8008aa8 <osMutexAcquire>
				}

			} while (buffer[BUF_WIFI].tail != head);
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d199      	bne.n	8002e00 <StartTaskWiFiListen+0x38>
		}
		osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <StartTaskWiFiListen+0x118>)
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f005 fe34 	bl	8008b3e <osMutexRelease>
		osDelay(pdMS_TO_TICKS(10));
 8002ed6:	2005      	movs	r0, #5
 8002ed8:	f005 fd45 	bl	8008966 <osDelay>
	while (1) {
 8002edc:	e778      	b.n	8002dd0 <StartTaskWiFiListen+0x8>
 8002ede:	bf00      	nop
 8002ee0:	20000008 	.word	0x20000008
 8002ee4:	20001760 	.word	0x20001760
 8002ee8:	20001758 	.word	0x20001758
 8002eec:	0800ee4c 	.word	0x0800ee4c
 8002ef0:	0800ee58 	.word	0x0800ee58
 8002ef4:	0800ee64 	.word	0x0800ee64
 8002ef8:	2000047c 	.word	0x2000047c
 8002efc:	51eb851f 	.word	0x51eb851f
 8002f00:	20000074 	.word	0x20000074

08002f04 <wifi_init>:
	}
}

/******************************************************************/
int wifi_init(void) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
	int ret = WIFI_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]

	fp = fopen("wifi", "wb+");
 8002f0e:	4975      	ldr	r1, [pc, #468]	; (80030e4 <wifi_init+0x1e0>)
 8002f10:	4875      	ldr	r0, [pc, #468]	; (80030e8 <wifi_init+0x1e4>)
 8002f12:	f009 fc8f 	bl	800c834 <fopen>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4a74      	ldr	r2, [pc, #464]	; (80030ec <wifi_init+0x1e8>)
 8002f1a:	6013      	str	r3, [r2, #0]
	if (!fp)
 8002f1c:	4b73      	ldr	r3, [pc, #460]	; (80030ec <wifi_init+0x1e8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <wifi_init+0x24>
		return WIFI_ERR_IO;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0d9      	b.n	80030dc <wifi_init+0x1d8>

	if (setvbuf(fp, NULL, _IONBF, 0) != 0) {
 8002f28:	4b70      	ldr	r3, [pc, #448]	; (80030ec <wifi_init+0x1e8>)
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2202      	movs	r2, #2
 8002f30:	2100      	movs	r1, #0
 8002f32:	f00a fc19 	bl	800d768 <setvbuf>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d000      	beq.n	8002f3e <wifi_init+0x3a>
		while (1) {}
 8002f3c:	e7fe      	b.n	8002f3c <wifi_init+0x38>
	}

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 8002f3e:	4b6c      	ldr	r3, [pc, #432]	; (80030f0 <wifi_init+0x1ec>)
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	f04f 31ff 	mov.w	r1, #4294967295
 8002f46:	4618      	mov	r0, r3
 8002f48:	f005 fdae 	bl	8008aa8 <osMutexAcquire>

	fprintf(fp, "ATE0\r\n");
 8002f4c:	4b67      	ldr	r3, [pc, #412]	; (80030ec <wifi_init+0x1e8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2206      	movs	r2, #6
 8002f52:	2101      	movs	r1, #1
 8002f54:	4867      	ldr	r0, [pc, #412]	; (80030f4 <wifi_init+0x1f0>)
 8002f56:	f009 fdd9 	bl	800cb0c <fwrite>

	TickType_t tmt_time = xTaskGetTickCount() + pdMS_TO_TICKS(20000);
 8002f5a:	f007 fc01 	bl	800a760 <xTaskGetTickCount>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002f64:	3310      	adds	r3, #16
 8002f66:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8002f68:	f007 fbfa 	bl	800a760 <xTaskGetTickCount>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d802      	bhi.n	8002f7a <wifi_init+0x76>
			ret = WIFI_ERR_TMT;
 8002f74:	2302      	movs	r3, #2
 8002f76:	60fb      	str	r3, [r7, #12]
			goto quit;
 8002f78:	e0aa      	b.n	80030d0 <wifi_init+0x1cc>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002f7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f7e:	2100      	movs	r1, #0
 8002f80:	485d      	ldr	r0, [pc, #372]	; (80030f8 <wifi_init+0x1f4>)
 8002f82:	f009 fe6d 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8002f86:	4b59      	ldr	r3, [pc, #356]	; (80030ec <wifi_init+0x1e8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002f90:	4859      	ldr	r0, [pc, #356]	; (80030f8 <wifi_init+0x1f4>)
 8002f92:	f009 fb1b 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8002f96:	2100      	movs	r1, #0
 8002f98:	4857      	ldr	r0, [pc, #348]	; (80030f8 <wifi_init+0x1f4>)
 8002f9a:	f7ff fef7 	bl	8002d8c <cmp_resp>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <wifi_init+0xb4>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4854      	ldr	r0, [pc, #336]	; (80030f8 <wifi_init+0x1f4>)
 8002fa8:	f7ff fef0 	bl	8002d8c <cmp_resp>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1da      	bne.n	8002f68 <wifi_init+0x64>
			ret = WIFI_ERR_GENEGAL;
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	60fb      	str	r3, [r7, #12]
			goto quit;
 8002fb6:	e08b      	b.n	80030d0 <wifi_init+0x1cc>
			break;
 8002fb8:	bf00      	nop
		}
	}

	fprintf(fp, "AT+RST\r\n");
 8002fba:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <wifi_init+0x1e8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	484e      	ldr	r0, [pc, #312]	; (80030fc <wifi_init+0x1f8>)
 8002fc4:	f009 fda2 	bl	800cb0c <fwrite>
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8002fc8:	f007 fbca 	bl	800a760 <xTaskGetTickCount>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d802      	bhi.n	8002fda <wifi_init+0xd6>
			ret = WIFI_ERR_TMT;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	60fb      	str	r3, [r7, #12]
			goto quit;
 8002fd8:	e07a      	b.n	80030d0 <wifi_init+0x1cc>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002fda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4845      	ldr	r0, [pc, #276]	; (80030f8 <wifi_init+0x1f4>)
 8002fe2:	f009 fe3d 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <wifi_init+0x1e8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002ff0:	4841      	ldr	r0, [pc, #260]	; (80030f8 <wifi_init+0x1f4>)
 8002ff2:	f009 faeb 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	483f      	ldr	r0, [pc, #252]	; (80030f8 <wifi_init+0x1f4>)
 8002ffa:	f7ff fec7 	bl	8002d8c <cmp_resp>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <wifi_init+0x114>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003004:	2101      	movs	r1, #1
 8003006:	483c      	ldr	r0, [pc, #240]	; (80030f8 <wifi_init+0x1f4>)
 8003008:	f7ff fec0 	bl	8002d8c <cmp_resp>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1da      	bne.n	8002fc8 <wifi_init+0xc4>
			ret = WIFI_ERR_GENEGAL;
 8003012:	2305      	movs	r3, #5
 8003014:	60fb      	str	r3, [r7, #12]
			goto quit;
 8003016:	e05b      	b.n	80030d0 <wifi_init+0x1cc>
			break;
 8003018:	bf00      	nop
		}
	}

	// Discard all junk
	HAL_UART_Abort(buffer[BUF_WIFI].huart);
 800301a:	4b35      	ldr	r3, [pc, #212]	; (80030f0 <wifi_init+0x1ec>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	4618      	mov	r0, r3
 8003020:	f004 f91e 	bl	8007260 <HAL_UART_Abort>
	buffer[BUF_WIFI].head = buffer[BUF_WIFI].tail = buffer[BUF_WIFI].buffer;
 8003024:	4b32      	ldr	r3, [pc, #200]	; (80030f0 <wifi_init+0x1ec>)
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	4a31      	ldr	r2, [pc, #196]	; (80030f0 <wifi_init+0x1ec>)
 800302a:	6353      	str	r3, [r2, #52]	; 0x34
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <wifi_init+0x1ec>)
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <wifi_init+0x1ec>)
 8003032:	6313      	str	r3, [r2, #48]	; 0x30

	osDelay(pdMS_TO_TICKS(8000));
 8003034:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003038:	f005 fc95 	bl	8008966 <osDelay>
	HAL_StatusTypeDef hal_st = HAL_UART_Receive_DMA(buffer[BUF_WIFI].huart,
 800303c:	4b2c      	ldr	r3, [pc, #176]	; (80030f0 <wifi_init+0x1ec>)
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
													(uint8_t*)buffer[BUF_WIFI].buffer,
 8003040:	4a2b      	ldr	r2, [pc, #172]	; (80030f0 <wifi_init+0x1ec>)
 8003042:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
													buffer[BUF_WIFI].size);
 8003044:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <wifi_init+0x1ec>)
 8003046:	6c52      	ldr	r2, [r2, #68]	; 0x44
	HAL_StatusTypeDef hal_st = HAL_UART_Receive_DMA(buffer[BUF_WIFI].huart,
 8003048:	b292      	uxth	r2, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f004 f8d8 	bl	8007200 <HAL_UART_Receive_DMA>
 8003050:	4603      	mov	r3, r0
 8003052:	71fb      	strb	r3, [r7, #7]
	if (hal_st != HAL_OK) {
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <wifi_init+0x15c>
		ret = WIFI_ERR_IO;
 800305a:	2301      	movs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
		goto quit;
 800305e:	e037      	b.n	80030d0 <wifi_init+0x1cc>
	}

	fprintf(fp, "ATE0\r\n");
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <wifi_init+0x1e8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2206      	movs	r2, #6
 8003066:	2101      	movs	r1, #1
 8003068:	4822      	ldr	r0, [pc, #136]	; (80030f4 <wifi_init+0x1f0>)
 800306a:	f009 fd4f 	bl	800cb0c <fwrite>
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 800306e:	f007 fb77 	bl	800a760 <xTaskGetTickCount>
 8003072:	4602      	mov	r2, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4293      	cmp	r3, r2
 8003078:	d802      	bhi.n	8003080 <wifi_init+0x17c>
			ret = WIFI_ERR_TMT;
 800307a:	2302      	movs	r3, #2
 800307c:	60fb      	str	r3, [r7, #12]
			goto quit;
 800307e:	e027      	b.n	80030d0 <wifi_init+0x1cc>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003080:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003084:	2100      	movs	r1, #0
 8003086:	481c      	ldr	r0, [pc, #112]	; (80030f8 <wifi_init+0x1f4>)
 8003088:	f009 fdea 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 800308c:	4b17      	ldr	r3, [pc, #92]	; (80030ec <wifi_init+0x1e8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003096:	4818      	ldr	r0, [pc, #96]	; (80030f8 <wifi_init+0x1f4>)
 8003098:	f009 fa98 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 800309c:	2100      	movs	r1, #0
 800309e:	4816      	ldr	r0, [pc, #88]	; (80030f8 <wifi_init+0x1f4>)
 80030a0:	f7ff fe74 	bl	8002d8c <cmp_resp>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <wifi_init+0x1ba>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 80030aa:	2101      	movs	r1, #1
 80030ac:	4812      	ldr	r0, [pc, #72]	; (80030f8 <wifi_init+0x1f4>)
 80030ae:	f7ff fe6d 	bl	8002d8c <cmp_resp>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1da      	bne.n	800306e <wifi_init+0x16a>
			ret = WIFI_ERR_GENEGAL;
 80030b8:	2305      	movs	r3, #5
 80030ba:	60fb      	str	r3, [r7, #12]
			goto quit;
 80030bc:	e008      	b.n	80030d0 <wifi_init+0x1cc>
			break;
 80030be:	bf00      	nop
		}
	}
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <wifi_init+0x1ec>)
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	4618      	mov	r0, r3
 80030c6:	f005 fd3a 	bl	8008b3e <osMutexRelease>

	wifi_set_mode(WIFI_MODE_STA);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f000 f818 	bl	8003100 <wifi_set_mode>

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <wifi_init+0x1ec>)
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	4618      	mov	r0, r3
 80030d6:	f005 fd32 	bl	8008b3e <osMutexRelease>
	return ret;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	0800ee6c 	.word	0x0800ee6c
 80030e8:	0800ee70 	.word	0x0800ee70
 80030ec:	20001758 	.word	0x20001758
 80030f0:	20000008 	.word	0x20000008
 80030f4:	0800ee78 	.word	0x0800ee78
 80030f8:	20001500 	.word	0x20001500
 80030fc:	0800ee80 	.word	0x0800ee80

08003100 <wifi_set_mode>:

int wifi_set_mode(wifi_mode_t mode) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
	wifi_status_t ret = WIFI_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <wifi_set_mode+0x9c>)
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	f04f 31ff 	mov.w	r1, #4294967295
 8003116:	4618      	mov	r0, r3
 8003118:	f005 fcc6 	bl	8008aa8 <osMutexAcquire>

	fprintf(fp, "AT+CWMODE=%d\r\n", mode);
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <wifi_set_mode+0xa0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	79fa      	ldrb	r2, [r7, #7]
 8003122:	4920      	ldr	r1, [pc, #128]	; (80031a4 <wifi_set_mode+0xa4>)
 8003124:	4618      	mov	r0, r3
 8003126:	f009 fb8d 	bl	800c844 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 800312a:	f007 fb19 	bl	800a760 <xTaskGetTickCount>
 800312e:	4603      	mov	r3, r0
 8003130:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003134:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8003136:	f007 fb13 	bl	800a760 <xTaskGetTickCount>
 800313a:	4602      	mov	r2, r0
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4293      	cmp	r3, r2
 8003140:	d802      	bhi.n	8003148 <wifi_set_mode+0x48>
			ret = WIFI_ERR_TMT;
 8003142:	2302      	movs	r3, #2
 8003144:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003146:	e01f      	b.n	8003188 <wifi_set_mode+0x88>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003148:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800314c:	2100      	movs	r1, #0
 800314e:	4816      	ldr	r0, [pc, #88]	; (80031a8 <wifi_set_mode+0xa8>)
 8003150:	f009 fd86 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <wifi_set_mode+0xa0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800315e:	4812      	ldr	r0, [pc, #72]	; (80031a8 <wifi_set_mode+0xa8>)
 8003160:	f009 fa34 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8003164:	2100      	movs	r1, #0
 8003166:	4810      	ldr	r0, [pc, #64]	; (80031a8 <wifi_set_mode+0xa8>)
 8003168:	f7ff fe10 	bl	8002d8c <cmp_resp>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <wifi_set_mode+0x86>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003172:	2101      	movs	r1, #1
 8003174:	480c      	ldr	r0, [pc, #48]	; (80031a8 <wifi_set_mode+0xa8>)
 8003176:	f7ff fe09 	bl	8002d8c <cmp_resp>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1da      	bne.n	8003136 <wifi_set_mode+0x36>
			ret = WIFI_ERR_GENEGAL;
 8003180:	2305      	movs	r3, #5
 8003182:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003184:	e000      	b.n	8003188 <wifi_set_mode+0x88>
			break;
 8003186:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <wifi_set_mode+0x9c>)
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	4618      	mov	r0, r3
 800318e:	f005 fcd6 	bl	8008b3e <osMutexRelease>
	return ret;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000008 	.word	0x20000008
 80031a0:	20001758 	.word	0x20001758
 80031a4:	0800ee8c 	.word	0x0800ee8c
 80031a8:	20001500 	.word	0x20001500

080031ac <wifi_connect_to_ap>:

int wifi_connect_to_ap(char *ap_name, char *pass, uint32_t tmt) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
	uint32_t flags = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
	wifi_status_t ret = WIFI_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	76fb      	strb	r3, [r7, #27]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 80031c0:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <wifi_connect_to_ap+0x114>)
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295
 80031c8:	4618      	mov	r0, r3
 80031ca:	f005 fc6d 	bl	8008aa8 <osMutexAcquire>

	fprintf(fp, "AT+CWJAP=\"%s\",\"%s\"\r\n", ap_name, pass);
 80031ce:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <wifi_connect_to_ap+0x118>)
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	493c      	ldr	r1, [pc, #240]	; (80032c8 <wifi_connect_to_ap+0x11c>)
 80031d8:	f009 fb34 	bl	800c844 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + tmt;
 80031dc:	f007 fac0 	bl	800a760 <xTaskGetTickCount>
 80031e0:	4602      	mov	r2, r0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 80031e8:	f007 faba 	bl	800a760 <xTaskGetTickCount>
 80031ec:	4602      	mov	r2, r0
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d802      	bhi.n	80031fa <wifi_connect_to_ap+0x4e>
			ret = WIFI_ERR_TMT;
 80031f4:	2302      	movs	r3, #2
 80031f6:	76fb      	strb	r3, [r7, #27]
			goto quit;
 80031f8:	e058      	b.n	80032ac <wifi_connect_to_ap+0x100>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 80031fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031fe:	2100      	movs	r1, #0
 8003200:	4832      	ldr	r0, [pc, #200]	; (80032cc <wifi_connect_to_ap+0x120>)
 8003202:	f009 fd2d 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003206:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <wifi_connect_to_ap+0x118>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003210:	482e      	ldr	r0, [pc, #184]	; (80032cc <wifi_connect_to_ap+0x120>)
 8003212:	f009 f9db 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0) {
 8003216:	2100      	movs	r1, #0
 8003218:	482c      	ldr	r0, [pc, #176]	; (80032cc <wifi_connect_to_ap+0x120>)
 800321a:	f7ff fdb7 	bl	8002d8c <cmp_resp>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d117      	bne.n	8003254 <wifi_connect_to_ap+0xa8>
			if (flags & 0x3) {
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d13d      	bne.n	80032aa <wifi_connect_to_ap+0xfe>
				goto quit;
			}
			else {
				if (!(flags & 0x01)) {
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <wifi_connect_to_ap+0x92>
					ret = WIFI_ERR_NO_AP;
 8003238:	2304      	movs	r3, #4
 800323a:	76fb      	strb	r3, [r7, #27]
					goto quit;
 800323c:	e036      	b.n	80032ac <wifi_connect_to_ap+0x100>
				}
				if (!(flags & 0x02)) {
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <wifi_connect_to_ap+0xa2>
					ret = WIFI_ERR_NO_IP;
 8003248:	2303      	movs	r3, #3
 800324a:	76fb      	strb	r3, [r7, #27]
					goto quit;
 800324c:	e02e      	b.n	80032ac <wifi_connect_to_ap+0x100>
				}
				ret = WIFI_ERR_GENEGAL;
 800324e:	2305      	movs	r3, #5
 8003250:	76fb      	strb	r3, [r7, #27]
				goto quit;
 8003252:	e02b      	b.n	80032ac <wifi_connect_to_ap+0x100>
			}
		}
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003254:	2101      	movs	r1, #1
 8003256:	481d      	ldr	r0, [pc, #116]	; (80032cc <wifi_connect_to_ap+0x120>)
 8003258:	f7ff fd98 	bl	8002d8c <cmp_resp>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <wifi_connect_to_ap+0xbc>
			ret = WIFI_ERR_GENEGAL;
 8003262:	2305      	movs	r3, #5
 8003264:	76fb      	strb	r3, [r7, #27]
			goto quit;
 8003266:	e021      	b.n	80032ac <wifi_connect_to_ap+0x100>
		}
		if (cmp_resp(rx_buffer, AT_RESP_FAIL) == 0) {
 8003268:	2102      	movs	r1, #2
 800326a:	4818      	ldr	r0, [pc, #96]	; (80032cc <wifi_connect_to_ap+0x120>)
 800326c:	f7ff fd8e 	bl	8002d8c <cmp_resp>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <wifi_connect_to_ap+0xd0>
			ret = WIFI_ERR_GENEGAL;
 8003276:	2305      	movs	r3, #5
 8003278:	76fb      	strb	r3, [r7, #27]
			goto quit;
 800327a:	e017      	b.n	80032ac <wifi_connect_to_ap+0x100>
		}
		if (cmp_resp(rx_buffer, AT_RESP_WIFI_CONNECTED) == 0)
 800327c:	2103      	movs	r1, #3
 800327e:	4813      	ldr	r0, [pc, #76]	; (80032cc <wifi_connect_to_ap+0x120>)
 8003280:	f7ff fd84 	bl	8002d8c <cmp_resp>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <wifi_connect_to_ap+0xe6>
			flags |= 0x01;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	61fb      	str	r3, [r7, #28]
		if (cmp_resp(rx_buffer, AT_RESP_WIFI_GOT_IP) == 0)
 8003292:	2104      	movs	r1, #4
 8003294:	480d      	ldr	r0, [pc, #52]	; (80032cc <wifi_connect_to_ap+0x120>)
 8003296:	f7ff fd79 	bl	8002d8c <cmp_resp>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1a3      	bne.n	80031e8 <wifi_connect_to_ap+0x3c>
			flags |= 0x02;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f043 0302 	orr.w	r3, r3, #2
 80032a6:	61fb      	str	r3, [r7, #28]
		if (xTaskGetTickCount() >= tmt_time) {
 80032a8:	e79e      	b.n	80031e8 <wifi_connect_to_ap+0x3c>
				goto quit;
 80032aa:	bf00      	nop
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <wifi_connect_to_ap+0x114>)
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	4618      	mov	r0, r3
 80032b2:	f005 fc44 	bl	8008b3e <osMutexRelease>
	return ret;
 80032b6:	7efb      	ldrb	r3, [r7, #27]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000008 	.word	0x20000008
 80032c4:	20001758 	.word	0x20001758
 80032c8:	0800ee9c 	.word	0x0800ee9c
 80032cc:	20001500 	.word	0x20001500

080032d0 <wifi_get_own_ip>:

int wifi_get_own_ip(uint32_t *ip, uint32_t *mac) {
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b08b      	sub	sp, #44	; 0x2c
 80032d4:	af04      	add	r7, sp, #16
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	uint32_t flags = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]

	wifi_status_t ret = WIFI_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	74fb      	strb	r3, [r7, #19]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 80032e2:	4b46      	ldr	r3, [pc, #280]	; (80033fc <wifi_get_own_ip+0x12c>)
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	f04f 31ff 	mov.w	r1, #4294967295
 80032ea:	4618      	mov	r0, r3
 80032ec:	f005 fbdc 	bl	8008aa8 <osMutexAcquire>

	fprintf(fp, "AT+CIFSR\r\n");
 80032f0:	4b43      	ldr	r3, [pc, #268]	; (8003400 <wifi_get_own_ip+0x130>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	220a      	movs	r2, #10
 80032f6:	2101      	movs	r1, #1
 80032f8:	4842      	ldr	r0, [pc, #264]	; (8003404 <wifi_get_own_ip+0x134>)
 80032fa:	f009 fc07 	bl	800cb0c <fwrite>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 80032fe:	f007 fa2f 	bl	800a760 <xTaskGetTickCount>
 8003302:	4603      	mov	r3, r0
 8003304:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003308:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 800330a:	f007 fa29 	bl	800a760 <xTaskGetTickCount>
 800330e:	4602      	mov	r2, r0
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4293      	cmp	r3, r2
 8003314:	d802      	bhi.n	800331c <wifi_get_own_ip+0x4c>
			ret = WIFI_ERR_TMT;
 8003316:	2302      	movs	r3, #2
 8003318:	74fb      	strb	r3, [r7, #19]
			goto quit;
 800331a:	e064      	b.n	80033e6 <wifi_get_own_ip+0x116>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 800331c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003320:	2100      	movs	r1, #0
 8003322:	4839      	ldr	r0, [pc, #228]	; (8003408 <wifi_get_own_ip+0x138>)
 8003324:	f009 fc9c 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003328:	4b35      	ldr	r3, [pc, #212]	; (8003400 <wifi_get_own_ip+0x130>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003332:	4835      	ldr	r0, [pc, #212]	; (8003408 <wifi_get_own_ip+0x138>)
 8003334:	f009 f94a 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0) {
 8003338:	2100      	movs	r1, #0
 800333a:	4833      	ldr	r0, [pc, #204]	; (8003408 <wifi_get_own_ip+0x138>)
 800333c:	f7ff fd26 	bl	8002d8c <cmp_resp>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <wifi_get_own_ip+0x8c>
			if (flags & 0x03) {
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <wifi_get_own_ip+0x86>
				ret = WIFI_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	74fb      	strb	r3, [r7, #19]
				goto quit;
 8003354:	e047      	b.n	80033e6 <wifi_get_own_ip+0x116>
			} else {
				ret = WIFI_ERR_NO_IP;
 8003356:	2303      	movs	r3, #3
 8003358:	74fb      	strb	r3, [r7, #19]
				goto quit;
 800335a:	e044      	b.n	80033e6 <wifi_get_own_ip+0x116>
			}
		}
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 800335c:	2101      	movs	r1, #1
 800335e:	482a      	ldr	r0, [pc, #168]	; (8003408 <wifi_get_own_ip+0x138>)
 8003360:	f7ff fd14 	bl	8002d8c <cmp_resp>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <wifi_get_own_ip+0xa0>
			ret = WIFI_ERR_GENEGAL;
 800336a:	2305      	movs	r3, #5
 800336c:	74fb      	strb	r3, [r7, #19]
			goto quit;
 800336e:	e03a      	b.n	80033e6 <wifi_get_own_ip+0x116>
		}

		if (strncmp(rx_buffer, "+CIFSR:STAIP", sizeof("+CIFSR:STAIP")-1) == 0) {
 8003370:	220c      	movs	r2, #12
 8003372:	4926      	ldr	r1, [pc, #152]	; (800340c <wifi_get_own_ip+0x13c>)
 8003374:	4824      	ldr	r0, [pc, #144]	; (8003408 <wifi_get_own_ip+0x138>)
 8003376:	f00a fb4e 	bl	800da16 <strncmp>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d111      	bne.n	80033a4 <wifi_get_own_ip+0xd4>
			flags |= 0x01;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	617b      	str	r3, [r7, #20]
			sscanf(rx_buffer, "+CIFSR:STAIP,\"%lu.%lu.%lu.%lu\"",
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1d19      	adds	r1, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3308      	adds	r3, #8
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	320c      	adds	r2, #12
 8003394:	9201      	str	r2, [sp, #4]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	491c      	ldr	r1, [pc, #112]	; (8003410 <wifi_get_own_ip+0x140>)
 800339e:	481a      	ldr	r0, [pc, #104]	; (8003408 <wifi_get_own_ip+0x138>)
 80033a0:	f00a fac8 	bl	800d934 <siscanf>
					&ip[0], &ip[1], &ip[2], &ip[3]);
		}
		if (strncmp(rx_buffer, "+CIFSR:STAMAC", sizeof("+CIFSR:STAMAC")-1) == 0) {
 80033a4:	220d      	movs	r2, #13
 80033a6:	491b      	ldr	r1, [pc, #108]	; (8003414 <wifi_get_own_ip+0x144>)
 80033a8:	4817      	ldr	r0, [pc, #92]	; (8003408 <wifi_get_own_ip+0x138>)
 80033aa:	f00a fb34 	bl	800da16 <strncmp>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1aa      	bne.n	800330a <wifi_get_own_ip+0x3a>
			flags |= 0x02;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f043 0302 	orr.w	r3, r3, #2
 80033ba:	617b      	str	r3, [r7, #20]
			sscanf(rx_buffer, "+CIFSR:STAMAC,\"%02lX:%02lX:%02lX:%02lX:%02lX:%02lX\"",
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1d1c      	adds	r4, r3, #4
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	3308      	adds	r3, #8
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	320c      	adds	r2, #12
 80033c8:	6839      	ldr	r1, [r7, #0]
 80033ca:	3110      	adds	r1, #16
 80033cc:	6838      	ldr	r0, [r7, #0]
 80033ce:	3014      	adds	r0, #20
 80033d0:	9003      	str	r0, [sp, #12]
 80033d2:	9102      	str	r1, [sp, #8]
 80033d4:	9201      	str	r2, [sp, #4]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4623      	mov	r3, r4
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <wifi_get_own_ip+0x148>)
 80033de:	480a      	ldr	r0, [pc, #40]	; (8003408 <wifi_get_own_ip+0x138>)
 80033e0:	f00a faa8 	bl	800d934 <siscanf>
		if (xTaskGetTickCount() >= tmt_time) {
 80033e4:	e791      	b.n	800330a <wifi_get_own_ip+0x3a>
					&mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
		}
	}
quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <wifi_get_own_ip+0x12c>)
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	4618      	mov	r0, r3
 80033ec:	f005 fba7 	bl	8008b3e <osMutexRelease>
	return ret;
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd90      	pop	{r4, r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000008 	.word	0x20000008
 8003400:	20001758 	.word	0x20001758
 8003404:	0800eeb4 	.word	0x0800eeb4
 8003408:	20001500 	.word	0x20001500
 800340c:	0800eec0 	.word	0x0800eec0
 8003410:	0800eed0 	.word	0x0800eed0
 8003414:	0800eef0 	.word	0x0800eef0
 8003418:	0800ef00 	.word	0x0800ef00

0800341c <wifi_multiple_conns>:

int wifi_multiple_conns(int multiple) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	wifi_status_t ret = WIFI_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	73fb      	strb	r3, [r7, #15]

	mux = multiple;
 8003428:	4a24      	ldr	r2, [pc, #144]	; (80034bc <wifi_multiple_conns+0xa0>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6013      	str	r3, [r2, #0]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <wifi_multiple_conns+0xa4>)
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	f04f 31ff 	mov.w	r1, #4294967295
 8003436:	4618      	mov	r0, r3
 8003438:	f005 fb36 	bl	8008aa8 <osMutexAcquire>
	fprintf(fp, "AT+CIPMUX=%d\r\n", multiple);
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <wifi_multiple_conns+0xa8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4921      	ldr	r1, [pc, #132]	; (80034c8 <wifi_multiple_conns+0xac>)
 8003444:	4618      	mov	r0, r3
 8003446:	f009 f9fd 	bl	800c844 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 800344a:	f007 f989 	bl	800a760 <xTaskGetTickCount>
 800344e:	4603      	mov	r3, r0
 8003450:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003454:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8003456:	f007 f983 	bl	800a760 <xTaskGetTickCount>
 800345a:	4602      	mov	r2, r0
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4293      	cmp	r3, r2
 8003460:	d802      	bhi.n	8003468 <wifi_multiple_conns+0x4c>
			ret = WIFI_ERR_TMT;
 8003462:	2302      	movs	r3, #2
 8003464:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003466:	e01f      	b.n	80034a8 <wifi_multiple_conns+0x8c>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003468:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800346c:	2100      	movs	r1, #0
 800346e:	4817      	ldr	r0, [pc, #92]	; (80034cc <wifi_multiple_conns+0xb0>)
 8003470:	f009 fbf6 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003474:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <wifi_multiple_conns+0xa8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800347e:	4813      	ldr	r0, [pc, #76]	; (80034cc <wifi_multiple_conns+0xb0>)
 8003480:	f009 f8a4 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8003484:	2100      	movs	r1, #0
 8003486:	4811      	ldr	r0, [pc, #68]	; (80034cc <wifi_multiple_conns+0xb0>)
 8003488:	f7ff fc80 	bl	8002d8c <cmp_resp>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <wifi_multiple_conns+0x8a>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003492:	2101      	movs	r1, #1
 8003494:	480d      	ldr	r0, [pc, #52]	; (80034cc <wifi_multiple_conns+0xb0>)
 8003496:	f7ff fc79 	bl	8002d8c <cmp_resp>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1da      	bne.n	8003456 <wifi_multiple_conns+0x3a>
			ret = WIFI_ERR_GENEGAL;
 80034a0:	2305      	movs	r3, #5
 80034a2:	73fb      	strb	r3, [r7, #15]
			goto quit;
 80034a4:	e000      	b.n	80034a8 <wifi_multiple_conns+0x8c>
			break;
 80034a6:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <wifi_multiple_conns+0xa4>)
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	4618      	mov	r0, r3
 80034ae:	f005 fb46 	bl	8008b3e <osMutexRelease>
	return ret;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	2000175c 	.word	0x2000175c
 80034c0:	20000008 	.word	0x20000008
 80034c4:	20001758 	.word	0x20001758
 80034c8:	0800ef34 	.word	0x0800ef34
 80034cc:	20001500 	.word	0x20001500

080034d0 <wifi_server>:

int wifi_server(int create, int port) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	wifi_status_t ret;

	ret = wifi_multiple_conns(1);
 80034da:	2001      	movs	r0, #1
 80034dc:	f7ff ff9e 	bl	800341c <wifi_multiple_conns>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <wifi_server+0x1e>
		return ret;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	e04d      	b.n	800358a <wifi_server+0xba>
	}

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <wifi_server+0xc4>)
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	f04f 31ff 	mov.w	r1, #4294967295
 80034f6:	4618      	mov	r0, r3
 80034f8:	f005 fad6 	bl	8008aa8 <osMutexAcquire>

	if (create)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <wifi_server+0x42>
		fprintf(fp, "AT+CIPSERVER=%d,%d\r\n", create, port);
 8003502:	4b25      	ldr	r3, [pc, #148]	; (8003598 <wifi_server+0xc8>)
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4924      	ldr	r1, [pc, #144]	; (800359c <wifi_server+0xcc>)
 800350c:	f009 f99a 	bl	800c844 <fiprintf>
 8003510:	e006      	b.n	8003520 <wifi_server+0x50>
	else
		fprintf(fp, "AT+CIPSERVER=0\r\n");
 8003512:	4b21      	ldr	r3, [pc, #132]	; (8003598 <wifi_server+0xc8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2210      	movs	r2, #16
 8003518:	2101      	movs	r1, #1
 800351a:	4821      	ldr	r0, [pc, #132]	; (80035a0 <wifi_server+0xd0>)
 800351c:	f009 faf6 	bl	800cb0c <fwrite>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 8003520:	f007 f91e 	bl	800a760 <xTaskGetTickCount>
 8003524:	4603      	mov	r3, r0
 8003526:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800352a:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 800352c:	f007 f918 	bl	800a760 <xTaskGetTickCount>
 8003530:	4602      	mov	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4293      	cmp	r3, r2
 8003536:	d802      	bhi.n	800353e <wifi_server+0x6e>
			ret = WIFI_ERR_TMT;
 8003538:	2302      	movs	r3, #2
 800353a:	73fb      	strb	r3, [r7, #15]
			goto quit;
 800353c:	e01f      	b.n	800357e <wifi_server+0xae>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 800353e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003542:	2100      	movs	r1, #0
 8003544:	4817      	ldr	r0, [pc, #92]	; (80035a4 <wifi_server+0xd4>)
 8003546:	f009 fb8b 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <wifi_server+0xc8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003554:	4813      	ldr	r0, [pc, #76]	; (80035a4 <wifi_server+0xd4>)
 8003556:	f009 f839 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 800355a:	2100      	movs	r1, #0
 800355c:	4811      	ldr	r0, [pc, #68]	; (80035a4 <wifi_server+0xd4>)
 800355e:	f7ff fc15 	bl	8002d8c <cmp_resp>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <wifi_server+0xac>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003568:	2101      	movs	r1, #1
 800356a:	480e      	ldr	r0, [pc, #56]	; (80035a4 <wifi_server+0xd4>)
 800356c:	f7ff fc0e 	bl	8002d8c <cmp_resp>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1da      	bne.n	800352c <wifi_server+0x5c>
			ret = WIFI_ERR_GENEGAL;
 8003576:	2305      	movs	r3, #5
 8003578:	73fb      	strb	r3, [r7, #15]
			goto quit;
 800357a:	e000      	b.n	800357e <wifi_server+0xae>
			break;
 800357c:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <wifi_server+0xc4>)
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	4618      	mov	r0, r3
 8003584:	f005 fadb 	bl	8008b3e <osMutexRelease>
	return ret;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000008 	.word	0x20000008
 8003598:	20001758 	.word	0x20001758
 800359c:	0800ef44 	.word	0x0800ef44
 80035a0:	0800ef5c 	.word	0x0800ef5c
 80035a4:	20001500 	.word	0x20001500

080035a8 <wifi_send>:

int wifi_send(int link, char *text, uint32_t len) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
	uint32_t flags = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
	wifi_status_t ret = WIFI_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	76fb      	strb	r3, [r7, #27]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 80035bc:	4b34      	ldr	r3, [pc, #208]	; (8003690 <wifi_send+0xe8>)
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 fa6f 	bl	8008aa8 <osMutexAcquire>

	if (mux)
 80035ca:	4b32      	ldr	r3, [pc, #200]	; (8003694 <wifi_send+0xec>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <wifi_send+0x3a>
		fprintf(fp, "AT+CIPSEND=%d,%ld\r\n", link, len);
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <wifi_send+0xf0>)
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4930      	ldr	r1, [pc, #192]	; (800369c <wifi_send+0xf4>)
 80035dc:	f009 f932 	bl	800c844 <fiprintf>
 80035e0:	e006      	b.n	80035f0 <wifi_send+0x48>
	else
		fprintf(fp, "AT+CIPSEND=%ld\r\n", len);
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <wifi_send+0xf0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	492d      	ldr	r1, [pc, #180]	; (80036a0 <wifi_send+0xf8>)
 80035ea:	4618      	mov	r0, r3
 80035ec:	f009 f92a 	bl	800c844 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 80035f0:	f007 f8b6 	bl	800a760 <xTaskGetTickCount>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80035fa:	617b      	str	r3, [r7, #20]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 80035fc:	f007 f8b0 	bl	800a760 <xTaskGetTickCount>
 8003600:	4602      	mov	r2, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	4293      	cmp	r3, r2
 8003606:	d802      	bhi.n	800360e <wifi_send+0x66>
			ret = WIFI_ERR_TMT;
 8003608:	2302      	movs	r3, #2
 800360a:	76fb      	strb	r3, [r7, #27]
			goto quit;
 800360c:	e036      	b.n	800367c <wifi_send+0xd4>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 800360e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003612:	2100      	movs	r1, #0
 8003614:	4823      	ldr	r0, [pc, #140]	; (80036a4 <wifi_send+0xfc>)
 8003616:	f009 fb23 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 800361a:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <wifi_send+0xf0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003624:	481f      	ldr	r0, [pc, #124]	; (80036a4 <wifi_send+0xfc>)
 8003626:	f008 ffd1 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0) {
 800362a:	2100      	movs	r1, #0
 800362c:	481d      	ldr	r0, [pc, #116]	; (80036a4 <wifi_send+0xfc>)
 800362e:	f7ff fbad 	bl	8002d8c <cmp_resp>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <wifi_send+0xa8>
			fwrite(text, 1, len, fp);
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <wifi_send+0xf0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	2101      	movs	r1, #1
 8003640:	68b8      	ldr	r0, [r7, #8]
 8003642:	f009 fa63 	bl	800cb0c <fwrite>
			flags |= 1;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
			continue;
 800364e:	e013      	b.n	8003678 <wifi_send+0xd0>
		}
		if (flags) {
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <wifi_send+0xbc>
			if (cmp_resp(rx_buffer, AT_RESP_SEND_OK) == 0) {
 8003656:	2107      	movs	r1, #7
 8003658:	4812      	ldr	r0, [pc, #72]	; (80036a4 <wifi_send+0xfc>)
 800365a:	f7ff fb97 	bl	8002d8c <cmp_resp>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <wifi_send+0xd2>
				break;
			}
		}
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003664:	2101      	movs	r1, #1
 8003666:	480f      	ldr	r0, [pc, #60]	; (80036a4 <wifi_send+0xfc>)
 8003668:	f7ff fb90 	bl	8002d8c <cmp_resp>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1c4      	bne.n	80035fc <wifi_send+0x54>
			ret = WIFI_ERR_GENEGAL;
 8003672:	2305      	movs	r3, #5
 8003674:	76fb      	strb	r3, [r7, #27]
			goto quit;
 8003676:	e001      	b.n	800367c <wifi_send+0xd4>
		if (xTaskGetTickCount() >= tmt_time) {
 8003678:	e7c0      	b.n	80035fc <wifi_send+0x54>
				break;
 800367a:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <wifi_send+0xe8>)
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	4618      	mov	r0, r3
 8003682:	f005 fa5c 	bl	8008b3e <osMutexRelease>
	return ret;
 8003686:	7efb      	ldrb	r3, [r7, #27]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000008 	.word	0x20000008
 8003694:	2000175c 	.word	0x2000175c
 8003698:	20001758 	.word	0x20001758
 800369c:	0800ef70 	.word	0x0800ef70
 80036a0:	0800ef84 	.word	0x0800ef84
 80036a4:	20001500 	.word	0x20001500

080036a8 <wifi_printf>:

int wifi_printf(int link, char *fmt, ...) {
 80036a8:	b40e      	push	{r1, r2, r3}
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
	int len = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
	va_list args;
	memset(tx_buffer, 0, sizeof(rx_buffer));
 80036b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036ba:	2100      	movs	r1, #0
 80036bc:	480f      	ldr	r0, [pc, #60]	; (80036fc <wifi_printf+0x54>)
 80036be:	f009 facf 	bl	800cc60 <memset>
	va_start(args, fmt);
 80036c2:	f107 0320 	add.w	r3, r7, #32
 80036c6:	60bb      	str	r3, [r7, #8]
	vsprintf(tx_buffer, fmt, args);
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	69f9      	ldr	r1, [r7, #28]
 80036cc:	480b      	ldr	r0, [pc, #44]	; (80036fc <wifi_printf+0x54>)
 80036ce:	f00a f9ef 	bl	800dab0 <vsiprintf>
	va_end(args);
	len = strnlen(tx_buffer, sizeof(tx_buffer));
 80036d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80036d6:	4809      	ldr	r0, [pc, #36]	; (80036fc <wifi_printf+0x54>)
 80036d8:	f00a f9b1 	bl	800da3e <strnlen>
 80036dc:	4603      	mov	r3, r0
 80036de:	60fb      	str	r3, [r7, #12]
	return wifi_send(link, tx_buffer, len);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	461a      	mov	r2, r3
 80036e4:	4905      	ldr	r1, [pc, #20]	; (80036fc <wifi_printf+0x54>)
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ff5e 	bl	80035a8 <wifi_send>
 80036ec:	4603      	mov	r3, r0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036f8:	b003      	add	sp, #12
 80036fa:	4770      	bx	lr
 80036fc:	2000162c 	.word	0x2000162c

08003700 <wifi_close>:

int wifi_close(int link) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	wifi_status_t ret = WIFI_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]

	osMutexAcquire(buffer[BUF_WIFI].mutex_rx, osWaitForever);
 800370c:	4b23      	ldr	r3, [pc, #140]	; (800379c <wifi_close+0x9c>)
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	f04f 31ff 	mov.w	r1, #4294967295
 8003714:	4618      	mov	r0, r3
 8003716:	f005 f9c7 	bl	8008aa8 <osMutexAcquire>

	fprintf(fp, "AT+CIPCLOSE=%d\r\n", link);
 800371a:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <wifi_close+0xa0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4920      	ldr	r1, [pc, #128]	; (80037a4 <wifi_close+0xa4>)
 8003722:	4618      	mov	r0, r3
 8003724:	f009 f88e 	bl	800c844 <fiprintf>

	TickType_t tmt_time = xTaskGetTickCount() + WIFI_AT_DEFAULT_TMT;
 8003728:	f007 f81a 	bl	800a760 <xTaskGetTickCount>
 800372c:	4603      	mov	r3, r0
 800372e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003732:	60bb      	str	r3, [r7, #8]
	while (1) {
		if (xTaskGetTickCount() >= tmt_time) {
 8003734:	f007 f814 	bl	800a760 <xTaskGetTickCount>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4293      	cmp	r3, r2
 800373e:	d802      	bhi.n	8003746 <wifi_close+0x46>
			ret = WIFI_ERR_TMT;
 8003740:	2302      	movs	r3, #2
 8003742:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003744:	e01f      	b.n	8003786 <wifi_close+0x86>
		}

		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800374a:	2100      	movs	r1, #0
 800374c:	4816      	ldr	r0, [pc, #88]	; (80037a8 <wifi_close+0xa8>)
 800374e:	f009 fa87 	bl	800cc60 <memset>
		fgets(rx_buffer, UART_BUF_SIZE, fp);
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <wifi_close+0xa0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800375c:	4812      	ldr	r0, [pc, #72]	; (80037a8 <wifi_close+0xa8>)
 800375e:	f008 ff35 	bl	800c5cc <fgets>
		if (cmp_resp(rx_buffer, AT_RESP_OK) == 0)
 8003762:	2100      	movs	r1, #0
 8003764:	4810      	ldr	r0, [pc, #64]	; (80037a8 <wifi_close+0xa8>)
 8003766:	f7ff fb11 	bl	8002d8c <cmp_resp>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <wifi_close+0x84>
			break;
		if (cmp_resp(rx_buffer, AT_RESP_ERROR) == 0) {
 8003770:	2101      	movs	r1, #1
 8003772:	480d      	ldr	r0, [pc, #52]	; (80037a8 <wifi_close+0xa8>)
 8003774:	f7ff fb0a 	bl	8002d8c <cmp_resp>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1da      	bne.n	8003734 <wifi_close+0x34>
			ret = WIFI_ERR_GENEGAL;
 800377e:	2305      	movs	r3, #5
 8003780:	73fb      	strb	r3, [r7, #15]
			goto quit;
 8003782:	e000      	b.n	8003786 <wifi_close+0x86>
			break;
 8003784:	bf00      	nop
		}
	}

quit:
	osMutexRelease(buffer[BUF_WIFI].mutex_rx);
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <wifi_close+0x9c>)
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	4618      	mov	r0, r3
 800378c:	f005 f9d7 	bl	8008b3e <osMutexRelease>
	return ret;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000008 	.word	0x20000008
 80037a0:	20001758 	.word	0x20001758
 80037a4:	0800ef98 	.word	0x0800ef98
 80037a8:	20001500 	.word	0x20001500

080037ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037b0:	480d      	ldr	r0, [pc, #52]	; (80037e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037b2:	490e      	ldr	r1, [pc, #56]	; (80037ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037b4:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b8:	e002      	b.n	80037c0 <LoopCopyDataInit>

080037ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037be:	3304      	adds	r3, #4

080037c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c4:	d3f9      	bcc.n	80037ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037c8:	4c0b      	ldr	r4, [pc, #44]	; (80037f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037cc:	e001      	b.n	80037d2 <LoopFillZerobss>

080037ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d0:	3204      	adds	r2, #4

080037d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d4:	d3fb      	bcc.n	80037ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037d6:	f7ff fac7 	bl	8002d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037da:	f009 f9a5 	bl	800cb28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037de:	f7fe f879 	bl	80018d4 <main>
  bx  lr    
 80037e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80037e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037ec:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80037f0:	0800f868 	.word	0x0800f868
  ldr r2, =_sbss
 80037f4:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80037f8:	20006778 	.word	0x20006778

080037fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037fc:	e7fe      	b.n	80037fc <ADC_IRQHandler>
	...

08003800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HAL_Init+0x40>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0d      	ldr	r2, [pc, #52]	; (8003840 <HAL_Init+0x40>)
 800380a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800380e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_Init+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <HAL_Init+0x40>)
 8003816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800381c:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_Init+0x40>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a07      	ldr	r2, [pc, #28]	; (8003840 <HAL_Init+0x40>)
 8003822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003828:	2003      	movs	r0, #3
 800382a:	f000 fb8d 	bl	8003f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800382e:	200f      	movs	r0, #15
 8003830:	f000 f808 	bl	8003844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003834:	f7fe fd12 	bl	800225c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023c00 	.word	0x40023c00

08003844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_InitTick+0x54>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_InitTick+0x58>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	4619      	mov	r1, r3
 8003856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800385a:	fbb3 f3f1 	udiv	r3, r3, r1
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fba5 	bl	8003fb2 <HAL_SYSTICK_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e00e      	b.n	8003890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b0f      	cmp	r3, #15
 8003876:	d80a      	bhi.n	800388e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003878:	2200      	movs	r2, #0
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	f000 fb6d 	bl	8003f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003884:	4a06      	ldr	r2, [pc, #24]	; (80038a0 <HAL_InitTick+0x5c>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e000      	b.n	8003890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000050 	.word	0x20000050
 800389c:	20000100 	.word	0x20000100
 80038a0:	200000fc 	.word	0x200000fc

080038a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_IncTick+0x20>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_IncTick+0x24>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <HAL_IncTick+0x24>)
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000100 	.word	0x20000100
 80038c8:	20001954 	.word	0x20001954

080038cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return uwTick;
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <HAL_GetTick+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20001954 	.word	0x20001954

080038e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e033      	b.n	8003962 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fe fcd6 	bl	80022b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d118      	bne.n	8003954 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800392a:	f023 0302 	bic.w	r3, r3, #2
 800392e:	f043 0202 	orr.w	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f93a 	bl	8003bb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
 8003952:	e001      	b.n	8003958 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x1c>
 8003984:	2302      	movs	r3, #2
 8003986:	e105      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x228>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b09      	cmp	r3, #9
 8003996:	d925      	bls.n	80039e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68d9      	ldr	r1, [r3, #12]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	3b1e      	subs	r3, #30
 80039ae:	2207      	movs	r2, #7
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43da      	mvns	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	400a      	ands	r2, r1
 80039bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68d9      	ldr	r1, [r3, #12]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	4603      	mov	r3, r0
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4403      	add	r3, r0
 80039d6:	3b1e      	subs	r3, #30
 80039d8:	409a      	lsls	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	e022      	b.n	8003a2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6919      	ldr	r1, [r3, #16]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	2207      	movs	r2, #7
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	400a      	ands	r2, r1
 8003a06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6919      	ldr	r1, [r3, #16]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	4618      	mov	r0, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4403      	add	r3, r0
 8003a20:	409a      	lsls	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d824      	bhi.n	8003a7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	3b05      	subs	r3, #5
 8003a44:	221f      	movs	r2, #31
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	400a      	ands	r2, r1
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4618      	mov	r0, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3b05      	subs	r3, #5
 8003a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34
 8003a7a:	e04c      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	d824      	bhi.n	8003ace <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	3b23      	subs	r3, #35	; 0x23
 8003a96:	221f      	movs	r2, #31
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	3b23      	subs	r3, #35	; 0x23
 8003ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
 8003acc:	e023      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	3b41      	subs	r3, #65	; 0x41
 8003ae0:	221f      	movs	r2, #31
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	400a      	ands	r2, r1
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	3b41      	subs	r3, #65	; 0x41
 8003b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_ADC_ConfigChannel+0x234>)
 8003b18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a21      	ldr	r2, [pc, #132]	; (8003ba4 <HAL_ADC_ConfigChannel+0x238>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d109      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1cc>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b12      	cmp	r3, #18
 8003b2a:	d105      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <HAL_ADC_ConfigChannel+0x238>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d123      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x21e>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d003      	beq.n	8003b52 <HAL_ADC_ConfigChannel+0x1e6>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b11      	cmp	r3, #17
 8003b50:	d11b      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d111      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <HAL_ADC_ConfigChannel+0x23c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a10      	ldr	r2, [pc, #64]	; (8003bac <HAL_ADC_ConfigChannel+0x240>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	0c9a      	lsrs	r2, r3, #18
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b7c:	e002      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f9      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40012300 	.word	0x40012300
 8003ba4:	40012000 	.word	0x40012000
 8003ba8:	20000050 	.word	0x20000050
 8003bac:	431bde83 	.word	0x431bde83

08003bb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bb8:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <ADC_Init+0x1f0>)
 8003bba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	021a      	lsls	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	4a58      	ldr	r2, [pc, #352]	; (8003da4 <ADC_Init+0x1f4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	e00f      	b.n	8003cae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0202 	bic.w	r2, r2, #2
 8003cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6899      	ldr	r1, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7e1b      	ldrb	r3, [r3, #24]
 8003cc8:	005a      	lsls	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01b      	beq.n	8003d14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	3b01      	subs	r3, #1
 8003d08:	035a      	lsls	r2, r3, #13
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	e007      	b.n	8003d24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	051a      	lsls	r2, r3, #20
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6899      	ldr	r1, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d66:	025a      	lsls	r2, r3, #9
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6899      	ldr	r1, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	029a      	lsls	r2, r3, #10
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40012300 	.word	0x40012300
 8003da4:	0f000001 	.word	0x0f000001

08003da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <__NVIC_SetPriorityGrouping+0x44>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dda:	4a04      	ldr	r2, [pc, #16]	; (8003dec <__NVIC_SetPriorityGrouping+0x44>)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	60d3      	str	r3, [r2, #12]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <__NVIC_GetPriorityGrouping+0x18>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	0a1b      	lsrs	r3, r3, #8
 8003dfa:	f003 0307 	and.w	r3, r3, #7
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	db0b      	blt.n	8003e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	f003 021f 	and.w	r2, r3, #31
 8003e24:	4907      	ldr	r1, [pc, #28]	; (8003e44 <__NVIC_EnableIRQ+0x38>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	e000e100 	.word	0xe000e100

08003e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	6039      	str	r1, [r7, #0]
 8003e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	db0a      	blt.n	8003e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	490c      	ldr	r1, [pc, #48]	; (8003e94 <__NVIC_SetPriority+0x4c>)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e70:	e00a      	b.n	8003e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	4908      	ldr	r1, [pc, #32]	; (8003e98 <__NVIC_SetPriority+0x50>)
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	3b04      	subs	r3, #4
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	440b      	add	r3, r1
 8003e86:	761a      	strb	r2, [r3, #24]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000e100 	.word	0xe000e100
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f1c3 0307 	rsb	r3, r3, #7
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	bf28      	it	cs
 8003eba:	2304      	movcs	r3, #4
 8003ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d902      	bls.n	8003ecc <NVIC_EncodePriority+0x30>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3b03      	subs	r3, #3
 8003eca:	e000      	b.n	8003ece <NVIC_EncodePriority+0x32>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43da      	mvns	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	401a      	ands	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43d9      	mvns	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef4:	4313      	orrs	r3, r2
         );
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f14:	d301      	bcc.n	8003f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f16:	2301      	movs	r3, #1
 8003f18:	e00f      	b.n	8003f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <SysTick_Config+0x40>)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f22:	210f      	movs	r1, #15
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	f7ff ff8e 	bl	8003e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <SysTick_Config+0x40>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <SysTick_Config+0x40>)
 8003f34:	2207      	movs	r2, #7
 8003f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000e010 	.word	0xe000e010

08003f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ff29 	bl	8003da8 <__NVIC_SetPriorityGrouping>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f70:	f7ff ff3e 	bl	8003df0 <__NVIC_GetPriorityGrouping>
 8003f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	6978      	ldr	r0, [r7, #20]
 8003f7c:	f7ff ff8e 	bl	8003e9c <NVIC_EncodePriority>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff5d 	bl	8003e48 <__NVIC_SetPriority>
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff ff31 	bl	8003e0c <__NVIC_EnableIRQ>
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ffa2 	bl	8003f04 <SysTick_Config>
 8003fc0:	4603      	mov	r3, r0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fd8:	f7ff fc78 	bl	80038cc <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e099      	b.n	800411c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004008:	e00f      	b.n	800402a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800400a:	f7ff fc5f 	bl	80038cc <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b05      	cmp	r3, #5
 8004016:	d908      	bls.n	800402a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2203      	movs	r2, #3
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e078      	b.n	800411c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e8      	bne.n	800400a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <HAL_DMA_Init+0x158>)
 8004044:	4013      	ands	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	2b04      	cmp	r3, #4
 8004082:	d107      	bne.n	8004094 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	4313      	orrs	r3, r2
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0307 	bic.w	r3, r3, #7
 80040aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d117      	bne.n	80040ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00e      	beq.n	80040ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fb0d 	bl	80046f0 <DMA_CheckFifoParam>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2240      	movs	r2, #64	; 0x40
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040ea:	2301      	movs	r3, #1
 80040ec:	e016      	b.n	800411c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fac4 	bl	8004684 <DMA_CalcBaseAndBitshift>
 80040fc:	4603      	mov	r3, r0
 80040fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	223f      	movs	r2, #63	; 0x3f
 8004106:	409a      	lsls	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	f010803f 	.word	0xf010803f

08004128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_DMA_Start_IT+0x26>
 800414a:	2302      	movs	r3, #2
 800414c:	e040      	b.n	80041d0 <HAL_DMA_Start_IT+0xa8>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d12f      	bne.n	80041c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2202      	movs	r2, #2
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fa56 	bl	8004628 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	223f      	movs	r2, #63	; 0x3f
 8004182:	409a      	lsls	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0216 	orr.w	r2, r2, #22
 8004196:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0208 	orr.w	r2, r2, #8
 80041ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e005      	b.n	80041ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041e6:	f7ff fb71 	bl	80038cc <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d008      	beq.n	800420a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2280      	movs	r2, #128	; 0x80
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e052      	b.n	80042b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0216 	bic.w	r2, r2, #22
 8004218:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004228:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_DMA_Abort+0x62>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0208 	bic.w	r2, r2, #8
 8004248:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800425a:	e013      	b.n	8004284 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800425c:	f7ff fb36 	bl	80038cc <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b05      	cmp	r3, #5
 8004268:	d90c      	bls.n	8004284 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2203      	movs	r2, #3
 8004274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e015      	b.n	80042b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e4      	bne.n	800425c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	223f      	movs	r2, #63	; 0x3f
 8004298:	409a      	lsls	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d004      	beq.n	80042d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00c      	b.n	80042f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2205      	movs	r2, #5
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004308:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <HAL_DMA_IRQHandler+0x248>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a8e      	ldr	r2, [pc, #568]	; (8004548 <HAL_DMA_IRQHandler+0x24c>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	2208      	movs	r2, #8
 8004328:	409a      	lsls	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01a      	beq.n	8004368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0204 	bic.w	r2, r2, #4
 800434e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004354:	2208      	movs	r2, #8
 8004356:	409a      	lsls	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d012      	beq.n	800439e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	2201      	movs	r2, #1
 800438c:	409a      	lsls	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f043 0202 	orr.w	r2, r3, #2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a2:	2204      	movs	r2, #4
 80043a4:	409a      	lsls	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	2204      	movs	r2, #4
 80043c2:	409a      	lsls	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0204 	orr.w	r2, r3, #4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	2210      	movs	r2, #16
 80043da:	409a      	lsls	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d043      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d03c      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f6:	2210      	movs	r2, #16
 80043f8:	409a      	lsls	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d018      	beq.n	800443e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d108      	bne.n	800442c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d024      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
 800442a:	e01f      	b.n	800446c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01b      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
 800443c:	e016      	b.n	800446c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0208 	bic.w	r2, r2, #8
 800445a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	2220      	movs	r2, #32
 8004472:	409a      	lsls	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 808f 	beq.w	800459c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8087 	beq.w	800459c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004492:	2220      	movs	r2, #32
 8004494:	409a      	lsls	r2, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d136      	bne.n	8004514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0216 	bic.w	r2, r2, #22
 80044b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <HAL_DMA_IRQHandler+0x1da>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0208 	bic.w	r2, r2, #8
 80044e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	223f      	movs	r2, #63	; 0x3f
 80044ec:	409a      	lsls	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d07e      	beq.n	8004608 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
        }
        return;
 8004512:	e079      	b.n	8004608 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01d      	beq.n	800455e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	2b00      	cmp	r3, #0
 8004536:	d031      	beq.n	800459c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
 8004540:	e02c      	b.n	800459c <HAL_DMA_IRQHandler+0x2a0>
 8004542:	bf00      	nop
 8004544:	20000050 	.word	0x20000050
 8004548:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d023      	beq.n	800459c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
 800455c:	e01e      	b.n	800459c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10f      	bne.n	800458c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0210 	bic.w	r2, r2, #16
 800457a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d032      	beq.n	800460a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d022      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2205      	movs	r2, #5
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	3301      	adds	r3, #1
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d307      	bcc.n	80045e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f2      	bne.n	80045c8 <HAL_DMA_IRQHandler+0x2cc>
 80045e2:	e000      	b.n	80045e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
 8004606:	e000      	b.n	800460a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004608:	bf00      	nop
    }
  }
}
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004644:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b40      	cmp	r3, #64	; 0x40
 8004654:	d108      	bne.n	8004668 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004666:	e007      	b.n	8004678 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	3b10      	subs	r3, #16
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800469e:	4a13      	ldr	r2, [pc, #76]	; (80046ec <DMA_CalcBaseAndBitshift+0x68>)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d909      	bls.n	80046c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	1d1a      	adds	r2, r3, #4
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	659a      	str	r2, [r3, #88]	; 0x58
 80046c4:	e007      	b.n	80046d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	aaaaaaab 	.word	0xaaaaaaab
 80046ec:	0800f69c 	.word	0x0800f69c

080046f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d11f      	bne.n	800474a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d856      	bhi.n	80047be <DMA_CheckFifoParam+0xce>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <DMA_CheckFifoParam+0x28>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	08004729 	.word	0x08004729
 800471c:	0800473b 	.word	0x0800473b
 8004720:	08004729 	.word	0x08004729
 8004724:	080047bf 	.word	0x080047bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d046      	beq.n	80047c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004738:	e043      	b.n	80047c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004742:	d140      	bne.n	80047c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004748:	e03d      	b.n	80047c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004752:	d121      	bne.n	8004798 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d837      	bhi.n	80047ca <DMA_CheckFifoParam+0xda>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <DMA_CheckFifoParam+0x70>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004771 	.word	0x08004771
 8004764:	08004777 	.word	0x08004777
 8004768:	08004771 	.word	0x08004771
 800476c:	08004789 	.word	0x08004789
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      break;
 8004774:	e030      	b.n	80047d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d025      	beq.n	80047ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004786:	e022      	b.n	80047ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004790:	d11f      	bne.n	80047d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004796:	e01c      	b.n	80047d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d903      	bls.n	80047a6 <DMA_CheckFifoParam+0xb6>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d003      	beq.n	80047ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047a4:	e018      	b.n	80047d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
      break;
 80047aa:	e015      	b.n	80047d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00e      	beq.n	80047d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
      break;
 80047bc:	e00b      	b.n	80047d6 <DMA_CheckFifoParam+0xe6>
      break;
 80047be:	bf00      	nop
 80047c0:	e00a      	b.n	80047d8 <DMA_CheckFifoParam+0xe8>
      break;
 80047c2:	bf00      	nop
 80047c4:	e008      	b.n	80047d8 <DMA_CheckFifoParam+0xe8>
      break;
 80047c6:	bf00      	nop
 80047c8:	e006      	b.n	80047d8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ca:	bf00      	nop
 80047cc:	e004      	b.n	80047d8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ce:	bf00      	nop
 80047d0:	e002      	b.n	80047d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <DMA_CheckFifoParam+0xe8>
      break;
 80047d6:	bf00      	nop
    }
  } 
  
  return status; 
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop

080047e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	e159      	b.n	8004ab8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004804:	2201      	movs	r2, #1
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4013      	ands	r3, r2
 8004816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	429a      	cmp	r2, r3
 800481e:	f040 8148 	bne.w	8004ab2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d005      	beq.n	800483a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004836:	2b02      	cmp	r3, #2
 8004838:	d130      	bne.n	800489c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	2203      	movs	r2, #3
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004870:	2201      	movs	r2, #1
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 0201 	and.w	r2, r3, #1
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d017      	beq.n	80048d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d123      	bne.n	800492c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	08da      	lsrs	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3208      	adds	r2, #8
 80048ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	220f      	movs	r2, #15
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	08da      	lsrs	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3208      	adds	r2, #8
 8004926:	69b9      	ldr	r1, [r7, #24]
 8004928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	2203      	movs	r2, #3
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 0203 	and.w	r2, r3, #3
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80a2 	beq.w	8004ab2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	4b57      	ldr	r3, [pc, #348]	; (8004ad0 <HAL_GPIO_Init+0x2e8>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	4a56      	ldr	r2, [pc, #344]	; (8004ad0 <HAL_GPIO_Init+0x2e8>)
 8004978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800497c:	6453      	str	r3, [r2, #68]	; 0x44
 800497e:	4b54      	ldr	r3, [pc, #336]	; (8004ad0 <HAL_GPIO_Init+0x2e8>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800498a:	4a52      	ldr	r2, [pc, #328]	; (8004ad4 <HAL_GPIO_Init+0x2ec>)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	089b      	lsrs	r3, r3, #2
 8004990:	3302      	adds	r3, #2
 8004992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	220f      	movs	r2, #15
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a49      	ldr	r2, [pc, #292]	; (8004ad8 <HAL_GPIO_Init+0x2f0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d019      	beq.n	80049ea <HAL_GPIO_Init+0x202>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a48      	ldr	r2, [pc, #288]	; (8004adc <HAL_GPIO_Init+0x2f4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_GPIO_Init+0x1fe>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a47      	ldr	r2, [pc, #284]	; (8004ae0 <HAL_GPIO_Init+0x2f8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00d      	beq.n	80049e2 <HAL_GPIO_Init+0x1fa>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a46      	ldr	r2, [pc, #280]	; (8004ae4 <HAL_GPIO_Init+0x2fc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <HAL_GPIO_Init+0x1f6>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a45      	ldr	r2, [pc, #276]	; (8004ae8 <HAL_GPIO_Init+0x300>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_GPIO_Init+0x1f2>
 80049d6:	2304      	movs	r3, #4
 80049d8:	e008      	b.n	80049ec <HAL_GPIO_Init+0x204>
 80049da:	2307      	movs	r3, #7
 80049dc:	e006      	b.n	80049ec <HAL_GPIO_Init+0x204>
 80049de:	2303      	movs	r3, #3
 80049e0:	e004      	b.n	80049ec <HAL_GPIO_Init+0x204>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e002      	b.n	80049ec <HAL_GPIO_Init+0x204>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <HAL_GPIO_Init+0x204>
 80049ea:	2300      	movs	r3, #0
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	f002 0203 	and.w	r2, r2, #3
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	4093      	lsls	r3, r2
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049fc:	4935      	ldr	r1, [pc, #212]	; (8004ad4 <HAL_GPIO_Init+0x2ec>)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	3302      	adds	r3, #2
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a0a:	4b38      	ldr	r3, [pc, #224]	; (8004aec <HAL_GPIO_Init+0x304>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a2e:	4a2f      	ldr	r2, [pc, #188]	; (8004aec <HAL_GPIO_Init+0x304>)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a34:	4b2d      	ldr	r3, [pc, #180]	; (8004aec <HAL_GPIO_Init+0x304>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a58:	4a24      	ldr	r2, [pc, #144]	; (8004aec <HAL_GPIO_Init+0x304>)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a5e:	4b23      	ldr	r3, [pc, #140]	; (8004aec <HAL_GPIO_Init+0x304>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a82:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <HAL_GPIO_Init+0x304>)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a88:	4b18      	ldr	r3, [pc, #96]	; (8004aec <HAL_GPIO_Init+0x304>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aac:	4a0f      	ldr	r2, [pc, #60]	; (8004aec <HAL_GPIO_Init+0x304>)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	f67f aea2 	bls.w	8004804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3724      	adds	r7, #36	; 0x24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40013800 	.word	0x40013800
 8004ad8:	40020000 	.word	0x40020000
 8004adc:	40020400 	.word	0x40020400
 8004ae0:	40020800 	.word	0x40020800
 8004ae4:	40020c00 	.word	0x40020c00
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40013c00 	.word	0x40013c00

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b0c:	e003      	b.n	8004b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b0e:	887b      	ldrh	r3, [r7, #2]
 8004b10:	041a      	lsls	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d006      	beq.n	8004b48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b3a:	4a05      	ldr	r2, [pc, #20]	; (8004b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd f9c6 	bl	8001ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40013c00 	.word	0x40013c00

08004b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e12b      	b.n	8004dbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fd fbde 	bl	800233c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	; 0x24
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bb8:	f001 fbbc 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 8004bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4a81      	ldr	r2, [pc, #516]	; (8004dc8 <HAL_I2C_Init+0x274>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d807      	bhi.n	8004bd8 <HAL_I2C_Init+0x84>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a80      	ldr	r2, [pc, #512]	; (8004dcc <HAL_I2C_Init+0x278>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	bf94      	ite	ls
 8004bd0:	2301      	movls	r3, #1
 8004bd2:	2300      	movhi	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	e006      	b.n	8004be6 <HAL_I2C_Init+0x92>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a7d      	ldr	r2, [pc, #500]	; (8004dd0 <HAL_I2C_Init+0x27c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	bf94      	ite	ls
 8004be0:	2301      	movls	r3, #1
 8004be2:	2300      	movhi	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e0e7      	b.n	8004dbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a78      	ldr	r2, [pc, #480]	; (8004dd4 <HAL_I2C_Init+0x280>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	0c9b      	lsrs	r3, r3, #18
 8004bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4a6a      	ldr	r2, [pc, #424]	; (8004dc8 <HAL_I2C_Init+0x274>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d802      	bhi.n	8004c28 <HAL_I2C_Init+0xd4>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3301      	adds	r3, #1
 8004c26:	e009      	b.n	8004c3c <HAL_I2C_Init+0xe8>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	4a69      	ldr	r2, [pc, #420]	; (8004dd8 <HAL_I2C_Init+0x284>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	495c      	ldr	r1, [pc, #368]	; (8004dc8 <HAL_I2C_Init+0x274>)
 8004c58:	428b      	cmp	r3, r1
 8004c5a:	d819      	bhi.n	8004c90 <HAL_I2C_Init+0x13c>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1e59      	subs	r1, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c6a:	1c59      	adds	r1, r3, #1
 8004c6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c70:	400b      	ands	r3, r1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_I2C_Init+0x138>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1e59      	subs	r1, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c84:	3301      	adds	r3, #1
 8004c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8a:	e051      	b.n	8004d30 <HAL_I2C_Init+0x1dc>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	e04f      	b.n	8004d30 <HAL_I2C_Init+0x1dc>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d111      	bne.n	8004cbc <HAL_I2C_Init+0x168>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	1e58      	subs	r0, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6859      	ldr	r1, [r3, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	440b      	add	r3, r1
 8004ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004caa:	3301      	adds	r3, #1
 8004cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e012      	b.n	8004ce2 <HAL_I2C_Init+0x18e>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1e58      	subs	r0, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	0099      	lsls	r1, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_I2C_Init+0x196>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e022      	b.n	8004d30 <HAL_I2C_Init+0x1dc>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10e      	bne.n	8004d10 <HAL_I2C_Init+0x1bc>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1e58      	subs	r0, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6859      	ldr	r1, [r3, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	440b      	add	r3, r1
 8004d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d04:	3301      	adds	r3, #1
 8004d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d0e:	e00f      	b.n	8004d30 <HAL_I2C_Init+0x1dc>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1e58      	subs	r0, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6859      	ldr	r1, [r3, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	0099      	lsls	r1, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d26:	3301      	adds	r3, #1
 8004d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	6809      	ldr	r1, [r1, #0]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69da      	ldr	r2, [r3, #28]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6911      	ldr	r1, [r2, #16]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68d2      	ldr	r2, [r2, #12]
 8004d6a:	4311      	orrs	r1, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695a      	ldr	r2, [r3, #20]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	000186a0 	.word	0x000186a0
 8004dcc:	001e847f 	.word	0x001e847f
 8004dd0:	003d08ff 	.word	0x003d08ff
 8004dd4:	431bde83 	.word	0x431bde83
 8004dd8:	10624dd3 	.word	0x10624dd3

08004ddc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	4608      	mov	r0, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	817b      	strh	r3, [r7, #10]
 8004dee:	460b      	mov	r3, r1
 8004df0:	813b      	strh	r3, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004df6:	f7fe fd69 	bl	80038cc <HAL_GetTick>
 8004dfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	f040 80d9 	bne.w	8004fbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	2319      	movs	r3, #25
 8004e10:	2201      	movs	r2, #1
 8004e12:	496d      	ldr	r1, [pc, #436]	; (8004fc8 <HAL_I2C_Mem_Write+0x1ec>)
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fc7f 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0cc      	b.n	8004fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_I2C_Mem_Write+0x56>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0c5      	b.n	8004fbe <HAL_I2C_Mem_Write+0x1e2>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d007      	beq.n	8004e58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2221      	movs	r2, #33	; 0x21
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2240      	movs	r2, #64	; 0x40
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a4d      	ldr	r2, [pc, #308]	; (8004fcc <HAL_I2C_Mem_Write+0x1f0>)
 8004e98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e9a:	88f8      	ldrh	r0, [r7, #6]
 8004e9c:	893a      	ldrh	r2, [r7, #8]
 8004e9e:	8979      	ldrh	r1, [r7, #10]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fab6 	bl	800541c <I2C_RequestMemoryWrite>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d052      	beq.n	8004f5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e081      	b.n	8004fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fd00 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00d      	beq.n	8004ee6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d107      	bne.n	8004ee2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06b      	b.n	8004fbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d11b      	bne.n	8004f5c <HAL_I2C_Mem_Write+0x180>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d017      	beq.n	8004f5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1aa      	bne.n	8004eba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fcec 	bl	8005946 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00d      	beq.n	8004f90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d107      	bne.n	8004f8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e016      	b.n	8004fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e000      	b.n	8004fbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fbc:	2302      	movs	r3, #2
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	00100002 	.word	0x00100002
 8004fcc:	ffff0000 	.word	0xffff0000

08004fd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	; 0x30
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	817b      	strh	r3, [r7, #10]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	813b      	strh	r3, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fea:	f7fe fc6f 	bl	80038cc <HAL_GetTick>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	f040 8208 	bne.w	800540e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2319      	movs	r3, #25
 8005004:	2201      	movs	r2, #1
 8005006:	497b      	ldr	r1, [pc, #492]	; (80051f4 <HAL_I2C_Mem_Read+0x224>)
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fb85 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
 8005016:	e1fb      	b.n	8005410 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_I2C_Mem_Read+0x56>
 8005022:	2302      	movs	r3, #2
 8005024:	e1f4      	b.n	8005410 <HAL_I2C_Mem_Read+0x440>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d007      	beq.n	800504c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800505a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2222      	movs	r2, #34	; 0x22
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2240      	movs	r2, #64	; 0x40
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800507c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a5b      	ldr	r2, [pc, #364]	; (80051f8 <HAL_I2C_Mem_Read+0x228>)
 800508c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800508e:	88f8      	ldrh	r0, [r7, #6]
 8005090:	893a      	ldrh	r2, [r7, #8]
 8005092:	8979      	ldrh	r1, [r7, #10]
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	4603      	mov	r3, r0
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fa52 	bl	8005548 <I2C_RequestMemoryRead>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e1b0      	b.n	8005410 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d113      	bne.n	80050de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b6:	2300      	movs	r3, #0
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e184      	b.n	80053e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d11b      	bne.n	800511e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e164      	b.n	80053e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005122:	2b02      	cmp	r3, #2
 8005124:	d11b      	bne.n	800515e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005134:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005146:	2300      	movs	r3, #0
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	e144      	b.n	80053e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005174:	e138      	b.n	80053e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517a:	2b03      	cmp	r3, #3
 800517c:	f200 80f1 	bhi.w	8005362 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	2b01      	cmp	r3, #1
 8005186:	d123      	bne.n	80051d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fc1b 	bl	80059c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e139      	b.n	8005410 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ce:	e10b      	b.n	80053e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d14e      	bne.n	8005276 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	2200      	movs	r2, #0
 80051e0:	4906      	ldr	r1, [pc, #24]	; (80051fc <HAL_I2C_Mem_Read+0x22c>)
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fa98 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e10e      	b.n	8005410 <HAL_I2C_Mem_Read+0x440>
 80051f2:	bf00      	nop
 80051f4:	00100002 	.word	0x00100002
 80051f8:	ffff0000 	.word	0xffff0000
 80051fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005274:	e0b8      	b.n	80053e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527c:	2200      	movs	r2, #0
 800527e:	4966      	ldr	r1, [pc, #408]	; (8005418 <HAL_I2C_Mem_Read+0x448>)
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 fa49 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0bf      	b.n	8005410 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2200      	movs	r2, #0
 80052da:	494f      	ldr	r1, [pc, #316]	; (8005418 <HAL_I2C_Mem_Read+0x448>)
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fa1b 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e091      	b.n	8005410 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005360:	e042      	b.n	80053e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fb2e 	bl	80059c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e04c      	b.n	8005410 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d118      	bne.n	80053e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f aec2 	bne.w	8005176 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	e000      	b.n	8005410 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800540e:	2302      	movs	r3, #2
  }
}
 8005410:	4618      	mov	r0, r3
 8005412:	3728      	adds	r7, #40	; 0x28
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	00010004 	.word	0x00010004

0800541c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	461a      	mov	r2, r3
 800542a:	4603      	mov	r3, r0
 800542c:	817b      	strh	r3, [r7, #10]
 800542e:	460b      	mov	r3, r1
 8005430:	813b      	strh	r3, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005444:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	2200      	movs	r2, #0
 800544e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f960 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00d      	beq.n	800547a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546c:	d103      	bne.n	8005476 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005474:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e05f      	b.n	800553a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800547a:	897b      	ldrh	r3, [r7, #10]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005488:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	492d      	ldr	r1, [pc, #180]	; (8005544 <I2C_RequestMemoryWrite+0x128>)
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f998 	bl	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e04c      	b.n	800553a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b8:	6a39      	ldr	r1, [r7, #32]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fa02 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00d      	beq.n	80054e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d107      	bne.n	80054de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e02b      	b.n	800553a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d105      	bne.n	80054f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	611a      	str	r2, [r3, #16]
 80054f2:	e021      	b.n	8005538 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054f4:	893b      	ldrh	r3, [r7, #8]
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005504:	6a39      	ldr	r1, [r7, #32]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f9dc 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b04      	cmp	r3, #4
 8005518:	d107      	bne.n	800552a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005528:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e005      	b.n	800553a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800552e:	893b      	ldrh	r3, [r7, #8]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	00010002 	.word	0x00010002

08005548 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	4608      	mov	r0, r1
 8005552:	4611      	mov	r1, r2
 8005554:	461a      	mov	r2, r3
 8005556:	4603      	mov	r3, r0
 8005558:	817b      	strh	r3, [r7, #10]
 800555a:	460b      	mov	r3, r1
 800555c:	813b      	strh	r3, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005570:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005580:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	2200      	movs	r2, #0
 800558a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f8c2 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00d      	beq.n	80055b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a8:	d103      	bne.n	80055b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e0aa      	b.n	800570c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055b6:	897b      	ldrh	r3, [r7, #10]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	6a3a      	ldr	r2, [r7, #32]
 80055ca:	4952      	ldr	r1, [pc, #328]	; (8005714 <I2C_RequestMemoryRead+0x1cc>)
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f8fa 	bl	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e097      	b.n	800570c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f4:	6a39      	ldr	r1, [r7, #32]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f964 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00d      	beq.n	800561e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b04      	cmp	r3, #4
 8005608:	d107      	bne.n	800561a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005618:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e076      	b.n	800570c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d105      	bne.n	8005630 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005624:	893b      	ldrh	r3, [r7, #8]
 8005626:	b2da      	uxtb	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	611a      	str	r2, [r3, #16]
 800562e:	e021      	b.n	8005674 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005630:	893b      	ldrh	r3, [r7, #8]
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	b29b      	uxth	r3, r3
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800563e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005640:	6a39      	ldr	r1, [r7, #32]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f93e 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00d      	beq.n	800566a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2b04      	cmp	r3, #4
 8005654:	d107      	bne.n	8005666 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005664:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e050      	b.n	800570c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800566a:	893b      	ldrh	r3, [r7, #8]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005676:	6a39      	ldr	r1, [r7, #32]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f923 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00d      	beq.n	80056a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	2b04      	cmp	r3, #4
 800568a:	d107      	bne.n	800569c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e035      	b.n	800570c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f82b 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00d      	beq.n	80056e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	d103      	bne.n	80056e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e013      	b.n	800570c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056e4:	897b      	ldrh	r3, [r7, #10]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	6a3a      	ldr	r2, [r7, #32]
 80056f8:	4906      	ldr	r1, [pc, #24]	; (8005714 <I2C_RequestMemoryRead+0x1cc>)
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f863 	bl	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	00010002 	.word	0x00010002

08005718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005728:	e025      	b.n	8005776 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d021      	beq.n	8005776 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fe f8cb 	bl	80038cc <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d116      	bne.n	8005776 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e023      	b.n	80057be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10d      	bne.n	800579c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	43da      	mvns	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4013      	ands	r3, r2
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	bf0c      	ite	eq
 8005792:	2301      	moveq	r3, #1
 8005794:	2300      	movne	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	e00c      	b.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	43da      	mvns	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4013      	ands	r3, r2
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bf0c      	ite	eq
 80057ae:	2301      	moveq	r3, #1
 80057b0:	2300      	movne	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d0b6      	beq.n	800572a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057d4:	e051      	b.n	800587a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e4:	d123      	bne.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0204 	orr.w	r2, r3, #4
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e046      	b.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d021      	beq.n	800587a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fe f849 	bl	80038cc <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d116      	bne.n	800587a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e020      	b.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	0c1b      	lsrs	r3, r3, #16
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10c      	bne.n	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	43da      	mvns	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4013      	ands	r3, r2
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	bf14      	ite	ne
 8005896:	2301      	movne	r3, #1
 8005898:	2300      	moveq	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	e00b      	b.n	80058b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	43da      	mvns	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4013      	ands	r3, r2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bf14      	ite	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	2300      	moveq	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d18d      	bne.n	80057d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d0:	e02d      	b.n	800592e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f8ce 	bl	8005a74 <I2C_IsAcknowledgeFailed>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e02d      	b.n	800593e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d021      	beq.n	800592e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ea:	f7fd ffef 	bl	80038cc <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d302      	bcc.n	8005900 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d116      	bne.n	800592e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f043 0220 	orr.w	r2, r3, #32
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e007      	b.n	800593e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005938:	2b80      	cmp	r3, #128	; 0x80
 800593a:	d1ca      	bne.n	80058d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005952:	e02d      	b.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f88d 	bl	8005a74 <I2C_IsAcknowledgeFailed>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e02d      	b.n	80059c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d021      	beq.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596c:	f7fd ffae 	bl	80038cc <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d116      	bne.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	f043 0220 	orr.w	r2, r3, #32
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e007      	b.n	80059c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d1ca      	bne.n	8005954 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059d4:	e042      	b.n	8005a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d119      	bne.n	8005a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0210 	mvn.w	r2, #16
 80059ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e029      	b.n	8005a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a18:	f7fd ff58 	bl	80038cc <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d116      	bne.n	8005a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e007      	b.n	8005a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a66:	2b40      	cmp	r3, #64	; 0x40
 8005a68:	d1b5      	bne.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8a:	d11b      	bne.n	8005ac4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	f043 0204 	orr.w	r2, r3, #4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e267      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d075      	beq.n	8005bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005af2:	4b88      	ldr	r3, [pc, #544]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d00c      	beq.n	8005b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005afe:	4b85      	ldr	r3, [pc, #532]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d112      	bne.n	8005b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b0a:	4b82      	ldr	r3, [pc, #520]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b16:	d10b      	bne.n	8005b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b18:	4b7e      	ldr	r3, [pc, #504]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d05b      	beq.n	8005bdc <HAL_RCC_OscConfig+0x108>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d157      	bne.n	8005bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e242      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b38:	d106      	bne.n	8005b48 <HAL_RCC_OscConfig+0x74>
 8005b3a:	4b76      	ldr	r3, [pc, #472]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a75      	ldr	r2, [pc, #468]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e01d      	b.n	8005b84 <HAL_RCC_OscConfig+0xb0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b50:	d10c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x98>
 8005b52:	4b70      	ldr	r3, [pc, #448]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a6f      	ldr	r2, [pc, #444]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a6c      	ldr	r2, [pc, #432]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e00b      	b.n	8005b84 <HAL_RCC_OscConfig+0xb0>
 8005b6c:	4b69      	ldr	r3, [pc, #420]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a68      	ldr	r2, [pc, #416]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	4b66      	ldr	r3, [pc, #408]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a65      	ldr	r2, [pc, #404]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d013      	beq.n	8005bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8c:	f7fd fe9e 	bl	80038cc <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b94:	f7fd fe9a 	bl	80038cc <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b64      	cmp	r3, #100	; 0x64
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e207      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ba6:	4b5b      	ldr	r3, [pc, #364]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <HAL_RCC_OscConfig+0xc0>
 8005bb2:	e014      	b.n	8005bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7fd fe8a 	bl	80038cc <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bbc:	f7fd fe86 	bl	80038cc <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b64      	cmp	r3, #100	; 0x64
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e1f3      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bce:	4b51      	ldr	r3, [pc, #324]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0xe8>
 8005bda:	e000      	b.n	8005bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d063      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bea:	4b4a      	ldr	r3, [pc, #296]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bf6:	4b47      	ldr	r3, [pc, #284]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d11c      	bne.n	8005c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c02:	4b44      	ldr	r3, [pc, #272]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d116      	bne.n	8005c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c0e:	4b41      	ldr	r3, [pc, #260]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_RCC_OscConfig+0x152>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d001      	beq.n	8005c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e1c7      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c26:	4b3b      	ldr	r3, [pc, #236]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	4937      	ldr	r1, [pc, #220]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c3a:	e03a      	b.n	8005cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d020      	beq.n	8005c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c44:	4b34      	ldr	r3, [pc, #208]	; (8005d18 <HAL_RCC_OscConfig+0x244>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4a:	f7fd fe3f 	bl	80038cc <HAL_GetTick>
 8005c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c52:	f7fd fe3b 	bl	80038cc <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e1a8      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c64:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c70:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4925      	ldr	r1, [pc, #148]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	600b      	str	r3, [r1, #0]
 8005c84:	e015      	b.n	8005cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <HAL_RCC_OscConfig+0x244>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8c:	f7fd fe1e 	bl	80038cc <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c94:	f7fd fe1a 	bl	80038cc <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e187      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca6:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d036      	beq.n	8005d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d016      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cc6:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <HAL_RCC_OscConfig+0x248>)
 8005cc8:	2201      	movs	r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ccc:	f7fd fdfe 	bl	80038cc <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd4:	f7fd fdfa 	bl	80038cc <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e167      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x200>
 8005cf2:	e01b      	b.n	8005d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <HAL_RCC_OscConfig+0x248>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfa:	f7fd fde7 	bl	80038cc <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d00:	e00e      	b.n	8005d20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d02:	f7fd fde3 	bl	80038cc <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d907      	bls.n	8005d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e150      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
 8005d14:	40023800 	.word	0x40023800
 8005d18:	42470000 	.word	0x42470000
 8005d1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d20:	4b88      	ldr	r3, [pc, #544]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ea      	bne.n	8005d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8097 	beq.w	8005e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d3e:	4b81      	ldr	r3, [pc, #516]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10f      	bne.n	8005d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	4b7d      	ldr	r3, [pc, #500]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	4a7c      	ldr	r2, [pc, #496]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d58:	6413      	str	r3, [r2, #64]	; 0x40
 8005d5a:	4b7a      	ldr	r3, [pc, #488]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6a:	4b77      	ldr	r3, [pc, #476]	; (8005f48 <HAL_RCC_OscConfig+0x474>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d118      	bne.n	8005da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d76:	4b74      	ldr	r3, [pc, #464]	; (8005f48 <HAL_RCC_OscConfig+0x474>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a73      	ldr	r2, [pc, #460]	; (8005f48 <HAL_RCC_OscConfig+0x474>)
 8005d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d82:	f7fd fda3 	bl	80038cc <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8a:	f7fd fd9f 	bl	80038cc <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e10c      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9c:	4b6a      	ldr	r3, [pc, #424]	; (8005f48 <HAL_RCC_OscConfig+0x474>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0f0      	beq.n	8005d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d106      	bne.n	8005dbe <HAL_RCC_OscConfig+0x2ea>
 8005db0:	4b64      	ldr	r3, [pc, #400]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db4:	4a63      	ldr	r2, [pc, #396]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	6713      	str	r3, [r2, #112]	; 0x70
 8005dbc:	e01c      	b.n	8005df8 <HAL_RCC_OscConfig+0x324>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b05      	cmp	r3, #5
 8005dc4:	d10c      	bne.n	8005de0 <HAL_RCC_OscConfig+0x30c>
 8005dc6:	4b5f      	ldr	r3, [pc, #380]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	4a5e      	ldr	r2, [pc, #376]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	f043 0304 	orr.w	r3, r3, #4
 8005dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd2:	4b5c      	ldr	r3, [pc, #368]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	4a5b      	ldr	r2, [pc, #364]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	f043 0301 	orr.w	r3, r3, #1
 8005ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8005dde:	e00b      	b.n	8005df8 <HAL_RCC_OscConfig+0x324>
 8005de0:	4b58      	ldr	r3, [pc, #352]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de4:	4a57      	ldr	r2, [pc, #348]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	6713      	str	r3, [r2, #112]	; 0x70
 8005dec:	4b55      	ldr	r3, [pc, #340]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df0:	4a54      	ldr	r2, [pc, #336]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005df2:	f023 0304 	bic.w	r3, r3, #4
 8005df6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d015      	beq.n	8005e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e00:	f7fd fd64 	bl	80038cc <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e06:	e00a      	b.n	8005e1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e08:	f7fd fd60 	bl	80038cc <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e0cb      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1e:	4b49      	ldr	r3, [pc, #292]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0ee      	beq.n	8005e08 <HAL_RCC_OscConfig+0x334>
 8005e2a:	e014      	b.n	8005e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e2c:	f7fd fd4e 	bl	80038cc <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e34:	f7fd fd4a 	bl	80038cc <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e0b5      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e4a:	4b3e      	ldr	r3, [pc, #248]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1ee      	bne.n	8005e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d105      	bne.n	8005e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5c:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	4a38      	ldr	r2, [pc, #224]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80a1 	beq.w	8005fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e72:	4b34      	ldr	r3, [pc, #208]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 030c 	and.w	r3, r3, #12
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d05c      	beq.n	8005f38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d141      	bne.n	8005f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e86:	4b31      	ldr	r3, [pc, #196]	; (8005f4c <HAL_RCC_OscConfig+0x478>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8c:	f7fd fd1e 	bl	80038cc <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e94:	f7fd fd1a 	bl	80038cc <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e087      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea6:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69da      	ldr	r2, [r3, #28]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	019b      	lsls	r3, r3, #6
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	061b      	lsls	r3, r3, #24
 8005ed6:	491b      	ldr	r1, [pc, #108]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005edc:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <HAL_RCC_OscConfig+0x478>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee2:	f7fd fcf3 	bl	80038cc <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eea:	f7fd fcef 	bl	80038cc <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e05c      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efc:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0f0      	beq.n	8005eea <HAL_RCC_OscConfig+0x416>
 8005f08:	e054      	b.n	8005fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f0a:	4b10      	ldr	r3, [pc, #64]	; (8005f4c <HAL_RCC_OscConfig+0x478>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fd fcdc 	bl	80038cc <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f18:	f7fd fcd8 	bl	80038cc <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e045      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0x444>
 8005f36:	e03d      	b.n	8005fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d107      	bne.n	8005f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e038      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
 8005f44:	40023800 	.word	0x40023800
 8005f48:	40007000 	.word	0x40007000
 8005f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f50:	4b1b      	ldr	r3, [pc, #108]	; (8005fc0 <HAL_RCC_OscConfig+0x4ec>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d028      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d121      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d11a      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f80:	4013      	ands	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d111      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d001      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40023800 	.word	0x40023800

08005fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0cc      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd8:	4b68      	ldr	r3, [pc, #416]	; (800617c <HAL_RCC_ClockConfig+0x1b8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d90c      	bls.n	8006000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe6:	4b65      	ldr	r3, [pc, #404]	; (800617c <HAL_RCC_ClockConfig+0x1b8>)
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fee:	4b63      	ldr	r3, [pc, #396]	; (800617c <HAL_RCC_ClockConfig+0x1b8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d001      	beq.n	8006000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0b8      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d020      	beq.n	800604e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006018:	4b59      	ldr	r3, [pc, #356]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4a58      	ldr	r2, [pc, #352]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006030:	4b53      	ldr	r3, [pc, #332]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	4a52      	ldr	r2, [pc, #328]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800603a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800603c:	4b50      	ldr	r3, [pc, #320]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	494d      	ldr	r1, [pc, #308]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	4313      	orrs	r3, r2
 800604c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d044      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d107      	bne.n	8006072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006062:	4b47      	ldr	r3, [pc, #284]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d119      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e07f      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d003      	beq.n	8006082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800607e:	2b03      	cmp	r3, #3
 8006080:	d107      	bne.n	8006092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006082:	4b3f      	ldr	r3, [pc, #252]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e06f      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006092:	4b3b      	ldr	r3, [pc, #236]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e067      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060a2:	4b37      	ldr	r3, [pc, #220]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f023 0203 	bic.w	r2, r3, #3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4934      	ldr	r1, [pc, #208]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060b4:	f7fd fc0a 	bl	80038cc <HAL_GetTick>
 80060b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ba:	e00a      	b.n	80060d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060bc:	f7fd fc06 	bl	80038cc <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e04f      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d2:	4b2b      	ldr	r3, [pc, #172]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 020c 	and.w	r2, r3, #12
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d1eb      	bne.n	80060bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060e4:	4b25      	ldr	r3, [pc, #148]	; (800617c <HAL_RCC_ClockConfig+0x1b8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d20c      	bcs.n	800610c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f2:	4b22      	ldr	r3, [pc, #136]	; (800617c <HAL_RCC_ClockConfig+0x1b8>)
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fa:	4b20      	ldr	r3, [pc, #128]	; (800617c <HAL_RCC_ClockConfig+0x1b8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d001      	beq.n	800610c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e032      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	d008      	beq.n	800612a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006118:	4b19      	ldr	r3, [pc, #100]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	4916      	ldr	r1, [pc, #88]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	4313      	orrs	r3, r2
 8006128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d009      	beq.n	800614a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006136:	4b12      	ldr	r3, [pc, #72]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	490e      	ldr	r1, [pc, #56]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800614a:	f000 f821 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 800614e:	4602      	mov	r2, r0
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	490a      	ldr	r1, [pc, #40]	; (8006184 <HAL_RCC_ClockConfig+0x1c0>)
 800615c:	5ccb      	ldrb	r3, [r1, r3]
 800615e:	fa22 f303 	lsr.w	r3, r2, r3
 8006162:	4a09      	ldr	r2, [pc, #36]	; (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 8006164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006166:	4b09      	ldr	r3, [pc, #36]	; (800618c <HAL_RCC_ClockConfig+0x1c8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f7fd fb6a 	bl	8003844 <HAL_InitTick>

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023c00 	.word	0x40023c00
 8006180:	40023800 	.word	0x40023800
 8006184:	0800f684 	.word	0x0800f684
 8006188:	20000050 	.word	0x20000050
 800618c:	200000fc 	.word	0x200000fc

08006190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006194:	b090      	sub	sp, #64	; 0x40
 8006196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
 800619c:	2300      	movs	r3, #0
 800619e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a0:	2300      	movs	r3, #0
 80061a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061a8:	4b59      	ldr	r3, [pc, #356]	; (8006310 <HAL_RCC_GetSysClockFreq+0x180>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 030c 	and.w	r3, r3, #12
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d00d      	beq.n	80061d0 <HAL_RCC_GetSysClockFreq+0x40>
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	f200 80a1 	bhi.w	80062fc <HAL_RCC_GetSysClockFreq+0x16c>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_RCC_GetSysClockFreq+0x34>
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d003      	beq.n	80061ca <HAL_RCC_GetSysClockFreq+0x3a>
 80061c2:	e09b      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061c4:	4b53      	ldr	r3, [pc, #332]	; (8006314 <HAL_RCC_GetSysClockFreq+0x184>)
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80061c8:	e09b      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ca:	4b53      	ldr	r3, [pc, #332]	; (8006318 <HAL_RCC_GetSysClockFreq+0x188>)
 80061cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061ce:	e098      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061d0:	4b4f      	ldr	r3, [pc, #316]	; (8006310 <HAL_RCC_GetSysClockFreq+0x180>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061da:	4b4d      	ldr	r3, [pc, #308]	; (8006310 <HAL_RCC_GetSysClockFreq+0x180>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d028      	beq.n	8006238 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061e6:	4b4a      	ldr	r3, [pc, #296]	; (8006310 <HAL_RCC_GetSysClockFreq+0x180>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	099b      	lsrs	r3, r3, #6
 80061ec:	2200      	movs	r2, #0
 80061ee:	623b      	str	r3, [r7, #32]
 80061f0:	627a      	str	r2, [r7, #36]	; 0x24
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061f8:	2100      	movs	r1, #0
 80061fa:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCC_GetSysClockFreq+0x188>)
 80061fc:	fb03 f201 	mul.w	r2, r3, r1
 8006200:	2300      	movs	r3, #0
 8006202:	fb00 f303 	mul.w	r3, r0, r3
 8006206:	4413      	add	r3, r2
 8006208:	4a43      	ldr	r2, [pc, #268]	; (8006318 <HAL_RCC_GetSysClockFreq+0x188>)
 800620a:	fba0 1202 	umull	r1, r2, r0, r2
 800620e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006210:	460a      	mov	r2, r1
 8006212:	62ba      	str	r2, [r7, #40]	; 0x28
 8006214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006216:	4413      	add	r3, r2
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	2200      	movs	r2, #0
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	61fa      	str	r2, [r7, #28]
 8006222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006226:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800622a:	f7fa f881 	bl	8000330 <__aeabi_uldivmod>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4613      	mov	r3, r2
 8006234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006236:	e053      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006238:	4b35      	ldr	r3, [pc, #212]	; (8006310 <HAL_RCC_GetSysClockFreq+0x180>)
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	099b      	lsrs	r3, r3, #6
 800623e:	2200      	movs	r2, #0
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	617a      	str	r2, [r7, #20]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800624a:	f04f 0b00 	mov.w	fp, #0
 800624e:	4652      	mov	r2, sl
 8006250:	465b      	mov	r3, fp
 8006252:	f04f 0000 	mov.w	r0, #0
 8006256:	f04f 0100 	mov.w	r1, #0
 800625a:	0159      	lsls	r1, r3, #5
 800625c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006260:	0150      	lsls	r0, r2, #5
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	ebb2 080a 	subs.w	r8, r2, sl
 800626a:	eb63 090b 	sbc.w	r9, r3, fp
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800627a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800627e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006282:	ebb2 0408 	subs.w	r4, r2, r8
 8006286:	eb63 0509 	sbc.w	r5, r3, r9
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	00eb      	lsls	r3, r5, #3
 8006294:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006298:	00e2      	lsls	r2, r4, #3
 800629a:	4614      	mov	r4, r2
 800629c:	461d      	mov	r5, r3
 800629e:	eb14 030a 	adds.w	r3, r4, sl
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	eb45 030b 	adc.w	r3, r5, fp
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062b6:	4629      	mov	r1, r5
 80062b8:	028b      	lsls	r3, r1, #10
 80062ba:	4621      	mov	r1, r4
 80062bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062c0:	4621      	mov	r1, r4
 80062c2:	028a      	lsls	r2, r1, #10
 80062c4:	4610      	mov	r0, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ca:	2200      	movs	r2, #0
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	60fa      	str	r2, [r7, #12]
 80062d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062d4:	f7fa f82c 	bl	8000330 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4613      	mov	r3, r2
 80062de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_RCC_GetSysClockFreq+0x180>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	0c1b      	lsrs	r3, r3, #16
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	3301      	adds	r3, #1
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80062f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80062fa:	e002      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062fc:	4b05      	ldr	r3, [pc, #20]	; (8006314 <HAL_RCC_GetSysClockFreq+0x184>)
 80062fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006304:	4618      	mov	r0, r3
 8006306:	3740      	adds	r7, #64	; 0x40
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630e:	bf00      	nop
 8006310:	40023800 	.word	0x40023800
 8006314:	00f42400 	.word	0x00f42400
 8006318:	017d7840 	.word	0x017d7840

0800631c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006320:	4b03      	ldr	r3, [pc, #12]	; (8006330 <HAL_RCC_GetHCLKFreq+0x14>)
 8006322:	681b      	ldr	r3, [r3, #0]
}
 8006324:	4618      	mov	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000050 	.word	0x20000050

08006334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006338:	f7ff fff0 	bl	800631c <HAL_RCC_GetHCLKFreq>
 800633c:	4602      	mov	r2, r0
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	0a9b      	lsrs	r3, r3, #10
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	4903      	ldr	r1, [pc, #12]	; (8006358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800634a:	5ccb      	ldrb	r3, [r1, r3]
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40023800 	.word	0x40023800
 8006358:	0800f694 	.word	0x0800f694

0800635c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006360:	f7ff ffdc 	bl	800631c <HAL_RCC_GetHCLKFreq>
 8006364:	4602      	mov	r2, r0
 8006366:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	0b5b      	lsrs	r3, r3, #13
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	4903      	ldr	r1, [pc, #12]	; (8006380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006372:	5ccb      	ldrb	r3, [r1, r3]
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006378:	4618      	mov	r0, r3
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40023800 	.word	0x40023800
 8006380:	0800f694 	.word	0x0800f694

08006384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e07b      	b.n	800648e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	2b00      	cmp	r3, #0
 800639c:	d108      	bne.n	80063b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063a6:	d009      	beq.n	80063bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	61da      	str	r2, [r3, #28]
 80063ae:	e005      	b.n	80063bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb fff8 	bl	80023cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	ea42 0103 	orr.w	r1, r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	f003 0104 	and.w	r1, r3, #4
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	f003 0210 	and.w	r2, r3, #16
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b088      	sub	sp, #32
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	603b      	str	r3, [r7, #0]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_SPI_Transmit+0x22>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e126      	b.n	8006706 <HAL_SPI_Transmit+0x270>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064c0:	f7fd fa04 	bl	80038cc <HAL_GetTick>
 80064c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d002      	beq.n	80064dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
 80064d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064da:	e10b      	b.n	80066f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_SPI_Transmit+0x52>
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064ec:	e102      	b.n	80066f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2203      	movs	r2, #3
 80064f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006534:	d10f      	bne.n	8006556 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006544:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006554:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d007      	beq.n	8006574 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800657c:	d14b      	bne.n	8006616 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_SPI_Transmit+0xf6>
 8006586:	8afb      	ldrh	r3, [r7, #22]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d13e      	bne.n	800660a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	881a      	ldrh	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	1c9a      	adds	r2, r3, #2
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065b0:	e02b      	b.n	800660a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d112      	bne.n	80065e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	881a      	ldrh	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	1c9a      	adds	r2, r3, #2
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80065e4:	e011      	b.n	800660a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065e6:	f7fd f971 	bl	80038cc <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d803      	bhi.n	80065fe <HAL_SPI_Transmit+0x168>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fc:	d102      	bne.n	8006604 <HAL_SPI_Transmit+0x16e>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d102      	bne.n	800660a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006608:	e074      	b.n	80066f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ce      	bne.n	80065b2 <HAL_SPI_Transmit+0x11c>
 8006614:	e04c      	b.n	80066b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_SPI_Transmit+0x18e>
 800661e:	8afb      	ldrh	r3, [r7, #22]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d140      	bne.n	80066a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	330c      	adds	r3, #12
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800664a:	e02c      	b.n	80066a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b02      	cmp	r3, #2
 8006658:	d113      	bne.n	8006682 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006680:	e011      	b.n	80066a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006682:	f7fd f923 	bl	80038cc <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d803      	bhi.n	800669a <HAL_SPI_Transmit+0x204>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d102      	bne.n	80066a0 <HAL_SPI_Transmit+0x20a>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066a4:	e026      	b.n	80066f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1cd      	bne.n	800664c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f8b3 	bl	8006820 <SPI_EndRxTxTransaction>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e000      	b.n	80066f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80066f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006704:	7ffb      	ldrb	r3, [r7, #31]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3720      	adds	r7, #32
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006720:	f7fd f8d4 	bl	80038cc <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	4413      	add	r3, r2
 800672e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006730:	f7fd f8cc 	bl	80038cc <HAL_GetTick>
 8006734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006736:	4b39      	ldr	r3, [pc, #228]	; (800681c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	015b      	lsls	r3, r3, #5
 800673c:	0d1b      	lsrs	r3, r3, #20
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
 8006744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006746:	e054      	b.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d050      	beq.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006750:	f7fd f8bc 	bl	80038cc <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	429a      	cmp	r2, r3
 800675e:	d902      	bls.n	8006766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d13d      	bne.n	80067e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800677e:	d111      	bne.n	80067a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006788:	d004      	beq.n	8006794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006792:	d107      	bne.n	80067a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ac:	d10f      	bne.n	80067ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e017      	b.n	8006812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4013      	ands	r3, r2
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	429a      	cmp	r2, r3
 8006800:	bf0c      	ite	eq
 8006802:	2301      	moveq	r3, #1
 8006804:	2300      	movne	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	429a      	cmp	r2, r3
 800680e:	d19b      	bne.n	8006748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000050 	.word	0x20000050

08006820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800682c:	4b1b      	ldr	r3, [pc, #108]	; (800689c <SPI_EndRxTxTransaction+0x7c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1b      	ldr	r2, [pc, #108]	; (80068a0 <SPI_EndRxTxTransaction+0x80>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	0d5b      	lsrs	r3, r3, #21
 8006838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800683c:	fb02 f303 	mul.w	r3, r2, r3
 8006840:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800684a:	d112      	bne.n	8006872 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2200      	movs	r2, #0
 8006854:	2180      	movs	r1, #128	; 0x80
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff ff5a 	bl	8006710 <SPI_WaitFlagStateUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d016      	beq.n	8006890 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f043 0220 	orr.w	r2, r3, #32
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e00f      	b.n	8006892 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	3b01      	subs	r3, #1
 800687c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	d0f2      	beq.n	8006872 <SPI_EndRxTxTransaction+0x52>
 800688c:	e000      	b.n	8006890 <SPI_EndRxTxTransaction+0x70>
        break;
 800688e:	bf00      	nop
  }

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000050 	.word	0x20000050
 80068a0:	165e9f81 	.word	0x165e9f81

080068a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e041      	b.n	800693a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fb fdc6 	bl	800245c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f000 fa2e 	bl	8006d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b02      	cmp	r3, #2
 8006956:	d122      	bne.n	800699e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b02      	cmp	r3, #2
 8006964:	d11b      	bne.n	800699e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f06f 0202 	mvn.w	r2, #2
 800696e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9bf 	bl	8006d08 <HAL_TIM_IC_CaptureCallback>
 800698a:	e005      	b.n	8006998 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f9b1 	bl	8006cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f9c2 	bl	8006d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d122      	bne.n	80069f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d11b      	bne.n	80069f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0204 	mvn.w	r2, #4
 80069c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f995 	bl	8006d08 <HAL_TIM_IC_CaptureCallback>
 80069de:	e005      	b.n	80069ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f987 	bl	8006cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f998 	bl	8006d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d122      	bne.n	8006a46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d11b      	bne.n	8006a46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f06f 0208 	mvn.w	r2, #8
 8006a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f003 0303 	and.w	r3, r3, #3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f96b 	bl	8006d08 <HAL_TIM_IC_CaptureCallback>
 8006a32:	e005      	b.n	8006a40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f95d 	bl	8006cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f96e 	bl	8006d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d122      	bne.n	8006a9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b10      	cmp	r3, #16
 8006a60:	d11b      	bne.n	8006a9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f06f 0210 	mvn.w	r2, #16
 8006a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2208      	movs	r2, #8
 8006a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f941 	bl	8006d08 <HAL_TIM_IC_CaptureCallback>
 8006a86:	e005      	b.n	8006a94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f933 	bl	8006cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f944 	bl	8006d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d10e      	bne.n	8006ac6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d107      	bne.n	8006ac6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f06f 0201 	mvn.w	r2, #1
 8006abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f90d 	bl	8006ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d10e      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ade:	2b80      	cmp	r3, #128	; 0x80
 8006ae0:	d107      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fabb 	bl	8007068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d10e      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0a:	2b40      	cmp	r3, #64	; 0x40
 8006b0c:	d107      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f909 	bl	8006d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d10e      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d107      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f06f 0220 	mvn.w	r2, #32
 8006b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fa85 	bl	8007054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_TIM_ConfigClockSource+0x1c>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e0b4      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x186>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba6:	d03e      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0xd4>
 8006ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bac:	f200 8087 	bhi.w	8006cbe <HAL_TIM_ConfigClockSource+0x16c>
 8006bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb4:	f000 8086 	beq.w	8006cc4 <HAL_TIM_ConfigClockSource+0x172>
 8006bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbc:	d87f      	bhi.n	8006cbe <HAL_TIM_ConfigClockSource+0x16c>
 8006bbe:	2b70      	cmp	r3, #112	; 0x70
 8006bc0:	d01a      	beq.n	8006bf8 <HAL_TIM_ConfigClockSource+0xa6>
 8006bc2:	2b70      	cmp	r3, #112	; 0x70
 8006bc4:	d87b      	bhi.n	8006cbe <HAL_TIM_ConfigClockSource+0x16c>
 8006bc6:	2b60      	cmp	r3, #96	; 0x60
 8006bc8:	d050      	beq.n	8006c6c <HAL_TIM_ConfigClockSource+0x11a>
 8006bca:	2b60      	cmp	r3, #96	; 0x60
 8006bcc:	d877      	bhi.n	8006cbe <HAL_TIM_ConfigClockSource+0x16c>
 8006bce:	2b50      	cmp	r3, #80	; 0x50
 8006bd0:	d03c      	beq.n	8006c4c <HAL_TIM_ConfigClockSource+0xfa>
 8006bd2:	2b50      	cmp	r3, #80	; 0x50
 8006bd4:	d873      	bhi.n	8006cbe <HAL_TIM_ConfigClockSource+0x16c>
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	d058      	beq.n	8006c8c <HAL_TIM_ConfigClockSource+0x13a>
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d86f      	bhi.n	8006cbe <HAL_TIM_ConfigClockSource+0x16c>
 8006bde:	2b30      	cmp	r3, #48	; 0x30
 8006be0:	d064      	beq.n	8006cac <HAL_TIM_ConfigClockSource+0x15a>
 8006be2:	2b30      	cmp	r3, #48	; 0x30
 8006be4:	d86b      	bhi.n	8006cbe <HAL_TIM_ConfigClockSource+0x16c>
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d060      	beq.n	8006cac <HAL_TIM_ConfigClockSource+0x15a>
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d867      	bhi.n	8006cbe <HAL_TIM_ConfigClockSource+0x16c>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d05c      	beq.n	8006cac <HAL_TIM_ConfigClockSource+0x15a>
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d05a      	beq.n	8006cac <HAL_TIM_ConfigClockSource+0x15a>
 8006bf6:	e062      	b.n	8006cbe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	6899      	ldr	r1, [r3, #8]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f000 f996 	bl	8006f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	609a      	str	r2, [r3, #8]
      break;
 8006c24:	e04f      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6899      	ldr	r1, [r3, #8]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f000 f97f 	bl	8006f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c48:	609a      	str	r2, [r3, #8]
      break;
 8006c4a:	e03c      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	6859      	ldr	r1, [r3, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f000 f8f3 	bl	8006e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2150      	movs	r1, #80	; 0x50
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 f94c 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 8006c6a:	e02c      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	6859      	ldr	r1, [r3, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f000 f912 	bl	8006ea2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2160      	movs	r1, #96	; 0x60
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 f93c 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 8006c8a:	e01c      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	6859      	ldr	r1, [r3, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f000 f8d3 	bl	8006e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2140      	movs	r1, #64	; 0x40
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 f92c 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 8006caa:	e00c      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f000 f923 	bl	8006f02 <TIM_ITRx_SetConfig>
      break;
 8006cbc:	e003      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc2:	e000      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a34      	ldr	r2, [pc, #208]	; (8006e28 <TIM_Base_SetConfig+0xe4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00f      	beq.n	8006d7c <TIM_Base_SetConfig+0x38>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d62:	d00b      	beq.n	8006d7c <TIM_Base_SetConfig+0x38>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a31      	ldr	r2, [pc, #196]	; (8006e2c <TIM_Base_SetConfig+0xe8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d007      	beq.n	8006d7c <TIM_Base_SetConfig+0x38>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a30      	ldr	r2, [pc, #192]	; (8006e30 <TIM_Base_SetConfig+0xec>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_Base_SetConfig+0x38>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a2f      	ldr	r2, [pc, #188]	; (8006e34 <TIM_Base_SetConfig+0xf0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d108      	bne.n	8006d8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a25      	ldr	r2, [pc, #148]	; (8006e28 <TIM_Base_SetConfig+0xe4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d01b      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9c:	d017      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a22      	ldr	r2, [pc, #136]	; (8006e2c <TIM_Base_SetConfig+0xe8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a21      	ldr	r2, [pc, #132]	; (8006e30 <TIM_Base_SetConfig+0xec>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00f      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a20      	ldr	r2, [pc, #128]	; (8006e34 <TIM_Base_SetConfig+0xf0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1f      	ldr	r2, [pc, #124]	; (8006e38 <TIM_Base_SetConfig+0xf4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d007      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <TIM_Base_SetConfig+0xf8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_Base_SetConfig+0x8a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a1d      	ldr	r2, [pc, #116]	; (8006e40 <TIM_Base_SetConfig+0xfc>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d108      	bne.n	8006de0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a08      	ldr	r2, [pc, #32]	; (8006e28 <TIM_Base_SetConfig+0xe4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d103      	bne.n	8006e14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	615a      	str	r2, [r3, #20]
}
 8006e1a:	bf00      	nop
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800
 8006e34:	40000c00 	.word	0x40000c00
 8006e38:	40014000 	.word	0x40014000
 8006e3c:	40014400 	.word	0x40014400
 8006e40:	40014800 	.word	0x40014800

08006e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f023 0201 	bic.w	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 030a 	bic.w	r3, r3, #10
 8006e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b087      	sub	sp, #28
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f023 0210 	bic.w	r2, r3, #16
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	031b      	lsls	r3, r3, #12
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f043 0307 	orr.w	r3, r3, #7
 8006f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	609a      	str	r2, [r3, #8]
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	021a      	lsls	r2, r3, #8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	609a      	str	r2, [r3, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e050      	b.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1c      	ldr	r2, [pc, #112]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d018      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fdc:	d013      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a18      	ldr	r2, [pc, #96]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00e      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a16      	ldr	r2, [pc, #88]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a15      	ldr	r2, [pc, #84]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a13      	ldr	r2, [pc, #76]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d10c      	bne.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800700c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	4313      	orrs	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40010000 	.word	0x40010000
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800
 800704c:	40000c00 	.word	0x40000c00
 8007050:	40014000 	.word	0x40014000

08007054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e03f      	b.n	800710e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7fb fa02 	bl	80024ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2224      	movs	r2, #36	; 0x24
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fffd 	bl	80080c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695a      	ldr	r2, [r3, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	4613      	mov	r3, r2
 8007122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b20      	cmp	r3, #32
 800712e:	d130      	bne.n	8007192 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_UART_Transmit_IT+0x26>
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e029      	b.n	8007194 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007146:	2b01      	cmp	r3, #1
 8007148:	d101      	bne.n	800714e <HAL_UART_Transmit_IT+0x38>
 800714a:	2302      	movs	r3, #2
 800714c:	e022      	b.n	8007194 <HAL_UART_Transmit_IT+0x7e>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	88fa      	ldrh	r2, [r7, #6]
 8007166:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2221      	movs	r2, #33	; 0x21
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800718c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e000      	b.n	8007194 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007192:	2302      	movs	r3, #2
  }
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d11d      	bne.n	80071f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_UART_Receive_IT+0x26>
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e016      	b.n	80071f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_UART_Receive_IT+0x38>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e00f      	b.n	80071f8 <HAL_UART_Receive_IT+0x58>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	461a      	mov	r2, r3
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fcc9 	bl	8007b84 <UART_Start_Receive_IT>
 80071f2:	4603      	mov	r3, r0
 80071f4:	e000      	b.n	80071f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80071f6:	2302      	movs	r3, #2
  }
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4613      	mov	r3, r2
 800720c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b20      	cmp	r3, #32
 8007218:	d11d      	bne.n	8007256 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_UART_Receive_DMA+0x26>
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e016      	b.n	8007258 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_UART_Receive_DMA+0x38>
 8007234:	2302      	movs	r3, #2
 8007236:	e00f      	b.n	8007258 <HAL_UART_Receive_DMA+0x58>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	461a      	mov	r2, r3
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fcd7 	bl	8007c00 <UART_Start_Receive_DMA>
 8007252:	4603      	mov	r3, r0
 8007254:	e000      	b.n	8007258 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007256:	2302      	movs	r3, #2
  }
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b0a0      	sub	sp, #128	; 0x80
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800727a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800727e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007288:	66ba      	str	r2, [r7, #104]	; 0x68
 800728a:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800728e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3314      	adds	r3, #20
 80072a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80072ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072bc:	657a      	str	r2, [r7, #84]	; 0x54
 80072be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80072c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d119      	bne.n	800730c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	330c      	adds	r3, #12
 80072de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	f023 0310 	bic.w	r3, r3, #16
 80072ee:	677b      	str	r3, [r7, #116]	; 0x74
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	330c      	adds	r3, #12
 80072f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80072f8:	643a      	str	r2, [r7, #64]	; 0x40
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e5      	bne.n	80072d8 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b80      	cmp	r3, #128	; 0x80
 8007318:	d136      	bne.n	8007388 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3314      	adds	r3, #20
 8007320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	61fb      	str	r3, [r7, #28]
   return(result);
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007330:	673b      	str	r3, [r7, #112]	; 0x70
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3314      	adds	r3, #20
 8007338:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800733a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800733c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007352:	2b00      	cmp	r3, #0
 8007354:	d018      	beq.n	8007388 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735a:	2200      	movs	r2, #0
 800735c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007362:	4618      	mov	r0, r3
 8007364:	f7fc ff38 	bl	80041d8 <HAL_DMA_Abort>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00c      	beq.n	8007388 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007372:	4618      	mov	r0, r3
 8007374:	f7fd f94c 	bl	8004610 <HAL_DMA_GetError>
 8007378:	4603      	mov	r3, r0
 800737a:	2b20      	cmp	r3, #32
 800737c:	d104      	bne.n	8007388 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2210      	movs	r2, #16
 8007382:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e052      	b.n	800742e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007392:	2b40      	cmp	r3, #64	; 0x40
 8007394:	d136      	bne.n	8007404 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3314      	adds	r3, #20
 800739c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3314      	adds	r3, #20
 80073b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073b6:	61ba      	str	r2, [r7, #24]
 80073b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6979      	ldr	r1, [r7, #20]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	613b      	str	r3, [r7, #16]
   return(result);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e5      	bne.n	8007396 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d018      	beq.n	8007404 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	2200      	movs	r2, #0
 80073d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fc fefa 	bl	80041d8 <HAL_DMA_Abort>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fd f90e 	bl	8004610 <HAL_DMA_GetError>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d104      	bne.n	8007404 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2210      	movs	r2, #16
 80073fe:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e014      	b.n	800742e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3780      	adds	r7, #128	; 0x80
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b0ba      	sub	sp, #232	; 0xe8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800745e:	2300      	movs	r3, #0
 8007460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007464:	2300      	movs	r3, #0
 8007466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800746a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10f      	bne.n	800749e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800747e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <HAL_UART_IRQHandler+0x66>
 800748a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fd57 	bl	8007f4a <UART_Receive_IT>
      return;
 800749c:	e256      	b.n	800794c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800749e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80de 	beq.w	8007664 <HAL_UART_IRQHandler+0x22c>
 80074a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80d1 	beq.w	8007664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <HAL_UART_IRQHandler+0xae>
 80074ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	f043 0201 	orr.w	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <HAL_UART_IRQHandler+0xd2>
 80074f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f043 0202 	orr.w	r2, r3, #2
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00b      	beq.n	800752e <HAL_UART_IRQHandler+0xf6>
 8007516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f043 0204 	orr.w	r2, r3, #4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800752e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d011      	beq.n	800755e <HAL_UART_IRQHandler+0x126>
 800753a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f043 0208 	orr.w	r2, r3, #8
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 81ed 	beq.w	8007942 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <HAL_UART_IRQHandler+0x14e>
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fce2 	bl	8007f4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007590:	2b40      	cmp	r3, #64	; 0x40
 8007592:	bf0c      	ite	eq
 8007594:	2301      	moveq	r3, #1
 8007596:	2300      	movne	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <HAL_UART_IRQHandler+0x17a>
 80075aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d04f      	beq.n	8007652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fbea 	bl	8007d8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d141      	bne.n	800764a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3314      	adds	r3, #20
 80075cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3314      	adds	r3, #20
 80075ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800760a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1d9      	bne.n	80075c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	2b00      	cmp	r3, #0
 8007618:	d013      	beq.n	8007642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	4a7d      	ldr	r2, [pc, #500]	; (8007814 <HAL_UART_IRQHandler+0x3dc>)
 8007620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	4618      	mov	r0, r3
 8007628:	f7fc fe46 	bl	80042b8 <HAL_DMA_Abort_IT>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d016      	beq.n	8007660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007640:	e00e      	b.n	8007660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fb f9ae 	bl	80029a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007648:	e00a      	b.n	8007660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fb f9aa 	bl	80029a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007650:	e006      	b.n	8007660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fb f9a6 	bl	80029a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800765e:	e170      	b.n	8007942 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	bf00      	nop
    return;
 8007662:	e16e      	b.n	8007942 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007668:	2b01      	cmp	r3, #1
 800766a:	f040 814a 	bne.w	8007902 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 8143 	beq.w	8007902 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800767c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 813c 	beq.w	8007902 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60bb      	str	r3, [r7, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	60bb      	str	r3, [r7, #8]
 800769e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b40      	cmp	r3, #64	; 0x40
 80076ac:	f040 80b4 	bne.w	8007818 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8140 	beq.w	8007946 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076ce:	429a      	cmp	r2, r3
 80076d0:	f080 8139 	bcs.w	8007946 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e6:	f000 8088 	beq.w	80077fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	330c      	adds	r3, #12
 80076f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800771a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800772e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1d9      	bne.n	80076ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3314      	adds	r3, #20
 800773c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007748:	f023 0301 	bic.w	r3, r3, #1
 800774c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3314      	adds	r3, #20
 8007756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800775a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800775e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800776c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e1      	bne.n	8007736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3314      	adds	r3, #20
 8007778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3314      	adds	r3, #20
 8007792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800779c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e3      	bne.n	8007772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330c      	adds	r3, #12
 80077be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ca:	f023 0310 	bic.w	r3, r3, #16
 80077ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	330c      	adds	r3, #12
 80077d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80077de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e3      	bne.n	80077b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fc fcef 	bl	80041d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007802:	b29b      	uxth	r3, r3
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	b29b      	uxth	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f8b6 	bl	800797c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007810:	e099      	b.n	8007946 <HAL_UART_IRQHandler+0x50e>
 8007812:	bf00      	nop
 8007814:	08007e53 	.word	0x08007e53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007820:	b29b      	uxth	r3, r3
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 808b 	beq.w	800794a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8086 	beq.w	800794a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800784e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007862:	647a      	str	r2, [r7, #68]	; 0x44
 8007864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e3      	bne.n	800783e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3314      	adds	r3, #20
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	623b      	str	r3, [r7, #32]
   return(result);
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3314      	adds	r3, #20
 8007896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800789a:	633a      	str	r2, [r7, #48]	; 0x30
 800789c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e3      	bne.n	8007876 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	330c      	adds	r3, #12
 80078c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0310 	bic.w	r3, r3, #16
 80078d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078e0:	61fa      	str	r2, [r7, #28]
 80078e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	69b9      	ldr	r1, [r7, #24]
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	617b      	str	r3, [r7, #20]
   return(result);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e3      	bne.n	80078bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f83e 	bl	800797c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007900:	e023      	b.n	800794a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <HAL_UART_IRQHandler+0x4ea>
 800790e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 faad 	bl	8007e7a <UART_Transmit_IT>
    return;
 8007920:	e014      	b.n	800794c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00e      	beq.n	800794c <HAL_UART_IRQHandler+0x514>
 800792e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 faed 	bl	8007f1a <UART_EndTransmit_IT>
    return;
 8007940:	e004      	b.n	800794c <HAL_UART_IRQHandler+0x514>
    return;
 8007942:	bf00      	nop
 8007944:	e002      	b.n	800794c <HAL_UART_IRQHandler+0x514>
      return;
 8007946:	bf00      	nop
 8007948:	e000      	b.n	800794c <HAL_UART_IRQHandler+0x514>
      return;
 800794a:	bf00      	nop
  }
}
 800794c:	37e8      	adds	r7, #232	; 0xe8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop

08007954 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b09c      	sub	sp, #112	; 0x70
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d172      	bne.n	8007a96 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80079b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b2:	2200      	movs	r2, #0
 80079b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	330c      	adds	r3, #12
 80079bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	330c      	adds	r3, #12
 80079d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80079d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e5      	bne.n	80079b6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3314      	adds	r3, #20
 80079f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	667b      	str	r3, [r7, #100]	; 0x64
 8007a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3314      	adds	r3, #20
 8007a08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a0a:	647a      	str	r2, [r7, #68]	; 0x44
 8007a0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3314      	adds	r3, #20
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a34:	663b      	str	r3, [r7, #96]	; 0x60
 8007a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3314      	adds	r3, #20
 8007a3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e5      	bne.n	8007a1e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d119      	bne.n	8007a96 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f023 0310 	bic.w	r3, r3, #16
 8007a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a82:	61fa      	str	r2, [r7, #28]
 8007a84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	69b9      	ldr	r1, [r7, #24]
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d106      	bne.n	8007aac <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007aa6:	f7ff ff69 	bl	800797c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007aaa:	e002      	b.n	8007ab2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007aac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007aae:	f7ff ff51 	bl	8007954 <HAL_UART_RxCpltCallback>
}
 8007ab2:	bf00      	nop
 8007ab4:	3770      	adds	r7, #112	; 0x70
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d108      	bne.n	8007ae2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ad4:	085b      	lsrs	r3, r3, #1
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	4619      	mov	r1, r3
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f7ff ff4e 	bl	800797c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ae0:	e002      	b.n	8007ae8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff ff40 	bl	8007968 <HAL_UART_RxHalfCpltCallback>
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	bf0c      	ite	eq
 8007b10:	2301      	moveq	r3, #1
 8007b12:	2300      	movne	r3, #0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b21      	cmp	r3, #33	; 0x21
 8007b22:	d108      	bne.n	8007b36 <UART_DMAError+0x46>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d005      	beq.n	8007b36 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007b30:	68b8      	ldr	r0, [r7, #8]
 8007b32:	f000 f903 	bl	8007d3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	bf0c      	ite	eq
 8007b44:	2301      	moveq	r3, #1
 8007b46:	2300      	movne	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b22      	cmp	r3, #34	; 0x22
 8007b56:	d108      	bne.n	8007b6a <UART_DMAError+0x7a>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2200      	movs	r2, #0
 8007b62:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007b64:	68b8      	ldr	r0, [r7, #8]
 8007b66:	f000 f911 	bl	8007d8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	f043 0210 	orr.w	r2, r3, #16
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b76:	68b8      	ldr	r0, [r7, #8]
 8007b78:	f7fa ff14 	bl	80029a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	88fa      	ldrh	r2, [r7, #6]
 8007b9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	88fa      	ldrh	r2, [r7, #6]
 8007ba2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2222      	movs	r2, #34	; 0x22
 8007bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d007      	beq.n	8007bd2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695a      	ldr	r2, [r3, #20]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0201 	orr.w	r2, r2, #1
 8007be0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0220 	orr.w	r2, r2, #32
 8007bf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b098      	sub	sp, #96	; 0x60
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	88fa      	ldrh	r2, [r7, #6]
 8007c18:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2222      	movs	r2, #34	; 0x22
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	4a40      	ldr	r2, [pc, #256]	; (8007d30 <UART_Start_Receive_DMA+0x130>)
 8007c2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	4a3f      	ldr	r2, [pc, #252]	; (8007d34 <UART_Start_Receive_DMA+0x134>)
 8007c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	4a3e      	ldr	r2, [pc, #248]	; (8007d38 <UART_Start_Receive_DMA+0x138>)
 8007c3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	2200      	movs	r2, #0
 8007c46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c48:	f107 0308 	add.w	r3, r7, #8
 8007c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	f7fc fa62 	bl	8004128 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007c64:	2300      	movs	r3, #0
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	613b      	str	r3, [r7, #16]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	613b      	str	r3, [r7, #16]
 8007c78:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d019      	beq.n	8007cbe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	330c      	adds	r3, #12
 8007c90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	330c      	adds	r3, #12
 8007ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007caa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007cac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007cb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e5      	bne.n	8007c8a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3314      	adds	r3, #20
 8007cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	f043 0301 	orr.w	r3, r3, #1
 8007cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3314      	adds	r3, #20
 8007cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cde:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e5      	bne.n	8007cbe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3314      	adds	r3, #20
 8007cf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	617b      	str	r3, [r7, #20]
   return(result);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d08:	653b      	str	r3, [r7, #80]	; 0x50
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3314      	adds	r3, #20
 8007d10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d12:	627a      	str	r2, [r7, #36]	; 0x24
 8007d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6a39      	ldr	r1, [r7, #32]
 8007d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e5      	bne.n	8007cf2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3760      	adds	r7, #96	; 0x60
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	08007995 	.word	0x08007995
 8007d34:	08007abb 	.word	0x08007abb
 8007d38:	08007af1 	.word	0x08007af1

08007d3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b089      	sub	sp, #36	; 0x24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	330c      	adds	r3, #12
 8007d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	69fa      	ldr	r2, [r7, #28]
 8007d64:	61ba      	str	r2, [r7, #24]
 8007d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6979      	ldr	r1, [r7, #20]
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	613b      	str	r3, [r7, #16]
   return(result);
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e5      	bne.n	8007d44 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007d80:	bf00      	nop
 8007d82:	3724      	adds	r7, #36	; 0x24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b095      	sub	sp, #84	; 0x54
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007db4:	643a      	str	r2, [r7, #64]	; 0x40
 8007db6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3314      	adds	r3, #20
 8007dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f023 0301 	bic.w	r3, r3, #1
 8007dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3314      	adds	r3, #20
 8007de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e5      	bne.n	8007dc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d119      	bne.n	8007e38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	330c      	adds	r3, #12
 8007e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f023 0310 	bic.w	r3, r3, #16
 8007e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	330c      	adds	r3, #12
 8007e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e24:	61ba      	str	r2, [r7, #24]
 8007e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6979      	ldr	r1, [r7, #20]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	613b      	str	r3, [r7, #16]
   return(result);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e5      	bne.n	8007e04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e46:	bf00      	nop
 8007e48:	3754      	adds	r7, #84	; 0x54
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7fa fd99 	bl	80029a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e72:	bf00      	nop
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b085      	sub	sp, #20
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b21      	cmp	r3, #33	; 0x21
 8007e8c:	d13e      	bne.n	8007f0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e96:	d114      	bne.n	8007ec2 <UART_Transmit_IT+0x48>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d110      	bne.n	8007ec2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	1c9a      	adds	r2, r3, #2
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	621a      	str	r2, [r3, #32]
 8007ec0:	e008      	b.n	8007ed4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	1c59      	adds	r1, r3, #1
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	6211      	str	r1, [r2, #32]
 8007ecc:	781a      	ldrb	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10f      	bne.n	8007f08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ef6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e000      	b.n	8007f0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f0c:	2302      	movs	r3, #2
  }
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fa fd10 	bl	8002960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b08c      	sub	sp, #48	; 0x30
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b22      	cmp	r3, #34	; 0x22
 8007f5c:	f040 80ab 	bne.w	80080b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f68:	d117      	bne.n	8007f9a <UART_Receive_IT+0x50>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d113      	bne.n	8007f9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	1c9a      	adds	r2, r3, #2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	629a      	str	r2, [r3, #40]	; 0x28
 8007f98:	e026      	b.n	8007fe8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fac:	d007      	beq.n	8007fbe <UART_Receive_IT+0x74>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <UART_Receive_IT+0x82>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	e008      	b.n	8007fde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d15a      	bne.n	80080b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0220 	bic.w	r2, r2, #32
 800800a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800801a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	695a      	ldr	r2, [r3, #20]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 0201 	bic.w	r2, r2, #1
 800802a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008038:	2b01      	cmp	r3, #1
 800803a:	d135      	bne.n	80080a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	330c      	adds	r3, #12
 8008048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	613b      	str	r3, [r7, #16]
   return(result);
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f023 0310 	bic.w	r3, r3, #16
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	330c      	adds	r3, #12
 8008060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008062:	623a      	str	r2, [r7, #32]
 8008064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	69f9      	ldr	r1, [r7, #28]
 8008068:	6a3a      	ldr	r2, [r7, #32]
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e5      	bne.n	8008042 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b10      	cmp	r3, #16
 8008082:	d10a      	bne.n	800809a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fc6b 	bl	800797c <HAL_UARTEx_RxEventCallback>
 80080a6:	e002      	b.n	80080ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff fc53 	bl	8007954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	e002      	b.n	80080b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	e000      	b.n	80080b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080b6:	2302      	movs	r3, #2
  }
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3730      	adds	r7, #48	; 0x30
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080c4:	b0c0      	sub	sp, #256	; 0x100
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080dc:	68d9      	ldr	r1, [r3, #12]
 80080de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	ea40 0301 	orr.w	r3, r0, r1
 80080e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	431a      	orrs	r2, r3
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008118:	f021 010c 	bic.w	r1, r1, #12
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008126:	430b      	orrs	r3, r1
 8008128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800812a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813a:	6999      	ldr	r1, [r3, #24]
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	ea40 0301 	orr.w	r3, r0, r1
 8008146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	4b8f      	ldr	r3, [pc, #572]	; (800838c <UART_SetConfig+0x2cc>)
 8008150:	429a      	cmp	r2, r3
 8008152:	d005      	beq.n	8008160 <UART_SetConfig+0xa0>
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b8d      	ldr	r3, [pc, #564]	; (8008390 <UART_SetConfig+0x2d0>)
 800815c:	429a      	cmp	r2, r3
 800815e:	d104      	bne.n	800816a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008160:	f7fe f8fc 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 8008164:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008168:	e003      	b.n	8008172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800816a:	f7fe f8e3 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 800816e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817c:	f040 810c 	bne.w	8008398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008184:	2200      	movs	r2, #0
 8008186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800818a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800818e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008192:	4622      	mov	r2, r4
 8008194:	462b      	mov	r3, r5
 8008196:	1891      	adds	r1, r2, r2
 8008198:	65b9      	str	r1, [r7, #88]	; 0x58
 800819a:	415b      	adcs	r3, r3
 800819c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800819e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081a2:	4621      	mov	r1, r4
 80081a4:	eb12 0801 	adds.w	r8, r2, r1
 80081a8:	4629      	mov	r1, r5
 80081aa:	eb43 0901 	adc.w	r9, r3, r1
 80081ae:	f04f 0200 	mov.w	r2, #0
 80081b2:	f04f 0300 	mov.w	r3, #0
 80081b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081c2:	4690      	mov	r8, r2
 80081c4:	4699      	mov	r9, r3
 80081c6:	4623      	mov	r3, r4
 80081c8:	eb18 0303 	adds.w	r3, r8, r3
 80081cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081d0:	462b      	mov	r3, r5
 80081d2:	eb49 0303 	adc.w	r3, r9, r3
 80081d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081ee:	460b      	mov	r3, r1
 80081f0:	18db      	adds	r3, r3, r3
 80081f2:	653b      	str	r3, [r7, #80]	; 0x50
 80081f4:	4613      	mov	r3, r2
 80081f6:	eb42 0303 	adc.w	r3, r2, r3
 80081fa:	657b      	str	r3, [r7, #84]	; 0x54
 80081fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008204:	f7f8 f894 	bl	8000330 <__aeabi_uldivmod>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4b61      	ldr	r3, [pc, #388]	; (8008394 <UART_SetConfig+0x2d4>)
 800820e:	fba3 2302 	umull	r2, r3, r3, r2
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	011c      	lsls	r4, r3, #4
 8008216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800821a:	2200      	movs	r2, #0
 800821c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008220:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008228:	4642      	mov	r2, r8
 800822a:	464b      	mov	r3, r9
 800822c:	1891      	adds	r1, r2, r2
 800822e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008230:	415b      	adcs	r3, r3
 8008232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008238:	4641      	mov	r1, r8
 800823a:	eb12 0a01 	adds.w	sl, r2, r1
 800823e:	4649      	mov	r1, r9
 8008240:	eb43 0b01 	adc.w	fp, r3, r1
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	f04f 0300 	mov.w	r3, #0
 800824c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008258:	4692      	mov	sl, r2
 800825a:	469b      	mov	fp, r3
 800825c:	4643      	mov	r3, r8
 800825e:	eb1a 0303 	adds.w	r3, sl, r3
 8008262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008266:	464b      	mov	r3, r9
 8008268:	eb4b 0303 	adc.w	r3, fp, r3
 800826c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800827c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008284:	460b      	mov	r3, r1
 8008286:	18db      	adds	r3, r3, r3
 8008288:	643b      	str	r3, [r7, #64]	; 0x40
 800828a:	4613      	mov	r3, r2
 800828c:	eb42 0303 	adc.w	r3, r2, r3
 8008290:	647b      	str	r3, [r7, #68]	; 0x44
 8008292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800829a:	f7f8 f849 	bl	8000330 <__aeabi_uldivmod>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	4b3b      	ldr	r3, [pc, #236]	; (8008394 <UART_SetConfig+0x2d4>)
 80082a6:	fba3 2301 	umull	r2, r3, r3, r1
 80082aa:	095b      	lsrs	r3, r3, #5
 80082ac:	2264      	movs	r2, #100	; 0x64
 80082ae:	fb02 f303 	mul.w	r3, r2, r3
 80082b2:	1acb      	subs	r3, r1, r3
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082ba:	4b36      	ldr	r3, [pc, #216]	; (8008394 <UART_SetConfig+0x2d4>)
 80082bc:	fba3 2302 	umull	r2, r3, r3, r2
 80082c0:	095b      	lsrs	r3, r3, #5
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082c8:	441c      	add	r4, r3
 80082ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	1891      	adds	r1, r2, r2
 80082e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80082e4:	415b      	adcs	r3, r3
 80082e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082ec:	4641      	mov	r1, r8
 80082ee:	1851      	adds	r1, r2, r1
 80082f0:	6339      	str	r1, [r7, #48]	; 0x30
 80082f2:	4649      	mov	r1, r9
 80082f4:	414b      	adcs	r3, r1
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008304:	4659      	mov	r1, fp
 8008306:	00cb      	lsls	r3, r1, #3
 8008308:	4651      	mov	r1, sl
 800830a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800830e:	4651      	mov	r1, sl
 8008310:	00ca      	lsls	r2, r1, #3
 8008312:	4610      	mov	r0, r2
 8008314:	4619      	mov	r1, r3
 8008316:	4603      	mov	r3, r0
 8008318:	4642      	mov	r2, r8
 800831a:	189b      	adds	r3, r3, r2
 800831c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008320:	464b      	mov	r3, r9
 8008322:	460a      	mov	r2, r1
 8008324:	eb42 0303 	adc.w	r3, r2, r3
 8008328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008338:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800833c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008340:	460b      	mov	r3, r1
 8008342:	18db      	adds	r3, r3, r3
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
 8008346:	4613      	mov	r3, r2
 8008348:	eb42 0303 	adc.w	r3, r2, r3
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008356:	f7f7 ffeb 	bl	8000330 <__aeabi_uldivmod>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <UART_SetConfig+0x2d4>)
 8008360:	fba3 1302 	umull	r1, r3, r3, r2
 8008364:	095b      	lsrs	r3, r3, #5
 8008366:	2164      	movs	r1, #100	; 0x64
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	3332      	adds	r3, #50	; 0x32
 8008372:	4a08      	ldr	r2, [pc, #32]	; (8008394 <UART_SetConfig+0x2d4>)
 8008374:	fba2 2303 	umull	r2, r3, r2, r3
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	f003 0207 	and.w	r2, r3, #7
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4422      	add	r2, r4
 8008386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008388:	e105      	b.n	8008596 <UART_SetConfig+0x4d6>
 800838a:	bf00      	nop
 800838c:	40011000 	.word	0x40011000
 8008390:	40011400 	.word	0x40011400
 8008394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800839c:	2200      	movs	r2, #0
 800839e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083aa:	4642      	mov	r2, r8
 80083ac:	464b      	mov	r3, r9
 80083ae:	1891      	adds	r1, r2, r2
 80083b0:	6239      	str	r1, [r7, #32]
 80083b2:	415b      	adcs	r3, r3
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
 80083b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ba:	4641      	mov	r1, r8
 80083bc:	1854      	adds	r4, r2, r1
 80083be:	4649      	mov	r1, r9
 80083c0:	eb43 0501 	adc.w	r5, r3, r1
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	00eb      	lsls	r3, r5, #3
 80083ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083d2:	00e2      	lsls	r2, r4, #3
 80083d4:	4614      	mov	r4, r2
 80083d6:	461d      	mov	r5, r3
 80083d8:	4643      	mov	r3, r8
 80083da:	18e3      	adds	r3, r4, r3
 80083dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083e0:	464b      	mov	r3, r9
 80083e2:	eb45 0303 	adc.w	r3, r5, r3
 80083e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008406:	4629      	mov	r1, r5
 8008408:	008b      	lsls	r3, r1, #2
 800840a:	4621      	mov	r1, r4
 800840c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008410:	4621      	mov	r1, r4
 8008412:	008a      	lsls	r2, r1, #2
 8008414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008418:	f7f7 ff8a 	bl	8000330 <__aeabi_uldivmod>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4b60      	ldr	r3, [pc, #384]	; (80085a4 <UART_SetConfig+0x4e4>)
 8008422:	fba3 2302 	umull	r2, r3, r3, r2
 8008426:	095b      	lsrs	r3, r3, #5
 8008428:	011c      	lsls	r4, r3, #4
 800842a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800842e:	2200      	movs	r2, #0
 8008430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008434:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800843c:	4642      	mov	r2, r8
 800843e:	464b      	mov	r3, r9
 8008440:	1891      	adds	r1, r2, r2
 8008442:	61b9      	str	r1, [r7, #24]
 8008444:	415b      	adcs	r3, r3
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800844c:	4641      	mov	r1, r8
 800844e:	1851      	adds	r1, r2, r1
 8008450:	6139      	str	r1, [r7, #16]
 8008452:	4649      	mov	r1, r9
 8008454:	414b      	adcs	r3, r1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	f04f 0200 	mov.w	r2, #0
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008464:	4659      	mov	r1, fp
 8008466:	00cb      	lsls	r3, r1, #3
 8008468:	4651      	mov	r1, sl
 800846a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800846e:	4651      	mov	r1, sl
 8008470:	00ca      	lsls	r2, r1, #3
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	4603      	mov	r3, r0
 8008478:	4642      	mov	r2, r8
 800847a:	189b      	adds	r3, r3, r2
 800847c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008480:	464b      	mov	r3, r9
 8008482:	460a      	mov	r2, r1
 8008484:	eb42 0303 	adc.w	r3, r2, r3
 8008488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	67bb      	str	r3, [r7, #120]	; 0x78
 8008496:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084a4:	4649      	mov	r1, r9
 80084a6:	008b      	lsls	r3, r1, #2
 80084a8:	4641      	mov	r1, r8
 80084aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084ae:	4641      	mov	r1, r8
 80084b0:	008a      	lsls	r2, r1, #2
 80084b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084b6:	f7f7 ff3b 	bl	8000330 <__aeabi_uldivmod>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4b39      	ldr	r3, [pc, #228]	; (80085a4 <UART_SetConfig+0x4e4>)
 80084c0:	fba3 1302 	umull	r1, r3, r3, r2
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	2164      	movs	r1, #100	; 0x64
 80084c8:	fb01 f303 	mul.w	r3, r1, r3
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	3332      	adds	r3, #50	; 0x32
 80084d2:	4a34      	ldr	r2, [pc, #208]	; (80085a4 <UART_SetConfig+0x4e4>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084de:	441c      	add	r4, r3
 80084e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084e4:	2200      	movs	r2, #0
 80084e6:	673b      	str	r3, [r7, #112]	; 0x70
 80084e8:	677a      	str	r2, [r7, #116]	; 0x74
 80084ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084ee:	4642      	mov	r2, r8
 80084f0:	464b      	mov	r3, r9
 80084f2:	1891      	adds	r1, r2, r2
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	415b      	adcs	r3, r3
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084fe:	4641      	mov	r1, r8
 8008500:	1851      	adds	r1, r2, r1
 8008502:	6039      	str	r1, [r7, #0]
 8008504:	4649      	mov	r1, r9
 8008506:	414b      	adcs	r3, r1
 8008508:	607b      	str	r3, [r7, #4]
 800850a:	f04f 0200 	mov.w	r2, #0
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008516:	4659      	mov	r1, fp
 8008518:	00cb      	lsls	r3, r1, #3
 800851a:	4651      	mov	r1, sl
 800851c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008520:	4651      	mov	r1, sl
 8008522:	00ca      	lsls	r2, r1, #3
 8008524:	4610      	mov	r0, r2
 8008526:	4619      	mov	r1, r3
 8008528:	4603      	mov	r3, r0
 800852a:	4642      	mov	r2, r8
 800852c:	189b      	adds	r3, r3, r2
 800852e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008530:	464b      	mov	r3, r9
 8008532:	460a      	mov	r2, r1
 8008534:	eb42 0303 	adc.w	r3, r2, r3
 8008538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800853a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	663b      	str	r3, [r7, #96]	; 0x60
 8008544:	667a      	str	r2, [r7, #100]	; 0x64
 8008546:	f04f 0200 	mov.w	r2, #0
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008552:	4649      	mov	r1, r9
 8008554:	008b      	lsls	r3, r1, #2
 8008556:	4641      	mov	r1, r8
 8008558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800855c:	4641      	mov	r1, r8
 800855e:	008a      	lsls	r2, r1, #2
 8008560:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008564:	f7f7 fee4 	bl	8000330 <__aeabi_uldivmod>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <UART_SetConfig+0x4e4>)
 800856e:	fba3 1302 	umull	r1, r3, r3, r2
 8008572:	095b      	lsrs	r3, r3, #5
 8008574:	2164      	movs	r1, #100	; 0x64
 8008576:	fb01 f303 	mul.w	r3, r1, r3
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	3332      	adds	r3, #50	; 0x32
 8008580:	4a08      	ldr	r2, [pc, #32]	; (80085a4 <UART_SetConfig+0x4e4>)
 8008582:	fba2 2303 	umull	r2, r3, r2, r3
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	f003 020f 	and.w	r2, r3, #15
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4422      	add	r2, r4
 8008594:	609a      	str	r2, [r3, #8]
}
 8008596:	bf00      	nop
 8008598:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800859c:	46bd      	mov	sp, r7
 800859e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a2:	bf00      	nop
 80085a4:	51eb851f 	.word	0x51eb851f

080085a8 <__NVIC_SetPriority>:
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	db0a      	blt.n	80085d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	490c      	ldr	r1, [pc, #48]	; (80085f4 <__NVIC_SetPriority+0x4c>)
 80085c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085c6:	0112      	lsls	r2, r2, #4
 80085c8:	b2d2      	uxtb	r2, r2
 80085ca:	440b      	add	r3, r1
 80085cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80085d0:	e00a      	b.n	80085e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	4908      	ldr	r1, [pc, #32]	; (80085f8 <__NVIC_SetPriority+0x50>)
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	3b04      	subs	r3, #4
 80085e0:	0112      	lsls	r2, r2, #4
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	440b      	add	r3, r1
 80085e6:	761a      	strb	r2, [r3, #24]
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	e000e100 	.word	0xe000e100
 80085f8:	e000ed00 	.word	0xe000ed00

080085fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008600:	2100      	movs	r1, #0
 8008602:	f06f 0004 	mvn.w	r0, #4
 8008606:	f7ff ffcf 	bl	80085a8 <__NVIC_SetPriority>
#endif
}
 800860a:	bf00      	nop
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008616:	f3ef 8305 	mrs	r3, IPSR
 800861a:	603b      	str	r3, [r7, #0]
  return(result);
 800861c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008622:	f06f 0305 	mvn.w	r3, #5
 8008626:	607b      	str	r3, [r7, #4]
 8008628:	e00c      	b.n	8008644 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <osKernelInitialize+0x44>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d105      	bne.n	800863e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008632:	4b08      	ldr	r3, [pc, #32]	; (8008654 <osKernelInitialize+0x44>)
 8008634:	2201      	movs	r2, #1
 8008636:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008638:	2300      	movs	r3, #0
 800863a:	607b      	str	r3, [r7, #4]
 800863c:	e002      	b.n	8008644 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295
 8008642:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008644:	687b      	ldr	r3, [r7, #4]
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20001958 	.word	0x20001958

08008658 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800865e:	f3ef 8305 	mrs	r3, IPSR
 8008662:	603b      	str	r3, [r7, #0]
  return(result);
 8008664:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <osKernelStart+0x1a>
    stat = osErrorISR;
 800866a:	f06f 0305 	mvn.w	r3, #5
 800866e:	607b      	str	r3, [r7, #4]
 8008670:	e010      	b.n	8008694 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008672:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <osKernelStart+0x48>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d109      	bne.n	800868e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800867a:	f7ff ffbf 	bl	80085fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800867e:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <osKernelStart+0x48>)
 8008680:	2202      	movs	r2, #2
 8008682:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008684:	f001 ff50 	bl	800a528 <vTaskStartScheduler>
      stat = osOK;
 8008688:	2300      	movs	r3, #0
 800868a:	607b      	str	r3, [r7, #4]
 800868c:	e002      	b.n	8008694 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800868e:	f04f 33ff 	mov.w	r3, #4294967295
 8008692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008694:	687b      	ldr	r3, [r7, #4]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20001958 	.word	0x20001958

080086a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08e      	sub	sp, #56	; 0x38
 80086a8:	af04      	add	r7, sp, #16
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086b4:	f3ef 8305 	mrs	r3, IPSR
 80086b8:	617b      	str	r3, [r7, #20]
  return(result);
 80086ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d17e      	bne.n	80087be <osThreadNew+0x11a>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d07b      	beq.n	80087be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80086c6:	2380      	movs	r3, #128	; 0x80
 80086c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80086ca:	2318      	movs	r3, #24
 80086cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80086d2:	f04f 33ff 	mov.w	r3, #4294967295
 80086d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d045      	beq.n	800876a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <osThreadNew+0x48>
        name = attr->name;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <osThreadNew+0x6e>
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	2b38      	cmp	r3, #56	; 0x38
 8008704:	d805      	bhi.n	8008712 <osThreadNew+0x6e>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <osThreadNew+0x72>
        return (NULL);
 8008712:	2300      	movs	r3, #0
 8008714:	e054      	b.n	80087c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	089b      	lsrs	r3, r3, #2
 8008724:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00e      	beq.n	800874c <osThreadNew+0xa8>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2bbb      	cmp	r3, #187	; 0xbb
 8008734:	d90a      	bls.n	800874c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800873a:	2b00      	cmp	r3, #0
 800873c:	d006      	beq.n	800874c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <osThreadNew+0xa8>
        mem = 1;
 8008746:	2301      	movs	r3, #1
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	e010      	b.n	800876e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10c      	bne.n	800876e <osThreadNew+0xca>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d108      	bne.n	800876e <osThreadNew+0xca>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d104      	bne.n	800876e <osThreadNew+0xca>
          mem = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	e001      	b.n	800876e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d110      	bne.n	8008796 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800877c:	9202      	str	r2, [sp, #8]
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6a3a      	ldr	r2, [r7, #32]
 8008788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f001 fce0 	bl	800a150 <xTaskCreateStatic>
 8008790:	4603      	mov	r3, r0
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	e013      	b.n	80087be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d110      	bne.n	80087be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	f107 0310 	add.w	r3, r7, #16
 80087a4:	9301      	str	r3, [sp, #4]
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f001 fd2b 	bl	800a20a <xTaskCreate>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d001      	beq.n	80087be <osThreadNew+0x11a>
            hTask = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80087be:	693b      	ldr	r3, [r7, #16]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3728      	adds	r7, #40	; 0x28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <osThreadFlagsSet+0x1a>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da03      	bge.n	80087ea <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80087e2:	f06f 0303 	mvn.w	r3, #3
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e035      	b.n	8008856 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80087ea:	f04f 33ff 	mov.w	r3, #4294967295
 80087ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087f0:	f3ef 8305 	mrs	r3, IPSR
 80087f4:	613b      	str	r3, [r7, #16]
  return(result);
 80087f6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d01f      	beq.n	800883c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008800:	f107 0308 	add.w	r3, r7, #8
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	2300      	movs	r3, #0
 8008808:	2201      	movs	r2, #1
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6978      	ldr	r0, [r7, #20]
 800880e:	f002 fd9f 	bl	800b350 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008812:	f107 030c 	add.w	r3, r7, #12
 8008816:	2200      	movs	r2, #0
 8008818:	9200      	str	r2, [sp, #0]
 800881a:	2200      	movs	r2, #0
 800881c:	2100      	movs	r1, #0
 800881e:	6978      	ldr	r0, [r7, #20]
 8008820:	f002 fd96 	bl	800b350 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d015      	beq.n	8008856 <osThreadFlagsSet+0x8e>
 800882a:	4b0d      	ldr	r3, [pc, #52]	; (8008860 <osThreadFlagsSet+0x98>)
 800882c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	e00c      	b.n	8008856 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800883c:	2300      	movs	r3, #0
 800883e:	2201      	movs	r2, #1
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6978      	ldr	r0, [r7, #20]
 8008844:	f002 fcc6 	bl	800b1d4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008848:	f107 030c 	add.w	r3, r7, #12
 800884c:	2200      	movs	r2, #0
 800884e:	2100      	movs	r1, #0
 8008850:	6978      	ldr	r0, [r7, #20]
 8008852:	f002 fcbf 	bl	800b1d4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8008856:	68fb      	ldr	r3, [r7, #12]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	e000ed04 	.word	0xe000ed04

08008864 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008864:	b580      	push	{r7, lr}
 8008866:	b08c      	sub	sp, #48	; 0x30
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008870:	f3ef 8305 	mrs	r3, IPSR
 8008874:	617b      	str	r3, [r7, #20]
  return(result);
 8008876:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800887c:	f06f 0305 	mvn.w	r3, #5
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008882:	e06b      	b.n	800895c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	da03      	bge.n	8008892 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800888a:	f06f 0303 	mvn.w	r3, #3
 800888e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008890:	e064      	b.n	800895c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	62bb      	str	r3, [r7, #40]	; 0x28
 80088a0:	e001      	b.n	80088a6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80088ae:	f001 ff57 	bl	800a760 <xTaskGetTickCount>
 80088b2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80088b4:	f107 0210 	add.w	r2, r7, #16
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088bc:	2000      	movs	r0, #0
 80088be:	f002 fc29 	bl	800b114 <xTaskNotifyWait>
 80088c2:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d137      	bne.n	800893a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80088ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4013      	ands	r3, r2
 80088d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088d6:	4313      	orrs	r3, r2
 80088d8:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00c      	beq.n	80088fe <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e8:	4013      	ands	r3, r2
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d032      	beq.n	8008956 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10f      	bne.n	8008916 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80088f6:	f06f 0302 	mvn.w	r3, #2
 80088fa:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80088fc:	e02e      	b.n	800895c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	4013      	ands	r3, r2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d128      	bne.n	800895a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d103      	bne.n	8008916 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800890e:	f06f 0302 	mvn.w	r3, #2
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008914:	e022      	b.n	800895c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008916:	f001 ff23 	bl	800a760 <xTaskGetTickCount>
 800891a:	4602      	mov	r2, r0
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	429a      	cmp	r2, r3
 8008928:	d902      	bls.n	8008930 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
 800892e:	e00e      	b.n	800894e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
 8008938:	e009      	b.n	800894e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008940:	f06f 0302 	mvn.w	r3, #2
 8008944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008946:	e002      	b.n	800894e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008948:	f06f 0301 	mvn.w	r3, #1
 800894c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1af      	bne.n	80088b4 <osThreadFlagsWait+0x50>
 8008954:	e002      	b.n	800895c <osThreadFlagsWait+0xf8>
            break;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <osThreadFlagsWait+0xf8>
            break;
 800895a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800895e:	4618      	mov	r0, r3
 8008960:	3730      	adds	r7, #48	; 0x30
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800896e:	f3ef 8305 	mrs	r3, IPSR
 8008972:	60bb      	str	r3, [r7, #8]
  return(result);
 8008974:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <osDelay+0x1c>
    stat = osErrorISR;
 800897a:	f06f 0305 	mvn.w	r3, #5
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	e007      	b.n	8008992 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <osDelay+0x2c>
      vTaskDelay(ticks);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fd97 	bl	800a4c0 <vTaskDelay>
    }
  }

  return (stat);
 8008992:	68fb      	ldr	r3, [r7, #12]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80089a4:	2300      	movs	r3, #0
 80089a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089a8:	f3ef 8305 	mrs	r3, IPSR
 80089ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80089ae:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d174      	bne.n	8008a9e <osMutexNew+0x102>
    if (attr != NULL) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <osMutexNew+0x26>
      type = attr->attr_bits;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	61bb      	str	r3, [r7, #24]
 80089c0:	e001      	b.n	80089c6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <osMutexNew+0x3a>
      rmtx = 1U;
 80089d0:	2301      	movs	r3, #1
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e001      	b.n	80089da <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d15c      	bne.n	8008a9e <osMutexNew+0x102>
      mem = -1;
 80089e4:	f04f 33ff 	mov.w	r3, #4294967295
 80089e8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d015      	beq.n	8008a1c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <osMutexNew+0x6a>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	2b4f      	cmp	r3, #79	; 0x4f
 80089fe:	d902      	bls.n	8008a06 <osMutexNew+0x6a>
          mem = 1;
 8008a00:	2301      	movs	r3, #1
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	e00c      	b.n	8008a20 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d108      	bne.n	8008a20 <osMutexNew+0x84>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d104      	bne.n	8008a20 <osMutexNew+0x84>
            mem = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	e001      	b.n	8008a20 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d112      	bne.n	8008a4c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	4619      	mov	r1, r3
 8008a32:	2004      	movs	r0, #4
 8008a34:	f000 fc37 	bl	80092a6 <xQueueCreateMutexStatic>
 8008a38:	61f8      	str	r0, [r7, #28]
 8008a3a:	e016      	b.n	8008a6a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	4619      	mov	r1, r3
 8008a42:	2001      	movs	r0, #1
 8008a44:	f000 fc2f 	bl	80092a6 <xQueueCreateMutexStatic>
 8008a48:	61f8      	str	r0, [r7, #28]
 8008a4a:	e00e      	b.n	8008a6a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008a58:	2004      	movs	r0, #4
 8008a5a:	f000 fc0c 	bl	8009276 <xQueueCreateMutex>
 8008a5e:	61f8      	str	r0, [r7, #28]
 8008a60:	e003      	b.n	8008a6a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008a62:	2001      	movs	r0, #1
 8008a64:	f000 fc07 	bl	8009276 <xQueueCreateMutex>
 8008a68:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00c      	beq.n	8008a8a <osMutexNew+0xee>
        if (attr != NULL) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <osMutexNew+0xe2>
          name = attr->name;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e001      	b.n	8008a82 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008a82:	68f9      	ldr	r1, [r7, #12]
 8008a84:	69f8      	ldr	r0, [r7, #28]
 8008a86:	f001 fadb 	bl	800a040 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d006      	beq.n	8008a9e <osMutexNew+0x102>
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	f043 0301 	orr.w	r3, r3, #1
 8008a9c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008a9e:	69fb      	ldr	r3, [r7, #28]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3720      	adds	r7, #32
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f023 0301 	bic.w	r3, r3, #1
 8008ab8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ac6:	f3ef 8305 	mrs	r3, IPSR
 8008aca:	60bb      	str	r3, [r7, #8]
  return(result);
 8008acc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008ad2:	f06f 0305 	mvn.w	r3, #5
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e02c      	b.n	8008b34 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d103      	bne.n	8008ae8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008ae0:	f06f 0303 	mvn.w	r3, #3
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	e025      	b.n	8008b34 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d011      	beq.n	8008b12 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6938      	ldr	r0, [r7, #16]
 8008af2:	f000 fc27 	bl	8009344 <xQueueTakeMutexRecursive>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d01b      	beq.n	8008b34 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008b02:	f06f 0301 	mvn.w	r3, #1
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e014      	b.n	8008b34 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008b0a:	f06f 0302 	mvn.w	r3, #2
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e010      	b.n	8008b34 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6938      	ldr	r0, [r7, #16]
 8008b16:	f000 ffbb 	bl	8009a90 <xQueueSemaphoreTake>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d009      	beq.n	8008b34 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008b26:	f06f 0301 	mvn.w	r3, #1
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e002      	b.n	8008b34 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008b2e:	f06f 0302 	mvn.w	r3, #2
 8008b32:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008b34:	697b      	ldr	r3, [r7, #20]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f023 0301 	bic.w	r3, r3, #1
 8008b4c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b5a:	f3ef 8305 	mrs	r3, IPSR
 8008b5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b60:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <osMutexRelease+0x30>
    stat = osErrorISR;
 8008b66:	f06f 0305 	mvn.w	r3, #5
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	e01f      	b.n	8008bae <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d103      	bne.n	8008b7c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008b74:	f06f 0303 	mvn.w	r3, #3
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	e018      	b.n	8008bae <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d009      	beq.n	8008b96 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008b82:	6938      	ldr	r0, [r7, #16]
 8008b84:	f000 fbaa 	bl	80092dc <xQueueGiveMutexRecursive>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d00f      	beq.n	8008bae <osMutexRelease+0x70>
        stat = osErrorResource;
 8008b8e:	f06f 0302 	mvn.w	r3, #2
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	e00b      	b.n	8008bae <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008b96:	2300      	movs	r3, #0
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	6938      	ldr	r0, [r7, #16]
 8008b9e:	f000 fc71 	bl	8009484 <xQueueGenericSend>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d002      	beq.n	8008bae <osMutexRelease+0x70>
        stat = osErrorResource;
 8008ba8:	f06f 0302 	mvn.w	r3, #2
 8008bac:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008bae:	697b      	ldr	r3, [r7, #20]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08a      	sub	sp, #40	; 0x28
 8008bbc:	af02      	add	r7, sp, #8
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc8:	f3ef 8305 	mrs	r3, IPSR
 8008bcc:	613b      	str	r3, [r7, #16]
  return(result);
 8008bce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d175      	bne.n	8008cc0 <osSemaphoreNew+0x108>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d072      	beq.n	8008cc0 <osSemaphoreNew+0x108>
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d86e      	bhi.n	8008cc0 <osSemaphoreNew+0x108>
    mem = -1;
 8008be2:	f04f 33ff 	mov.w	r3, #4294967295
 8008be6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d015      	beq.n	8008c1a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d006      	beq.n	8008c04 <osSemaphoreNew+0x4c>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	2b4f      	cmp	r3, #79	; 0x4f
 8008bfc:	d902      	bls.n	8008c04 <osSemaphoreNew+0x4c>
        mem = 1;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e00c      	b.n	8008c1e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d108      	bne.n	8008c1e <osSemaphoreNew+0x66>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d104      	bne.n	8008c1e <osSemaphoreNew+0x66>
          mem = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	61bb      	str	r3, [r7, #24]
 8008c18:	e001      	b.n	8008c1e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c24:	d04c      	beq.n	8008cc0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d128      	bne.n	8008c7e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d10a      	bne.n	8008c48 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	2203      	movs	r2, #3
 8008c38:	9200      	str	r2, [sp, #0]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	2001      	movs	r0, #1
 8008c40:	f000 fa2a 	bl	8009098 <xQueueGenericCreateStatic>
 8008c44:	61f8      	str	r0, [r7, #28]
 8008c46:	e005      	b.n	8008c54 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008c48:	2203      	movs	r2, #3
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	2001      	movs	r0, #1
 8008c4e:	f000 fa9b 	bl	8009188 <xQueueGenericCreate>
 8008c52:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d022      	beq.n	8008ca0 <osSemaphoreNew+0xe8>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01f      	beq.n	8008ca0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008c60:	2300      	movs	r3, #0
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	69f8      	ldr	r0, [r7, #28]
 8008c68:	f000 fc0c 	bl	8009484 <xQueueGenericSend>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d016      	beq.n	8008ca0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008c72:	69f8      	ldr	r0, [r7, #28]
 8008c74:	f001 f898 	bl	8009da8 <vQueueDelete>
            hSemaphore = NULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61fb      	str	r3, [r7, #28]
 8008c7c:	e010      	b.n	8008ca0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d108      	bne.n	8008c96 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fb8f 	bl	80093b0 <xQueueCreateCountingSemaphoreStatic>
 8008c92:	61f8      	str	r0, [r7, #28]
 8008c94:	e004      	b.n	8008ca0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 fbc0 	bl	800941e <xQueueCreateCountingSemaphore>
 8008c9e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00c      	beq.n	8008cc0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	e001      	b.n	8008cb8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008cb8:	6979      	ldr	r1, [r7, #20]
 8008cba:	69f8      	ldr	r0, [r7, #28]
 8008cbc:	f001 f9c0 	bl	800a040 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008cc0:	69fb      	ldr	r3, [r7, #28]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3720      	adds	r7, #32
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d103      	bne.n	8008cec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008ce4:	f06f 0303 	mvn.w	r3, #3
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	e039      	b.n	8008d60 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cec:	f3ef 8305 	mrs	r3, IPSR
 8008cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d022      	beq.n	8008d3e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008cfe:	f06f 0303 	mvn.w	r3, #3
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e02c      	b.n	8008d60 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008d0a:	f107 0308 	add.w	r3, r7, #8
 8008d0e:	461a      	mov	r2, r3
 8008d10:	2100      	movs	r1, #0
 8008d12:	6938      	ldr	r0, [r7, #16]
 8008d14:	f000 ffc8 	bl	8009ca8 <xQueueReceiveFromISR>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d003      	beq.n	8008d26 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008d1e:	f06f 0302 	mvn.w	r3, #2
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	e01c      	b.n	8008d60 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d019      	beq.n	8008d60 <osSemaphoreAcquire+0x94>
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <osSemaphoreAcquire+0xa0>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	e010      	b.n	8008d60 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6938      	ldr	r0, [r7, #16]
 8008d42:	f000 fea5 	bl	8009a90 <xQueueSemaphoreTake>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d009      	beq.n	8008d60 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008d52:	f06f 0301 	mvn.w	r3, #1
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e002      	b.n	8008d60 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008d5a:	f06f 0302 	mvn.w	r3, #2
 8008d5e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008d60:	697b      	ldr	r3, [r7, #20]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	e000ed04 	.word	0xe000ed04

08008d70 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008d86:	f06f 0303 	mvn.w	r3, #3
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e02c      	b.n	8008de8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d8e:	f3ef 8305 	mrs	r3, IPSR
 8008d92:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d94:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01a      	beq.n	8008dd0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008d9e:	f107 0308 	add.w	r3, r7, #8
 8008da2:	4619      	mov	r1, r3
 8008da4:	6938      	ldr	r0, [r7, #16]
 8008da6:	f000 fd06 	bl	80097b6 <xQueueGiveFromISR>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d003      	beq.n	8008db8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008db0:	f06f 0302 	mvn.w	r3, #2
 8008db4:	617b      	str	r3, [r7, #20]
 8008db6:	e017      	b.n	8008de8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d014      	beq.n	8008de8 <osSemaphoreRelease+0x78>
 8008dbe:	4b0d      	ldr	r3, [pc, #52]	; (8008df4 <osSemaphoreRelease+0x84>)
 8008dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	e00b      	b.n	8008de8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	6938      	ldr	r0, [r7, #16]
 8008dd8:	f000 fb54 	bl	8009484 <xQueueGenericSend>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d002      	beq.n	8008de8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008de2:	f06f 0302 	mvn.w	r3, #2
 8008de6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008de8:	697b      	ldr	r3, [r7, #20]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	e000ed04 	.word	0xe000ed04

08008df8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4a07      	ldr	r2, [pc, #28]	; (8008e24 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4a06      	ldr	r2, [pc, #24]	; (8008e28 <vApplicationGetIdleTaskMemory+0x30>)
 8008e0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2280      	movs	r2, #128	; 0x80
 8008e14:	601a      	str	r2, [r3, #0]
}
 8008e16:	bf00      	nop
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	2000195c 	.word	0x2000195c
 8008e28:	20001a18 	.word	0x20001a18

08008e2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4a07      	ldr	r2, [pc, #28]	; (8008e58 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4a06      	ldr	r2, [pc, #24]	; (8008e5c <vApplicationGetTimerTaskMemory+0x30>)
 8008e42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e4a:	601a      	str	r2, [r3, #0]
}
 8008e4c:	bf00      	nop
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	20001c18 	.word	0x20001c18
 8008e5c:	20001cd4 	.word	0x20001cd4

08008e60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f103 0208 	add.w	r2, r3, #8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f04f 32ff 	mov.w	r2, #4294967295
 8008e78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f103 0208 	add.w	r2, r3, #8
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f103 0208 	add.w	r2, r3, #8
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b085      	sub	sp, #20
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	601a      	str	r2, [r3, #0]
}
 8008ef6:	bf00      	nop
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f02:	b480      	push	{r7}
 8008f04:	b085      	sub	sp, #20
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f18:	d103      	bne.n	8008f22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	e00c      	b.n	8008f3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	3308      	adds	r3, #8
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	e002      	b.n	8008f30 <vListInsert+0x2e>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d2f6      	bcs.n	8008f2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	601a      	str	r2, [r3, #0]
}
 8008f68:	bf00      	nop
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	6892      	ldr	r2, [r2, #8]
 8008f8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	6852      	ldr	r2, [r2, #4]
 8008f94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d103      	bne.n	8008fa8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	1e5a      	subs	r2, r3, #1
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10a      	bne.n	8008ff2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ff2:	f002 ff5f 	bl	800beb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009002:	fb01 f303 	mul.w	r3, r1, r3
 8009006:	441a      	add	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	3b01      	subs	r3, #1
 8009024:	68f9      	ldr	r1, [r7, #12]
 8009026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	441a      	add	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	22ff      	movs	r2, #255	; 0xff
 8009036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	22ff      	movs	r2, #255	; 0xff
 800903e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d114      	bne.n	8009072 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d01a      	beq.n	8009086 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3310      	adds	r3, #16
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fd01 	bl	800aa5c <xTaskRemoveFromEventList>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d012      	beq.n	8009086 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009060:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <xQueueGenericReset+0xcc>)
 8009062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	e009      	b.n	8009086 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3310      	adds	r3, #16
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff fef2 	bl	8008e60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3324      	adds	r3, #36	; 0x24
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff feed 	bl	8008e60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009086:	f002 ff45 	bl	800bf14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800908a:	2301      	movs	r3, #1
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08e      	sub	sp, #56	; 0x38
 800909c:	af02      	add	r7, sp, #8
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d002      	beq.n	80090ea <xQueueGenericCreateStatic+0x52>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <xQueueGenericCreateStatic+0x56>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e000      	b.n	80090f0 <xQueueGenericCreateStatic+0x58>
 80090ee:	2300      	movs	r3, #0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	623b      	str	r3, [r7, #32]
}
 8009106:	bf00      	nop
 8009108:	e7fe      	b.n	8009108 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d102      	bne.n	8009116 <xQueueGenericCreateStatic+0x7e>
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <xQueueGenericCreateStatic+0x82>
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <xQueueGenericCreateStatic+0x84>
 800911a:	2300      	movs	r3, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	61fb      	str	r3, [r7, #28]
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009136:	2350      	movs	r3, #80	; 0x50
 8009138:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b50      	cmp	r3, #80	; 0x50
 800913e:	d00a      	beq.n	8009156 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	61bb      	str	r3, [r7, #24]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009156:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00d      	beq.n	800917e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	2201      	movs	r2, #1
 8009166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800916a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	4613      	mov	r3, r2
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	68b9      	ldr	r1, [r7, #8]
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 f83f 	bl	80091fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009180:	4618      	mov	r0, r3
 8009182:	3730      	adds	r7, #48	; 0x30
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08a      	sub	sp, #40	; 0x28
 800918c:	af02      	add	r7, sp, #8
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10a      	bne.n	80091b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	613b      	str	r3, [r7, #16]
}
 80091ae:	bf00      	nop
 80091b0:	e7fe      	b.n	80091b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	fb02 f303 	mul.w	r3, r2, r3
 80091ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	3350      	adds	r3, #80	; 0x50
 80091c0:	4618      	mov	r0, r3
 80091c2:	f002 ff99 	bl	800c0f8 <pvPortMalloc>
 80091c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d011      	beq.n	80091f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	3350      	adds	r3, #80	; 0x50
 80091d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091e0:	79fa      	ldrb	r2, [r7, #7]
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	4613      	mov	r3, r2
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f805 	bl	80091fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091f2:	69bb      	ldr	r3, [r7, #24]
	}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3720      	adds	r7, #32
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d103      	bne.n	8009218 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	e002      	b.n	800921e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800922a:	2101      	movs	r1, #1
 800922c:	69b8      	ldr	r0, [r7, #24]
 800922e:	f7ff fecb 	bl	8008fc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00e      	beq.n	800926e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009262:	2300      	movs	r3, #0
 8009264:	2200      	movs	r2, #0
 8009266:	2100      	movs	r1, #0
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f90b 	bl	8009484 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009276:	b580      	push	{r7, lr}
 8009278:	b086      	sub	sp, #24
 800927a:	af00      	add	r7, sp, #0
 800927c:	4603      	mov	r3, r0
 800927e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009280:	2301      	movs	r3, #1
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	2300      	movs	r3, #0
 8009286:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	461a      	mov	r2, r3
 800928c:	6939      	ldr	r1, [r7, #16]
 800928e:	6978      	ldr	r0, [r7, #20]
 8009290:	f7ff ff7a 	bl	8009188 <xQueueGenericCreate>
 8009294:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f7ff ffd3 	bl	8009242 <prvInitialiseMutex>

		return xNewQueue;
 800929c:	68fb      	ldr	r3, [r7, #12]
	}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b088      	sub	sp, #32
 80092aa:	af02      	add	r7, sp, #8
 80092ac:	4603      	mov	r3, r0
 80092ae:	6039      	str	r1, [r7, #0]
 80092b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80092b2:	2301      	movs	r3, #1
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	2300      	movs	r3, #0
 80092b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2200      	movs	r2, #0
 80092c2:	6939      	ldr	r1, [r7, #16]
 80092c4:	6978      	ldr	r0, [r7, #20]
 80092c6:	f7ff fee7 	bl	8009098 <xQueueGenericCreateStatic>
 80092ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f7ff ffb8 	bl	8009242 <prvInitialiseMutex>

		return xNewQueue;
 80092d2:	68fb      	ldr	r3, [r7, #12]
	}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80092dc:	b590      	push	{r4, r7, lr}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	60fb      	str	r3, [r7, #12]
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	689c      	ldr	r4, [r3, #8]
 8009308:	f001 fd6a 	bl	800ade0 <xTaskGetCurrentTaskHandle>
 800930c:	4603      	mov	r3, r0
 800930e:	429c      	cmp	r4, r3
 8009310:	d111      	bne.n	8009336 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	1e5a      	subs	r2, r3, #1
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d105      	bne.n	8009330 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009324:	2300      	movs	r3, #0
 8009326:	2200      	movs	r2, #0
 8009328:	2100      	movs	r1, #0
 800932a:	6938      	ldr	r0, [r7, #16]
 800932c:	f000 f8aa 	bl	8009484 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009330:	2301      	movs	r3, #1
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	e001      	b.n	800933a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800933a:	697b      	ldr	r3, [r7, #20]
	}
 800933c:	4618      	mov	r0, r3
 800933e:	371c      	adds	r7, #28
 8009340:	46bd      	mov	sp, r7
 8009342:	bd90      	pop	{r4, r7, pc}

08009344 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10a      	bne.n	800936e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	60fb      	str	r3, [r7, #12]
}
 800936a:	bf00      	nop
 800936c:	e7fe      	b.n	800936c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	689c      	ldr	r4, [r3, #8]
 8009372:	f001 fd35 	bl	800ade0 <xTaskGetCurrentTaskHandle>
 8009376:	4603      	mov	r3, r0
 8009378:	429c      	cmp	r4, r3
 800937a:	d107      	bne.n	800938c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009386:	2301      	movs	r3, #1
 8009388:	617b      	str	r3, [r7, #20]
 800938a:	e00c      	b.n	80093a6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6938      	ldr	r0, [r7, #16]
 8009390:	f000 fb7e 	bl	8009a90 <xQueueSemaphoreTake>
 8009394:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80093a6:	697b      	ldr	r3, [r7, #20]
	}
 80093a8:	4618      	mov	r0, r3
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd90      	pop	{r4, r7, pc}

080093b0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08a      	sub	sp, #40	; 0x28
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10a      	bne.n	80093d8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	61bb      	str	r3, [r7, #24]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d90a      	bls.n	80093f6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	617b      	str	r3, [r7, #20]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093f6:	2302      	movs	r3, #2
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	2100      	movs	r1, #0
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff fe49 	bl	8009098 <xQueueGenericCreateStatic>
 8009406:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009414:	69fb      	ldr	r3, [r7, #28]
	}
 8009416:	4618      	mov	r0, r3
 8009418:	3720      	adds	r7, #32
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800941e:	b580      	push	{r7, lr}
 8009420:	b086      	sub	sp, #24
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10a      	bne.n	8009444 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	613b      	str	r3, [r7, #16]
}
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	429a      	cmp	r2, r3
 800944a:	d90a      	bls.n	8009462 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	60fb      	str	r3, [r7, #12]
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009462:	2202      	movs	r2, #2
 8009464:	2100      	movs	r1, #0
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff fe8e 	bl	8009188 <xQueueGenericCreate>
 800946c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800947a:	697b      	ldr	r3, [r7, #20]
	}
 800947c:	4618      	mov	r0, r3
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08e      	sub	sp, #56	; 0x38
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009492:	2300      	movs	r3, #0
 8009494:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xQueueGenericSend+0x32>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d103      	bne.n	80094c4 <xQueueGenericSend+0x40>
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <xQueueGenericSend+0x44>
 80094c4:	2301      	movs	r3, #1
 80094c6:	e000      	b.n	80094ca <xQueueGenericSend+0x46>
 80094c8:	2300      	movs	r3, #0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10a      	bne.n	80094e4 <xQueueGenericSend+0x60>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094e0:	bf00      	nop
 80094e2:	e7fe      	b.n	80094e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d103      	bne.n	80094f2 <xQueueGenericSend+0x6e>
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <xQueueGenericSend+0x72>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e000      	b.n	80094f8 <xQueueGenericSend+0x74>
 80094f6:	2300      	movs	r3, #0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <xQueueGenericSend+0x8e>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	623b      	str	r3, [r7, #32]
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009512:	f001 fc75 	bl	800ae00 <xTaskGetSchedulerState>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <xQueueGenericSend+0x9e>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <xQueueGenericSend+0xa2>
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <xQueueGenericSend+0xa4>
 8009526:	2300      	movs	r3, #0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <xQueueGenericSend+0xbe>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	61fb      	str	r3, [r7, #28]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009542:	f002 fcb7 	bl	800beb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954e:	429a      	cmp	r2, r3
 8009550:	d302      	bcc.n	8009558 <xQueueGenericSend+0xd4>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b02      	cmp	r3, #2
 8009556:	d129      	bne.n	80095ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800955e:	f000 fc5e 	bl	8009e1e <prvCopyDataToQueue>
 8009562:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	2b00      	cmp	r3, #0
 800956a:	d010      	beq.n	800958e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	3324      	adds	r3, #36	; 0x24
 8009570:	4618      	mov	r0, r3
 8009572:	f001 fa73 	bl	800aa5c <xTaskRemoveFromEventList>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d013      	beq.n	80095a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800957c:	4b3f      	ldr	r3, [pc, #252]	; (800967c <xQueueGenericSend+0x1f8>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	e00a      	b.n	80095a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	2b00      	cmp	r3, #0
 8009592:	d007      	beq.n	80095a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009594:	4b39      	ldr	r3, [pc, #228]	; (800967c <xQueueGenericSend+0x1f8>)
 8009596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095a4:	f002 fcb6 	bl	800bf14 <vPortExitCritical>
				return pdPASS;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e063      	b.n	8009674 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d103      	bne.n	80095ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095b2:	f002 fcaf 	bl	800bf14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	e05c      	b.n	8009674 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d106      	bne.n	80095ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095c0:	f107 0314 	add.w	r3, r7, #20
 80095c4:	4618      	mov	r0, r3
 80095c6:	f001 faad 	bl	800ab24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095ca:	2301      	movs	r3, #1
 80095cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095ce:	f002 fca1 	bl	800bf14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095d2:	f001 f819 	bl	800a608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095d6:	f002 fc6d 	bl	800beb4 <vPortEnterCritical>
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095e0:	b25b      	sxtb	r3, r3
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e6:	d103      	bne.n	80095f0 <xQueueGenericSend+0x16c>
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095f6:	b25b      	sxtb	r3, r3
 80095f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fc:	d103      	bne.n	8009606 <xQueueGenericSend+0x182>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009606:	f002 fc85 	bl	800bf14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800960a:	1d3a      	adds	r2, r7, #4
 800960c:	f107 0314 	add.w	r3, r7, #20
 8009610:	4611      	mov	r1, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f001 fa9c 	bl	800ab50 <xTaskCheckForTimeOut>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d124      	bne.n	8009668 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800961e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009620:	f000 fcf5 	bl	800a00e <prvIsQueueFull>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d018      	beq.n	800965c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	3310      	adds	r3, #16
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	4611      	mov	r1, r2
 8009632:	4618      	mov	r0, r3
 8009634:	f001 f9c2 	bl	800a9bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800963a:	f000 fc80 	bl	8009f3e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800963e:	f000 fff1 	bl	800a624 <xTaskResumeAll>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	f47f af7c 	bne.w	8009542 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800964a:	4b0c      	ldr	r3, [pc, #48]	; (800967c <xQueueGenericSend+0x1f8>)
 800964c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	e772      	b.n	8009542 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800965c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800965e:	f000 fc6e 	bl	8009f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009662:	f000 ffdf 	bl	800a624 <xTaskResumeAll>
 8009666:	e76c      	b.n	8009542 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800966a:	f000 fc68 	bl	8009f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800966e:	f000 ffd9 	bl	800a624 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009672:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009674:	4618      	mov	r0, r3
 8009676:	3738      	adds	r7, #56	; 0x38
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	e000ed04 	.word	0xe000ed04

08009680 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b090      	sub	sp, #64	; 0x40
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d103      	bne.n	80096bc <xQueueGenericSendFromISR+0x3c>
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <xQueueGenericSendFromISR+0x40>
 80096bc:	2301      	movs	r3, #1
 80096be:	e000      	b.n	80096c2 <xQueueGenericSendFromISR+0x42>
 80096c0:	2300      	movs	r3, #0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10a      	bne.n	80096dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096d8:	bf00      	nop
 80096da:	e7fe      	b.n	80096da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d103      	bne.n	80096ea <xQueueGenericSendFromISR+0x6a>
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d101      	bne.n	80096ee <xQueueGenericSendFromISR+0x6e>
 80096ea:	2301      	movs	r3, #1
 80096ec:	e000      	b.n	80096f0 <xQueueGenericSendFromISR+0x70>
 80096ee:	2300      	movs	r3, #0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	623b      	str	r3, [r7, #32]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800970a:	f002 fcb5 	bl	800c078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800970e:	f3ef 8211 	mrs	r2, BASEPRI
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	61fa      	str	r2, [r7, #28]
 8009724:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009726:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009728:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009732:	429a      	cmp	r2, r3
 8009734:	d302      	bcc.n	800973c <xQueueGenericSendFromISR+0xbc>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d12f      	bne.n	800979c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	68b9      	ldr	r1, [r7, #8]
 8009750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009752:	f000 fb64 	bl	8009e1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009756:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800975a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975e:	d112      	bne.n	8009786 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	2b00      	cmp	r3, #0
 8009766:	d016      	beq.n	8009796 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	3324      	adds	r3, #36	; 0x24
 800976c:	4618      	mov	r0, r3
 800976e:	f001 f975 	bl	800aa5c <xTaskRemoveFromEventList>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00e      	beq.n	8009796 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e007      	b.n	8009796 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800978a:	3301      	adds	r3, #1
 800978c:	b2db      	uxtb	r3, r3
 800978e:	b25a      	sxtb	r2, r3
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009796:	2301      	movs	r3, #1
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800979a:	e001      	b.n	80097a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3740      	adds	r7, #64	; 0x40
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b08e      	sub	sp, #56	; 0x38
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	623b      	str	r3, [r7, #32]
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00a      	beq.n	80097fe <xQueueGiveFromISR+0x48>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	61fb      	str	r3, [r7, #28]
}
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d103      	bne.n	800980e <xQueueGiveFromISR+0x58>
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <xQueueGiveFromISR+0x5c>
 800980e:	2301      	movs	r3, #1
 8009810:	e000      	b.n	8009814 <xQueueGiveFromISR+0x5e>
 8009812:	2300      	movs	r3, #0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <xQueueGiveFromISR+0x78>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	61bb      	str	r3, [r7, #24]
}
 800982a:	bf00      	nop
 800982c:	e7fe      	b.n	800982c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800982e:	f002 fc23 	bl	800c078 <vPortValidateInterruptPriority>
	__asm volatile
 8009832:	f3ef 8211 	mrs	r2, BASEPRI
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	617a      	str	r2, [r7, #20]
 8009848:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800984a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800984c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009852:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800985a:	429a      	cmp	r2, r3
 800985c:	d22b      	bcs.n	80098b6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009870:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d112      	bne.n	80098a0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	d016      	beq.n	80098b0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	3324      	adds	r3, #36	; 0x24
 8009886:	4618      	mov	r0, r3
 8009888:	f001 f8e8 	bl	800aa5c <xTaskRemoveFromEventList>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00e      	beq.n	80098b0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2201      	movs	r2, #1
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	e007      	b.n	80098b0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a4:	3301      	adds	r3, #1
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	b25a      	sxtb	r2, r3
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098b0:	2301      	movs	r3, #1
 80098b2:	637b      	str	r3, [r7, #52]	; 0x34
 80098b4:	e001      	b.n	80098ba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	637b      	str	r3, [r7, #52]	; 0x34
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f383 8811 	msr	BASEPRI, r3
}
 80098c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3738      	adds	r7, #56	; 0x38
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b08c      	sub	sp, #48	; 0x30
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098dc:	2300      	movs	r3, #0
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10a      	bne.n	8009900 <xQueueReceive+0x30>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	623b      	str	r3, [r7, #32]
}
 80098fc:	bf00      	nop
 80098fe:	e7fe      	b.n	80098fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d103      	bne.n	800990e <xQueueReceive+0x3e>
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <xQueueReceive+0x42>
 800990e:	2301      	movs	r3, #1
 8009910:	e000      	b.n	8009914 <xQueueReceive+0x44>
 8009912:	2300      	movs	r3, #0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <xQueueReceive+0x5e>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	61fb      	str	r3, [r7, #28]
}
 800992a:	bf00      	nop
 800992c:	e7fe      	b.n	800992c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800992e:	f001 fa67 	bl	800ae00 <xTaskGetSchedulerState>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <xQueueReceive+0x6e>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <xQueueReceive+0x72>
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <xQueueReceive+0x74>
 8009942:	2300      	movs	r3, #0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10a      	bne.n	800995e <xQueueReceive+0x8e>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	61bb      	str	r3, [r7, #24]
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800995e:	f002 faa9 	bl	800beb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	2b00      	cmp	r3, #0
 800996c:	d01f      	beq.n	80099ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800996e:	68b9      	ldr	r1, [r7, #8]
 8009970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009972:	f000 fabe 	bl	8009ef2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	1e5a      	subs	r2, r3, #1
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00f      	beq.n	80099a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009988:	3310      	adds	r3, #16
 800998a:	4618      	mov	r0, r3
 800998c:	f001 f866 	bl	800aa5c <xTaskRemoveFromEventList>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d007      	beq.n	80099a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009996:	4b3d      	ldr	r3, [pc, #244]	; (8009a8c <xQueueReceive+0x1bc>)
 8009998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099a6:	f002 fab5 	bl	800bf14 <vPortExitCritical>
				return pdPASS;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e069      	b.n	8009a82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d103      	bne.n	80099bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099b4:	f002 faae 	bl	800bf14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099b8:	2300      	movs	r3, #0
 80099ba:	e062      	b.n	8009a82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d106      	bne.n	80099d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099c2:	f107 0310 	add.w	r3, r7, #16
 80099c6:	4618      	mov	r0, r3
 80099c8:	f001 f8ac 	bl	800ab24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099cc:	2301      	movs	r3, #1
 80099ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099d0:	f002 faa0 	bl	800bf14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099d4:	f000 fe18 	bl	800a608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099d8:	f002 fa6c 	bl	800beb4 <vPortEnterCritical>
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099e2:	b25b      	sxtb	r3, r3
 80099e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e8:	d103      	bne.n	80099f2 <xQueueReceive+0x122>
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f8:	b25b      	sxtb	r3, r3
 80099fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fe:	d103      	bne.n	8009a08 <xQueueReceive+0x138>
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a08:	f002 fa84 	bl	800bf14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a0c:	1d3a      	adds	r2, r7, #4
 8009a0e:	f107 0310 	add.w	r3, r7, #16
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f001 f89b 	bl	800ab50 <xTaskCheckForTimeOut>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d123      	bne.n	8009a68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a22:	f000 fade 	bl	8009fe2 <prvIsQueueEmpty>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d017      	beq.n	8009a5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	3324      	adds	r3, #36	; 0x24
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	4611      	mov	r1, r2
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 ffc1 	bl	800a9bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a3c:	f000 fa7f 	bl	8009f3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a40:	f000 fdf0 	bl	800a624 <xTaskResumeAll>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d189      	bne.n	800995e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a4a:	4b10      	ldr	r3, [pc, #64]	; (8009a8c <xQueueReceive+0x1bc>)
 8009a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	e780      	b.n	800995e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a5e:	f000 fa6e 	bl	8009f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a62:	f000 fddf 	bl	800a624 <xTaskResumeAll>
 8009a66:	e77a      	b.n	800995e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a6a:	f000 fa68 	bl	8009f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a6e:	f000 fdd9 	bl	800a624 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a74:	f000 fab5 	bl	8009fe2 <prvIsQueueEmpty>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f43f af6f 	beq.w	800995e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3730      	adds	r7, #48	; 0x30
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	e000ed04 	.word	0xe000ed04

08009a90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08e      	sub	sp, #56	; 0x38
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	623b      	str	r3, [r7, #32]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	61fb      	str	r3, [r7, #28]
}
 8009adc:	bf00      	nop
 8009ade:	e7fe      	b.n	8009ade <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ae0:	f001 f98e 	bl	800ae00 <xTaskGetSchedulerState>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d102      	bne.n	8009af0 <xQueueSemaphoreTake+0x60>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <xQueueSemaphoreTake+0x64>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e000      	b.n	8009af6 <xQueueSemaphoreTake+0x66>
 8009af4:	2300      	movs	r3, #0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10a      	bne.n	8009b10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	61bb      	str	r3, [r7, #24]
}
 8009b0c:	bf00      	nop
 8009b0e:	e7fe      	b.n	8009b0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b10:	f002 f9d0 	bl	800beb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d024      	beq.n	8009b6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	1e5a      	subs	r2, r3, #1
 8009b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d104      	bne.n	8009b3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b30:	f001 fadc 	bl	800b0ec <pvTaskIncrementMutexHeldCount>
 8009b34:	4602      	mov	r2, r0
 8009b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00f      	beq.n	8009b62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b44:	3310      	adds	r3, #16
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 ff88 	bl	800aa5c <xTaskRemoveFromEventList>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d007      	beq.n	8009b62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b52:	4b54      	ldr	r3, [pc, #336]	; (8009ca4 <xQueueSemaphoreTake+0x214>)
 8009b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b62:	f002 f9d7 	bl	800bf14 <vPortExitCritical>
				return pdPASS;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e097      	b.n	8009c9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d111      	bne.n	8009b94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00a      	beq.n	8009b8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	617b      	str	r3, [r7, #20]
}
 8009b88:	bf00      	nop
 8009b8a:	e7fe      	b.n	8009b8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b8c:	f002 f9c2 	bl	800bf14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b90:	2300      	movs	r3, #0
 8009b92:	e082      	b.n	8009c9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d106      	bne.n	8009ba8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b9a:	f107 030c 	add.w	r3, r7, #12
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 ffc0 	bl	800ab24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ba8:	f002 f9b4 	bl	800bf14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bac:	f000 fd2c 	bl	800a608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bb0:	f002 f980 	bl	800beb4 <vPortEnterCritical>
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bba:	b25b      	sxtb	r3, r3
 8009bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc0:	d103      	bne.n	8009bca <xQueueSemaphoreTake+0x13a>
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bd0:	b25b      	sxtb	r3, r3
 8009bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd6:	d103      	bne.n	8009be0 <xQueueSemaphoreTake+0x150>
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009be0:	f002 f998 	bl	800bf14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009be4:	463a      	mov	r2, r7
 8009be6:	f107 030c 	add.w	r3, r7, #12
 8009bea:	4611      	mov	r1, r2
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 ffaf 	bl	800ab50 <xTaskCheckForTimeOut>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d132      	bne.n	8009c5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bfa:	f000 f9f2 	bl	8009fe2 <prvIsQueueEmpty>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d026      	beq.n	8009c52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d109      	bne.n	8009c20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009c0c:	f002 f952 	bl	800beb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f001 f911 	bl	800ae3c <xTaskPriorityInherit>
 8009c1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009c1c:	f002 f97a 	bl	800bf14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	3324      	adds	r3, #36	; 0x24
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fec7 	bl	800a9bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c30:	f000 f985 	bl	8009f3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c34:	f000 fcf6 	bl	800a624 <xTaskResumeAll>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f47f af68 	bne.w	8009b10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009c40:	4b18      	ldr	r3, [pc, #96]	; (8009ca4 <xQueueSemaphoreTake+0x214>)
 8009c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	e75e      	b.n	8009b10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c54:	f000 f973 	bl	8009f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c58:	f000 fce4 	bl	800a624 <xTaskResumeAll>
 8009c5c:	e758      	b.n	8009b10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c60:	f000 f96d 	bl	8009f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c64:	f000 fcde 	bl	800a624 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c6a:	f000 f9ba 	bl	8009fe2 <prvIsQueueEmpty>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f43f af4d 	beq.w	8009b10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00d      	beq.n	8009c98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009c7c:	f002 f91a 	bl	800beb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c82:	f000 f8b4 	bl	8009dee <prvGetDisinheritPriorityAfterTimeout>
 8009c86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f001 f9aa 	bl	800afe8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c94:	f002 f93e 	bl	800bf14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3738      	adds	r7, #56	; 0x38
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	e000ed04 	.word	0xe000ed04

08009ca8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08e      	sub	sp, #56	; 0x38
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	623b      	str	r3, [r7, #32]
}
 8009cd0:	bf00      	nop
 8009cd2:	e7fe      	b.n	8009cd2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d103      	bne.n	8009ce2 <xQueueReceiveFromISR+0x3a>
 8009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <xQueueReceiveFromISR+0x3e>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <xQueueReceiveFromISR+0x40>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	61fb      	str	r3, [r7, #28]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d02:	f002 f9b9 	bl	800c078 <vPortValidateInterruptPriority>
	__asm volatile
 8009d06:	f3ef 8211 	mrs	r2, BASEPRI
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	61ba      	str	r2, [r7, #24]
 8009d1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009d1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d02f      	beq.n	8009d8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d3c:	f000 f8d9 	bl	8009ef2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	1e5a      	subs	r2, r3, #1
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009d48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d50:	d112      	bne.n	8009d78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d016      	beq.n	8009d88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	3310      	adds	r3, #16
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fe7c 	bl	800aa5c <xTaskRemoveFromEventList>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00e      	beq.n	8009d88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00b      	beq.n	8009d88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	e007      	b.n	8009d88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	b25a      	sxtb	r2, r3
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d8c:	e001      	b.n	8009d92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	637b      	str	r3, [r7, #52]	; 0x34
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f383 8811 	msr	BASEPRI, r3
}
 8009d9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3738      	adds	r7, #56	; 0x38
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10a      	bne.n	8009dd0 <vQueueDelete+0x28>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	60bb      	str	r3, [r7, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	e7fe      	b.n	8009dce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f95f 	bl	800a094 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d102      	bne.n	8009de6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f002 fa55 	bl	800c290 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009dee:	b480      	push	{r7}
 8009df0:	b085      	sub	sp, #20
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d006      	beq.n	8009e0c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009e08:	60fb      	str	r3, [r7, #12]
 8009e0a:	e001      	b.n	8009e10 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009e10:	68fb      	ldr	r3, [r7, #12]
	}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b086      	sub	sp, #24
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10d      	bne.n	8009e58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d14d      	bne.n	8009ee0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f001 f85f 	bl	800af0c <xTaskPriorityDisinherit>
 8009e4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	609a      	str	r2, [r3, #8]
 8009e56:	e043      	b.n	8009ee0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d119      	bne.n	8009e92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6858      	ldr	r0, [r3, #4]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e66:	461a      	mov	r2, r3
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	f002 feeb 	bl	800cc44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	441a      	add	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d32b      	bcc.n	8009ee0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	605a      	str	r2, [r3, #4]
 8009e90:	e026      	b.n	8009ee0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	68d8      	ldr	r0, [r3, #12]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	68b9      	ldr	r1, [r7, #8]
 8009e9e:	f002 fed1 	bl	800cc44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	68da      	ldr	r2, [r3, #12]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	425b      	negs	r3, r3
 8009eac:	441a      	add	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d207      	bcs.n	8009ece <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	689a      	ldr	r2, [r3, #8]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	425b      	negs	r3, r3
 8009ec8:	441a      	add	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d105      	bne.n	8009ee0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ee8:	697b      	ldr	r3, [r7, #20]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d018      	beq.n	8009f36 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0c:	441a      	add	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d303      	bcc.n	8009f26 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68d9      	ldr	r1, [r3, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	461a      	mov	r2, r3
 8009f30:	6838      	ldr	r0, [r7, #0]
 8009f32:	f002 fe87 	bl	800cc44 <memcpy>
	}
}
 8009f36:	bf00      	nop
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f46:	f001 ffb5 	bl	800beb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f50:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f52:	e011      	b.n	8009f78 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d012      	beq.n	8009f82 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3324      	adds	r3, #36	; 0x24
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 fd7b 	bl	800aa5c <xTaskRemoveFromEventList>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f6c:	f000 fe52 	bl	800ac14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	dce9      	bgt.n	8009f54 <prvUnlockQueue+0x16>
 8009f80:	e000      	b.n	8009f84 <prvUnlockQueue+0x46>
					break;
 8009f82:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	22ff      	movs	r2, #255	; 0xff
 8009f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f8c:	f001 ffc2 	bl	800bf14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f90:	f001 ff90 	bl	800beb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f9a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f9c:	e011      	b.n	8009fc2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d012      	beq.n	8009fcc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3310      	adds	r3, #16
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 fd56 	bl	800aa5c <xTaskRemoveFromEventList>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009fb6:	f000 fe2d 	bl	800ac14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009fba:	7bbb      	ldrb	r3, [r7, #14]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	dce9      	bgt.n	8009f9e <prvUnlockQueue+0x60>
 8009fca:	e000      	b.n	8009fce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009fcc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	22ff      	movs	r2, #255	; 0xff
 8009fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009fd6:	f001 ff9d 	bl	800bf14 <vPortExitCritical>
}
 8009fda:	bf00      	nop
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fea:	f001 ff63 	bl	800beb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d102      	bne.n	8009ffc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	e001      	b.n	800a000 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a000:	f001 ff88 	bl	800bf14 <vPortExitCritical>

	return xReturn;
 800a004:	68fb      	ldr	r3, [r7, #12]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a016:	f001 ff4d 	bl	800beb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a022:	429a      	cmp	r2, r3
 800a024:	d102      	bne.n	800a02c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a026:	2301      	movs	r3, #1
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	e001      	b.n	800a030 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a02c:	2300      	movs	r3, #0
 800a02e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a030:	f001 ff70 	bl	800bf14 <vPortExitCritical>

	return xReturn;
 800a034:	68fb      	ldr	r3, [r7, #12]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	e014      	b.n	800a07a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a050:	4a0f      	ldr	r2, [pc, #60]	; (800a090 <vQueueAddToRegistry+0x50>)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10b      	bne.n	800a074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a05c:	490c      	ldr	r1, [pc, #48]	; (800a090 <vQueueAddToRegistry+0x50>)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a066:	4a0a      	ldr	r2, [pc, #40]	; (800a090 <vQueueAddToRegistry+0x50>)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	00db      	lsls	r3, r3, #3
 800a06c:	4413      	add	r3, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a072:	e006      	b.n	800a082 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3301      	adds	r3, #1
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b07      	cmp	r3, #7
 800a07e:	d9e7      	bls.n	800a050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a080:	bf00      	nop
 800a082:	bf00      	nop
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	200020d4 	.word	0x200020d4

0800a094 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	e016      	b.n	800a0d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a0a2:	4a10      	ldr	r2, [pc, #64]	; (800a0e4 <vQueueUnregisterQueue+0x50>)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	00db      	lsls	r3, r3, #3
 800a0a8:	4413      	add	r3, r2
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d10b      	bne.n	800a0ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a0b2:	4a0c      	ldr	r2, [pc, #48]	; (800a0e4 <vQueueUnregisterQueue+0x50>)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a0bc:	4a09      	ldr	r2, [pc, #36]	; (800a0e4 <vQueueUnregisterQueue+0x50>)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	00db      	lsls	r3, r3, #3
 800a0c2:	4413      	add	r3, r2
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	605a      	str	r2, [r3, #4]
				break;
 800a0c8:	e006      	b.n	800a0d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b07      	cmp	r3, #7
 800a0d4:	d9e5      	bls.n	800a0a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a0d6:	bf00      	nop
 800a0d8:	bf00      	nop
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	200020d4 	.word	0x200020d4

0800a0e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0f8:	f001 fedc 	bl	800beb4 <vPortEnterCritical>
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a102:	b25b      	sxtb	r3, r3
 800a104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a108:	d103      	bne.n	800a112 <vQueueWaitForMessageRestricted+0x2a>
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d103      	bne.n	800a128 <vQueueWaitForMessageRestricted+0x40>
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a128:	f001 fef4 	bl	800bf14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	3324      	adds	r3, #36	; 0x24
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fc61 	bl	800aa04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a142:	6978      	ldr	r0, [r7, #20]
 800a144:	f7ff fefb 	bl	8009f3e <prvUnlockQueue>
	}
 800a148:	bf00      	nop
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08e      	sub	sp, #56	; 0x38
 800a154:	af04      	add	r7, sp, #16
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	623b      	str	r3, [r7, #32]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10a      	bne.n	800a196 <xTaskCreateStatic+0x46>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	61fb      	str	r3, [r7, #28]
}
 800a192:	bf00      	nop
 800a194:	e7fe      	b.n	800a194 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a196:	23bc      	movs	r3, #188	; 0xbc
 800a198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2bbc      	cmp	r3, #188	; 0xbc
 800a19e:	d00a      	beq.n	800a1b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	61bb      	str	r3, [r7, #24]
}
 800a1b2:	bf00      	nop
 800a1b4:	e7fe      	b.n	800a1b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d01e      	beq.n	800a1fc <xTaskCreateStatic+0xac>
 800a1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d01b      	beq.n	800a1fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9303      	str	r3, [sp, #12]
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	9302      	str	r3, [sp, #8]
 800a1de:	f107 0314 	add.w	r3, r7, #20
 800a1e2:	9301      	str	r3, [sp, #4]
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 f850 	bl	800a294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1f6:	f000 f8f3 	bl	800a3e0 <prvAddNewTaskToReadyList>
 800a1fa:	e001      	b.n	800a200 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a200:	697b      	ldr	r3, [r7, #20]
	}
 800a202:	4618      	mov	r0, r3
 800a204:	3728      	adds	r7, #40	; 0x28
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b08c      	sub	sp, #48	; 0x30
 800a20e:	af04      	add	r7, sp, #16
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	603b      	str	r3, [r7, #0]
 800a216:	4613      	mov	r3, r2
 800a218:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a21a:	88fb      	ldrh	r3, [r7, #6]
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 ff6a 	bl	800c0f8 <pvPortMalloc>
 800a224:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00e      	beq.n	800a24a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a22c:	20bc      	movs	r0, #188	; 0xbc
 800a22e:	f001 ff63 	bl	800c0f8 <pvPortMalloc>
 800a232:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	631a      	str	r2, [r3, #48]	; 0x30
 800a240:	e005      	b.n	800a24e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a242:	6978      	ldr	r0, [r7, #20]
 800a244:	f002 f824 	bl	800c290 <vPortFree>
 800a248:	e001      	b.n	800a24e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d017      	beq.n	800a284 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a25c:	88fa      	ldrh	r2, [r7, #6]
 800a25e:	2300      	movs	r3, #0
 800a260:	9303      	str	r3, [sp, #12]
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	9302      	str	r3, [sp, #8]
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	9301      	str	r3, [sp, #4]
 800a26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 f80e 	bl	800a294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a278:	69f8      	ldr	r0, [r7, #28]
 800a27a:	f000 f8b1 	bl	800a3e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a27e:	2301      	movs	r3, #1
 800a280:	61bb      	str	r3, [r7, #24]
 800a282:	e002      	b.n	800a28a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a284:	f04f 33ff 	mov.w	r3, #4294967295
 800a288:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a28a:	69bb      	ldr	r3, [r7, #24]
	}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3720      	adds	r7, #32
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	21a5      	movs	r1, #165	; 0xa5
 800a2ae:	f002 fcd7 	bl	800cc60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	f023 0307 	bic.w	r3, r3, #7
 800a2ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	617b      	str	r3, [r7, #20]
}
 800a2e8:	bf00      	nop
 800a2ea:	e7fe      	b.n	800a2ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d01f      	beq.n	800a332 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	61fb      	str	r3, [r7, #28]
 800a2f6:	e012      	b.n	800a31e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	7819      	ldrb	r1, [r3, #0]
 800a300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	4413      	add	r3, r2
 800a306:	3334      	adds	r3, #52	; 0x34
 800a308:	460a      	mov	r2, r1
 800a30a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	4413      	add	r3, r2
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d006      	beq.n	800a326 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	3301      	adds	r3, #1
 800a31c:	61fb      	str	r3, [r7, #28]
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	2b0f      	cmp	r3, #15
 800a322:	d9e9      	bls.n	800a2f8 <prvInitialiseNewTask+0x64>
 800a324:	e000      	b.n	800a328 <prvInitialiseNewTask+0x94>
			{
				break;
 800a326:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a330:	e003      	b.n	800a33a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	2b37      	cmp	r3, #55	; 0x37
 800a33e:	d901      	bls.n	800a344 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a340:	2337      	movs	r3, #55	; 0x37
 800a342:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a348:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a34e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a352:	2200      	movs	r2, #0
 800a354:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	3304      	adds	r3, #4
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe fda0 	bl	8008ea0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a362:	3318      	adds	r3, #24
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe fd9b 	bl	8008ea0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a36e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a37e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	2200      	movs	r2, #0
 800a384:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	3354      	adds	r3, #84	; 0x54
 800a394:	2260      	movs	r2, #96	; 0x60
 800a396:	2100      	movs	r1, #0
 800a398:	4618      	mov	r0, r3
 800a39a:	f002 fc61 	bl	800cc60 <memset>
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	4a0c      	ldr	r2, [pc, #48]	; (800a3d4 <prvInitialiseNewTask+0x140>)
 800a3a2:	659a      	str	r2, [r3, #88]	; 0x58
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	4a0c      	ldr	r2, [pc, #48]	; (800a3d8 <prvInitialiseNewTask+0x144>)
 800a3a8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	4a0b      	ldr	r2, [pc, #44]	; (800a3dc <prvInitialiseNewTask+0x148>)
 800a3ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	68f9      	ldr	r1, [r7, #12]
 800a3b4:	69b8      	ldr	r0, [r7, #24]
 800a3b6:	f001 fc51 	bl	800bc5c <pxPortInitialiseStack>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3cc:	bf00      	nop
 800a3ce:	3720      	adds	r7, #32
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	0800f6c4 	.word	0x0800f6c4
 800a3d8:	0800f6e4 	.word	0x0800f6e4
 800a3dc:	0800f6a4 	.word	0x0800f6a4

0800a3e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3e8:	f001 fd64 	bl	800beb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3ec:	4b2d      	ldr	r3, [pc, #180]	; (800a4a4 <prvAddNewTaskToReadyList+0xc4>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	4a2c      	ldr	r2, [pc, #176]	; (800a4a4 <prvAddNewTaskToReadyList+0xc4>)
 800a3f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3f6:	4b2c      	ldr	r3, [pc, #176]	; (800a4a8 <prvAddNewTaskToReadyList+0xc8>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d109      	bne.n	800a412 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3fe:	4a2a      	ldr	r2, [pc, #168]	; (800a4a8 <prvAddNewTaskToReadyList+0xc8>)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a404:	4b27      	ldr	r3, [pc, #156]	; (800a4a4 <prvAddNewTaskToReadyList+0xc4>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d110      	bne.n	800a42e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a40c:	f000 fc26 	bl	800ac5c <prvInitialiseTaskLists>
 800a410:	e00d      	b.n	800a42e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a412:	4b26      	ldr	r3, [pc, #152]	; (800a4ac <prvAddNewTaskToReadyList+0xcc>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a41a:	4b23      	ldr	r3, [pc, #140]	; (800a4a8 <prvAddNewTaskToReadyList+0xc8>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	429a      	cmp	r2, r3
 800a426:	d802      	bhi.n	800a42e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a428:	4a1f      	ldr	r2, [pc, #124]	; (800a4a8 <prvAddNewTaskToReadyList+0xc8>)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a42e:	4b20      	ldr	r3, [pc, #128]	; (800a4b0 <prvAddNewTaskToReadyList+0xd0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	4a1e      	ldr	r2, [pc, #120]	; (800a4b0 <prvAddNewTaskToReadyList+0xd0>)
 800a436:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a438:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <prvAddNewTaskToReadyList+0xd0>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a444:	4b1b      	ldr	r3, [pc, #108]	; (800a4b4 <prvAddNewTaskToReadyList+0xd4>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d903      	bls.n	800a454 <prvAddNewTaskToReadyList+0x74>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	4a18      	ldr	r2, [pc, #96]	; (800a4b4 <prvAddNewTaskToReadyList+0xd4>)
 800a452:	6013      	str	r3, [r2, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a458:	4613      	mov	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4a15      	ldr	r2, [pc, #84]	; (800a4b8 <prvAddNewTaskToReadyList+0xd8>)
 800a462:	441a      	add	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3304      	adds	r3, #4
 800a468:	4619      	mov	r1, r3
 800a46a:	4610      	mov	r0, r2
 800a46c:	f7fe fd25 	bl	8008eba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a470:	f001 fd50 	bl	800bf14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a474:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <prvAddNewTaskToReadyList+0xcc>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00e      	beq.n	800a49a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a47c:	4b0a      	ldr	r3, [pc, #40]	; (800a4a8 <prvAddNewTaskToReadyList+0xc8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	429a      	cmp	r2, r3
 800a488:	d207      	bcs.n	800a49a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a48a:	4b0c      	ldr	r3, [pc, #48]	; (800a4bc <prvAddNewTaskToReadyList+0xdc>)
 800a48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a49a:	bf00      	nop
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	200025e8 	.word	0x200025e8
 800a4a8:	20002114 	.word	0x20002114
 800a4ac:	200025f4 	.word	0x200025f4
 800a4b0:	20002604 	.word	0x20002604
 800a4b4:	200025f0 	.word	0x200025f0
 800a4b8:	20002118 	.word	0x20002118
 800a4bc:	e000ed04 	.word	0xe000ed04

0800a4c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d017      	beq.n	800a502 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4d2:	4b13      	ldr	r3, [pc, #76]	; (800a520 <vTaskDelay+0x60>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <vTaskDelay+0x30>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	60bb      	str	r3, [r7, #8]
}
 800a4ec:	bf00      	nop
 800a4ee:	e7fe      	b.n	800a4ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4f0:	f000 f88a 	bl	800a608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f001 f80e 	bl	800b518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4fc:	f000 f892 	bl	800a624 <xTaskResumeAll>
 800a500:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d107      	bne.n	800a518 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a508:	4b06      	ldr	r3, [pc, #24]	; (800a524 <vTaskDelay+0x64>)
 800a50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a518:	bf00      	nop
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20002610 	.word	0x20002610
 800a524:	e000ed04 	.word	0xe000ed04

0800a528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a536:	463a      	mov	r2, r7
 800a538:	1d39      	adds	r1, r7, #4
 800a53a:	f107 0308 	add.w	r3, r7, #8
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fc5a 	bl	8008df8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	9202      	str	r2, [sp, #8]
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	2300      	movs	r3, #0
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	2300      	movs	r3, #0
 800a554:	460a      	mov	r2, r1
 800a556:	4924      	ldr	r1, [pc, #144]	; (800a5e8 <vTaskStartScheduler+0xc0>)
 800a558:	4824      	ldr	r0, [pc, #144]	; (800a5ec <vTaskStartScheduler+0xc4>)
 800a55a:	f7ff fdf9 	bl	800a150 <xTaskCreateStatic>
 800a55e:	4603      	mov	r3, r0
 800a560:	4a23      	ldr	r2, [pc, #140]	; (800a5f0 <vTaskStartScheduler+0xc8>)
 800a562:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a564:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <vTaskStartScheduler+0xc8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a56c:	2301      	movs	r3, #1
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	e001      	b.n	800a576 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a572:	2300      	movs	r3, #0
 800a574:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d102      	bne.n	800a582 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a57c:	f001 f820 	bl	800b5c0 <xTimerCreateTimerTask>
 800a580:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d11b      	bne.n	800a5c0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	613b      	str	r3, [r7, #16]
}
 800a59a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a59c:	4b15      	ldr	r3, [pc, #84]	; (800a5f4 <vTaskStartScheduler+0xcc>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3354      	adds	r3, #84	; 0x54
 800a5a2:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <vTaskStartScheduler+0xd0>)
 800a5a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5a6:	4b15      	ldr	r3, [pc, #84]	; (800a5fc <vTaskStartScheduler+0xd4>)
 800a5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5ae:	4b14      	ldr	r3, [pc, #80]	; (800a600 <vTaskStartScheduler+0xd8>)
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5b4:	4b13      	ldr	r3, [pc, #76]	; (800a604 <vTaskStartScheduler+0xdc>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5ba:	f001 fbd9 	bl	800bd70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5be:	e00e      	b.n	800a5de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c6:	d10a      	bne.n	800a5de <vTaskStartScheduler+0xb6>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	60fb      	str	r3, [r7, #12]
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <vTaskStartScheduler+0xb4>
}
 800a5de:	bf00      	nop
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	0800efac 	.word	0x0800efac
 800a5ec:	0800ac2d 	.word	0x0800ac2d
 800a5f0:	2000260c 	.word	0x2000260c
 800a5f4:	20002114 	.word	0x20002114
 800a5f8:	20000108 	.word	0x20000108
 800a5fc:	20002608 	.word	0x20002608
 800a600:	200025f4 	.word	0x200025f4
 800a604:	200025ec 	.word	0x200025ec

0800a608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a608:	b480      	push	{r7}
 800a60a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a60c:	4b04      	ldr	r3, [pc, #16]	; (800a620 <vTaskSuspendAll+0x18>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	4a03      	ldr	r2, [pc, #12]	; (800a620 <vTaskSuspendAll+0x18>)
 800a614:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a616:	bf00      	nop
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	20002610 	.word	0x20002610

0800a624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a62e:	2300      	movs	r3, #0
 800a630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a632:	4b42      	ldr	r3, [pc, #264]	; (800a73c <xTaskResumeAll+0x118>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <xTaskResumeAll+0x2c>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	603b      	str	r3, [r7, #0]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a650:	f001 fc30 	bl	800beb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a654:	4b39      	ldr	r3, [pc, #228]	; (800a73c <xTaskResumeAll+0x118>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3b01      	subs	r3, #1
 800a65a:	4a38      	ldr	r2, [pc, #224]	; (800a73c <xTaskResumeAll+0x118>)
 800a65c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a65e:	4b37      	ldr	r3, [pc, #220]	; (800a73c <xTaskResumeAll+0x118>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d162      	bne.n	800a72c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a666:	4b36      	ldr	r3, [pc, #216]	; (800a740 <xTaskResumeAll+0x11c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d05e      	beq.n	800a72c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a66e:	e02f      	b.n	800a6d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a670:	4b34      	ldr	r3, [pc, #208]	; (800a744 <xTaskResumeAll+0x120>)
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3318      	adds	r3, #24
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fe fc79 	bl	8008f74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3304      	adds	r3, #4
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe fc74 	bl	8008f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a690:	4b2d      	ldr	r3, [pc, #180]	; (800a748 <xTaskResumeAll+0x124>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	429a      	cmp	r2, r3
 800a696:	d903      	bls.n	800a6a0 <xTaskResumeAll+0x7c>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69c:	4a2a      	ldr	r2, [pc, #168]	; (800a748 <xTaskResumeAll+0x124>)
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4a27      	ldr	r2, [pc, #156]	; (800a74c <xTaskResumeAll+0x128>)
 800a6ae:	441a      	add	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	f7fe fbff 	bl	8008eba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c0:	4b23      	ldr	r3, [pc, #140]	; (800a750 <xTaskResumeAll+0x12c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d302      	bcc.n	800a6d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a6ca:	4b22      	ldr	r3, [pc, #136]	; (800a754 <xTaskResumeAll+0x130>)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6d0:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <xTaskResumeAll+0x120>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1cb      	bne.n	800a670 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6de:	f000 fb5f 	bl	800ada0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6e2:	4b1d      	ldr	r3, [pc, #116]	; (800a758 <xTaskResumeAll+0x134>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d010      	beq.n	800a710 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6ee:	f000 f847 	bl	800a780 <xTaskIncrementTick>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a6f8:	4b16      	ldr	r3, [pc, #88]	; (800a754 <xTaskResumeAll+0x130>)
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3b01      	subs	r3, #1
 800a702:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1f1      	bne.n	800a6ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a70a:	4b13      	ldr	r3, [pc, #76]	; (800a758 <xTaskResumeAll+0x134>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a710:	4b10      	ldr	r3, [pc, #64]	; (800a754 <xTaskResumeAll+0x130>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d009      	beq.n	800a72c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a718:	2301      	movs	r3, #1
 800a71a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a71c:	4b0f      	ldr	r3, [pc, #60]	; (800a75c <xTaskResumeAll+0x138>)
 800a71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a72c:	f001 fbf2 	bl	800bf14 <vPortExitCritical>

	return xAlreadyYielded;
 800a730:	68bb      	ldr	r3, [r7, #8]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20002610 	.word	0x20002610
 800a740:	200025e8 	.word	0x200025e8
 800a744:	200025a8 	.word	0x200025a8
 800a748:	200025f0 	.word	0x200025f0
 800a74c:	20002118 	.word	0x20002118
 800a750:	20002114 	.word	0x20002114
 800a754:	200025fc 	.word	0x200025fc
 800a758:	200025f8 	.word	0x200025f8
 800a75c:	e000ed04 	.word	0xe000ed04

0800a760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a766:	4b05      	ldr	r3, [pc, #20]	; (800a77c <xTaskGetTickCount+0x1c>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a76c:	687b      	ldr	r3, [r7, #4]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	200025ec 	.word	0x200025ec

0800a780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a78a:	4b4f      	ldr	r3, [pc, #316]	; (800a8c8 <xTaskIncrementTick+0x148>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f040 808f 	bne.w	800a8b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a794:	4b4d      	ldr	r3, [pc, #308]	; (800a8cc <xTaskIncrementTick+0x14c>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3301      	adds	r3, #1
 800a79a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a79c:	4a4b      	ldr	r2, [pc, #300]	; (800a8cc <xTaskIncrementTick+0x14c>)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d120      	bne.n	800a7ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7a8:	4b49      	ldr	r3, [pc, #292]	; (800a8d0 <xTaskIncrementTick+0x150>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00a      	beq.n	800a7c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	603b      	str	r3, [r7, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <xTaskIncrementTick+0x46>
 800a7c8:	4b41      	ldr	r3, [pc, #260]	; (800a8d0 <xTaskIncrementTick+0x150>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	60fb      	str	r3, [r7, #12]
 800a7ce:	4b41      	ldr	r3, [pc, #260]	; (800a8d4 <xTaskIncrementTick+0x154>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a3f      	ldr	r2, [pc, #252]	; (800a8d0 <xTaskIncrementTick+0x150>)
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	4a3f      	ldr	r2, [pc, #252]	; (800a8d4 <xTaskIncrementTick+0x154>)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	4b3e      	ldr	r3, [pc, #248]	; (800a8d8 <xTaskIncrementTick+0x158>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	4a3d      	ldr	r2, [pc, #244]	; (800a8d8 <xTaskIncrementTick+0x158>)
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	f000 fadb 	bl	800ada0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7ea:	4b3c      	ldr	r3, [pc, #240]	; (800a8dc <xTaskIncrementTick+0x15c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d349      	bcc.n	800a888 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7f4:	4b36      	ldr	r3, [pc, #216]	; (800a8d0 <xTaskIncrementTick+0x150>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7fe:	4b37      	ldr	r3, [pc, #220]	; (800a8dc <xTaskIncrementTick+0x15c>)
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	601a      	str	r2, [r3, #0]
					break;
 800a806:	e03f      	b.n	800a888 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a808:	4b31      	ldr	r3, [pc, #196]	; (800a8d0 <xTaskIncrementTick+0x150>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d203      	bcs.n	800a828 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a820:	4a2e      	ldr	r2, [pc, #184]	; (800a8dc <xTaskIncrementTick+0x15c>)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a826:	e02f      	b.n	800a888 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe fba1 	bl	8008f74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a836:	2b00      	cmp	r3, #0
 800a838:	d004      	beq.n	800a844 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	3318      	adds	r3, #24
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe fb98 	bl	8008f74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a848:	4b25      	ldr	r3, [pc, #148]	; (800a8e0 <xTaskIncrementTick+0x160>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d903      	bls.n	800a858 <xTaskIncrementTick+0xd8>
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a854:	4a22      	ldr	r2, [pc, #136]	; (800a8e0 <xTaskIncrementTick+0x160>)
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85c:	4613      	mov	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4a1f      	ldr	r2, [pc, #124]	; (800a8e4 <xTaskIncrementTick+0x164>)
 800a866:	441a      	add	r2, r3
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	3304      	adds	r3, #4
 800a86c:	4619      	mov	r1, r3
 800a86e:	4610      	mov	r0, r2
 800a870:	f7fe fb23 	bl	8008eba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a878:	4b1b      	ldr	r3, [pc, #108]	; (800a8e8 <xTaskIncrementTick+0x168>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87e:	429a      	cmp	r2, r3
 800a880:	d3b8      	bcc.n	800a7f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a882:	2301      	movs	r3, #1
 800a884:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a886:	e7b5      	b.n	800a7f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a888:	4b17      	ldr	r3, [pc, #92]	; (800a8e8 <xTaskIncrementTick+0x168>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88e:	4915      	ldr	r1, [pc, #84]	; (800a8e4 <xTaskIncrementTick+0x164>)
 800a890:	4613      	mov	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4413      	add	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	440b      	add	r3, r1
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d901      	bls.n	800a8a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8a4:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <xTaskIncrementTick+0x16c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d007      	beq.n	800a8bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	e004      	b.n	800a8bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <xTaskIncrementTick+0x170>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	4a0d      	ldr	r2, [pc, #52]	; (800a8f0 <xTaskIncrementTick+0x170>)
 800a8ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8bc:	697b      	ldr	r3, [r7, #20]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20002610 	.word	0x20002610
 800a8cc:	200025ec 	.word	0x200025ec
 800a8d0:	200025a0 	.word	0x200025a0
 800a8d4:	200025a4 	.word	0x200025a4
 800a8d8:	20002600 	.word	0x20002600
 800a8dc:	20002608 	.word	0x20002608
 800a8e0:	200025f0 	.word	0x200025f0
 800a8e4:	20002118 	.word	0x20002118
 800a8e8:	20002114 	.word	0x20002114
 800a8ec:	200025fc 	.word	0x200025fc
 800a8f0:	200025f8 	.word	0x200025f8

0800a8f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8fa:	4b2a      	ldr	r3, [pc, #168]	; (800a9a4 <vTaskSwitchContext+0xb0>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a902:	4b29      	ldr	r3, [pc, #164]	; (800a9a8 <vTaskSwitchContext+0xb4>)
 800a904:	2201      	movs	r2, #1
 800a906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a908:	e046      	b.n	800a998 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a90a:	4b27      	ldr	r3, [pc, #156]	; (800a9a8 <vTaskSwitchContext+0xb4>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a910:	4b26      	ldr	r3, [pc, #152]	; (800a9ac <vTaskSwitchContext+0xb8>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	e010      	b.n	800a93a <vTaskSwitchContext+0x46>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10a      	bne.n	800a934 <vTaskSwitchContext+0x40>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	607b      	str	r3, [r7, #4]
}
 800a930:	bf00      	nop
 800a932:	e7fe      	b.n	800a932 <vTaskSwitchContext+0x3e>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3b01      	subs	r3, #1
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	491d      	ldr	r1, [pc, #116]	; (800a9b0 <vTaskSwitchContext+0xbc>)
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	4613      	mov	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	440b      	add	r3, r1
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0e4      	beq.n	800a918 <vTaskSwitchContext+0x24>
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4a15      	ldr	r2, [pc, #84]	; (800a9b0 <vTaskSwitchContext+0xbc>)
 800a95a:	4413      	add	r3, r2
 800a95c:	60bb      	str	r3, [r7, #8]
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	605a      	str	r2, [r3, #4]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	3308      	adds	r3, #8
 800a970:	429a      	cmp	r2, r3
 800a972:	d104      	bne.n	800a97e <vTaskSwitchContext+0x8a>
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	605a      	str	r2, [r3, #4]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	4a0b      	ldr	r2, [pc, #44]	; (800a9b4 <vTaskSwitchContext+0xc0>)
 800a986:	6013      	str	r3, [r2, #0]
 800a988:	4a08      	ldr	r2, [pc, #32]	; (800a9ac <vTaskSwitchContext+0xb8>)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a98e:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <vTaskSwitchContext+0xc0>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3354      	adds	r3, #84	; 0x54
 800a994:	4a08      	ldr	r2, [pc, #32]	; (800a9b8 <vTaskSwitchContext+0xc4>)
 800a996:	6013      	str	r3, [r2, #0]
}
 800a998:	bf00      	nop
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	20002610 	.word	0x20002610
 800a9a8:	200025fc 	.word	0x200025fc
 800a9ac:	200025f0 	.word	0x200025f0
 800a9b0:	20002118 	.word	0x20002118
 800a9b4:	20002114 	.word	0x20002114
 800a9b8:	20000108 	.word	0x20000108

0800a9bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	60fb      	str	r3, [r7, #12]
}
 800a9de:	bf00      	nop
 800a9e0:	e7fe      	b.n	800a9e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9e2:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <vTaskPlaceOnEventList+0x44>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3318      	adds	r3, #24
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7fe fa89 	bl	8008f02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	6838      	ldr	r0, [r7, #0]
 800a9f4:	f000 fd90 	bl	800b518 <prvAddCurrentTaskToDelayedList>
}
 800a9f8:	bf00      	nop
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	20002114 	.word	0x20002114

0800aa04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	617b      	str	r3, [r7, #20]
}
 800aa28:	bf00      	nop
 800aa2a:	e7fe      	b.n	800aa2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3318      	adds	r3, #24
 800aa32:	4619      	mov	r1, r3
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f7fe fa40 	bl	8008eba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aa40:	f04f 33ff 	mov.w	r3, #4294967295
 800aa44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa46:	6879      	ldr	r1, [r7, #4]
 800aa48:	68b8      	ldr	r0, [r7, #8]
 800aa4a:	f000 fd65 	bl	800b518 <prvAddCurrentTaskToDelayedList>
	}
 800aa4e:	bf00      	nop
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20002114 	.word	0x20002114

0800aa5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10a      	bne.n	800aa88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	60fb      	str	r3, [r7, #12]
}
 800aa84:	bf00      	nop
 800aa86:	e7fe      	b.n	800aa86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	3318      	adds	r3, #24
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fa71 	bl	8008f74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa92:	4b1e      	ldr	r3, [pc, #120]	; (800ab0c <xTaskRemoveFromEventList+0xb0>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d11d      	bne.n	800aad6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fa68 	bl	8008f74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa8:	4b19      	ldr	r3, [pc, #100]	; (800ab10 <xTaskRemoveFromEventList+0xb4>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d903      	bls.n	800aab8 <xTaskRemoveFromEventList+0x5c>
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab4:	4a16      	ldr	r2, [pc, #88]	; (800ab10 <xTaskRemoveFromEventList+0xb4>)
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aabc:	4613      	mov	r3, r2
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4a13      	ldr	r2, [pc, #76]	; (800ab14 <xTaskRemoveFromEventList+0xb8>)
 800aac6:	441a      	add	r2, r3
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	3304      	adds	r3, #4
 800aacc:	4619      	mov	r1, r3
 800aace:	4610      	mov	r0, r2
 800aad0:	f7fe f9f3 	bl	8008eba <vListInsertEnd>
 800aad4:	e005      	b.n	800aae2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	3318      	adds	r3, #24
 800aada:	4619      	mov	r1, r3
 800aadc:	480e      	ldr	r0, [pc, #56]	; (800ab18 <xTaskRemoveFromEventList+0xbc>)
 800aade:	f7fe f9ec 	bl	8008eba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae6:	4b0d      	ldr	r3, [pc, #52]	; (800ab1c <xTaskRemoveFromEventList+0xc0>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d905      	bls.n	800aafc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	; (800ab20 <xTaskRemoveFromEventList+0xc4>)
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	e001      	b.n	800ab00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab00:	697b      	ldr	r3, [r7, #20]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20002610 	.word	0x20002610
 800ab10:	200025f0 	.word	0x200025f0
 800ab14:	20002118 	.word	0x20002118
 800ab18:	200025a8 	.word	0x200025a8
 800ab1c:	20002114 	.word	0x20002114
 800ab20:	200025fc 	.word	0x200025fc

0800ab24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab2c:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <vTaskInternalSetTimeOutState+0x24>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab34:	4b05      	ldr	r3, [pc, #20]	; (800ab4c <vTaskInternalSetTimeOutState+0x28>)
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	605a      	str	r2, [r3, #4]
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	20002600 	.word	0x20002600
 800ab4c:	200025ec 	.word	0x200025ec

0800ab50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10a      	bne.n	800ab76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	613b      	str	r3, [r7, #16]
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10a      	bne.n	800ab92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	60fb      	str	r3, [r7, #12]
}
 800ab8e:	bf00      	nop
 800ab90:	e7fe      	b.n	800ab90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ab92:	f001 f98f 	bl	800beb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab96:	4b1d      	ldr	r3, [pc, #116]	; (800ac0c <xTaskCheckForTimeOut+0xbc>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abae:	d102      	bne.n	800abb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abb0:	2300      	movs	r3, #0
 800abb2:	61fb      	str	r3, [r7, #28]
 800abb4:	e023      	b.n	800abfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	4b15      	ldr	r3, [pc, #84]	; (800ac10 <xTaskCheckForTimeOut+0xc0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d007      	beq.n	800abd2 <xTaskCheckForTimeOut+0x82>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d302      	bcc.n	800abd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abcc:	2301      	movs	r3, #1
 800abce:	61fb      	str	r3, [r7, #28]
 800abd0:	e015      	b.n	800abfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d20b      	bcs.n	800abf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	1ad2      	subs	r2, r2, r3
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7ff ff9b 	bl	800ab24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abee:	2300      	movs	r3, #0
 800abf0:	61fb      	str	r3, [r7, #28]
 800abf2:	e004      	b.n	800abfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2200      	movs	r2, #0
 800abf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abfa:	2301      	movs	r3, #1
 800abfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abfe:	f001 f989 	bl	800bf14 <vPortExitCritical>

	return xReturn;
 800ac02:	69fb      	ldr	r3, [r7, #28]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3720      	adds	r7, #32
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	200025ec 	.word	0x200025ec
 800ac10:	20002600 	.word	0x20002600

0800ac14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac14:	b480      	push	{r7}
 800ac16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac18:	4b03      	ldr	r3, [pc, #12]	; (800ac28 <vTaskMissedYield+0x14>)
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]
}
 800ac1e:	bf00      	nop
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	200025fc 	.word	0x200025fc

0800ac2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac34:	f000 f852 	bl	800acdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac38:	4b06      	ldr	r3, [pc, #24]	; (800ac54 <prvIdleTask+0x28>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d9f9      	bls.n	800ac34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac40:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <prvIdleTask+0x2c>)
 800ac42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac50:	e7f0      	b.n	800ac34 <prvIdleTask+0x8>
 800ac52:	bf00      	nop
 800ac54:	20002118 	.word	0x20002118
 800ac58:	e000ed04 	.word	0xe000ed04

0800ac5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac62:	2300      	movs	r3, #0
 800ac64:	607b      	str	r3, [r7, #4]
 800ac66:	e00c      	b.n	800ac82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4a12      	ldr	r2, [pc, #72]	; (800acbc <prvInitialiseTaskLists+0x60>)
 800ac74:	4413      	add	r3, r2
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe f8f2 	bl	8008e60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b37      	cmp	r3, #55	; 0x37
 800ac86:	d9ef      	bls.n	800ac68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac88:	480d      	ldr	r0, [pc, #52]	; (800acc0 <prvInitialiseTaskLists+0x64>)
 800ac8a:	f7fe f8e9 	bl	8008e60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac8e:	480d      	ldr	r0, [pc, #52]	; (800acc4 <prvInitialiseTaskLists+0x68>)
 800ac90:	f7fe f8e6 	bl	8008e60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac94:	480c      	ldr	r0, [pc, #48]	; (800acc8 <prvInitialiseTaskLists+0x6c>)
 800ac96:	f7fe f8e3 	bl	8008e60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac9a:	480c      	ldr	r0, [pc, #48]	; (800accc <prvInitialiseTaskLists+0x70>)
 800ac9c:	f7fe f8e0 	bl	8008e60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aca0:	480b      	ldr	r0, [pc, #44]	; (800acd0 <prvInitialiseTaskLists+0x74>)
 800aca2:	f7fe f8dd 	bl	8008e60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aca6:	4b0b      	ldr	r3, [pc, #44]	; (800acd4 <prvInitialiseTaskLists+0x78>)
 800aca8:	4a05      	ldr	r2, [pc, #20]	; (800acc0 <prvInitialiseTaskLists+0x64>)
 800acaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acac:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <prvInitialiseTaskLists+0x7c>)
 800acae:	4a05      	ldr	r2, [pc, #20]	; (800acc4 <prvInitialiseTaskLists+0x68>)
 800acb0:	601a      	str	r2, [r3, #0]
}
 800acb2:	bf00      	nop
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	20002118 	.word	0x20002118
 800acc0:	20002578 	.word	0x20002578
 800acc4:	2000258c 	.word	0x2000258c
 800acc8:	200025a8 	.word	0x200025a8
 800accc:	200025bc 	.word	0x200025bc
 800acd0:	200025d4 	.word	0x200025d4
 800acd4:	200025a0 	.word	0x200025a0
 800acd8:	200025a4 	.word	0x200025a4

0800acdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ace2:	e019      	b.n	800ad18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ace4:	f001 f8e6 	bl	800beb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ace8:	4b10      	ldr	r3, [pc, #64]	; (800ad2c <prvCheckTasksWaitingTermination+0x50>)
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3304      	adds	r3, #4
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe f93d 	bl	8008f74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acfa:	4b0d      	ldr	r3, [pc, #52]	; (800ad30 <prvCheckTasksWaitingTermination+0x54>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3b01      	subs	r3, #1
 800ad00:	4a0b      	ldr	r2, [pc, #44]	; (800ad30 <prvCheckTasksWaitingTermination+0x54>)
 800ad02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad04:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <prvCheckTasksWaitingTermination+0x58>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	4a0a      	ldr	r2, [pc, #40]	; (800ad34 <prvCheckTasksWaitingTermination+0x58>)
 800ad0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad0e:	f001 f901 	bl	800bf14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 f810 	bl	800ad38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad18:	4b06      	ldr	r3, [pc, #24]	; (800ad34 <prvCheckTasksWaitingTermination+0x58>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e1      	bne.n	800ace4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	200025bc 	.word	0x200025bc
 800ad30:	200025e8 	.word	0x200025e8
 800ad34:	200025d0 	.word	0x200025d0

0800ad38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3354      	adds	r3, #84	; 0x54
 800ad44:	4618      	mov	r0, r3
 800ad46:	f002 fc0f 	bl	800d568 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d108      	bne.n	800ad66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f001 fa99 	bl	800c290 <vPortFree>
				vPortFree( pxTCB );
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f001 fa96 	bl	800c290 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad64:	e018      	b.n	800ad98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d103      	bne.n	800ad78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 fa8d 	bl	800c290 <vPortFree>
	}
 800ad76:	e00f      	b.n	800ad98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d00a      	beq.n	800ad98 <prvDeleteTCB+0x60>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	60fb      	str	r3, [r7, #12]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <prvDeleteTCB+0x5e>
	}
 800ad98:	bf00      	nop
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ada6:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <prvResetNextTaskUnblockTime+0x38>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d104      	bne.n	800adba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800adb0:	4b0a      	ldr	r3, [pc, #40]	; (800addc <prvResetNextTaskUnblockTime+0x3c>)
 800adb2:	f04f 32ff 	mov.w	r2, #4294967295
 800adb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800adb8:	e008      	b.n	800adcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adba:	4b07      	ldr	r3, [pc, #28]	; (800add8 <prvResetNextTaskUnblockTime+0x38>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	4a04      	ldr	r2, [pc, #16]	; (800addc <prvResetNextTaskUnblockTime+0x3c>)
 800adca:	6013      	str	r3, [r2, #0]
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	200025a0 	.word	0x200025a0
 800addc:	20002608 	.word	0x20002608

0800ade0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ade6:	4b05      	ldr	r3, [pc, #20]	; (800adfc <xTaskGetCurrentTaskHandle+0x1c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	607b      	str	r3, [r7, #4]

		return xReturn;
 800adec:	687b      	ldr	r3, [r7, #4]
	}
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	20002114 	.word	0x20002114

0800ae00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae06:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <xTaskGetSchedulerState+0x34>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	607b      	str	r3, [r7, #4]
 800ae12:	e008      	b.n	800ae26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae14:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <xTaskGetSchedulerState+0x38>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d102      	bne.n	800ae22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae1c:	2302      	movs	r3, #2
 800ae1e:	607b      	str	r3, [r7, #4]
 800ae20:	e001      	b.n	800ae26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae22:	2300      	movs	r3, #0
 800ae24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae26:	687b      	ldr	r3, [r7, #4]
	}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	200025f4 	.word	0x200025f4
 800ae38:	20002610 	.word	0x20002610

0800ae3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d051      	beq.n	800aef6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae56:	4b2a      	ldr	r3, [pc, #168]	; (800af00 <xTaskPriorityInherit+0xc4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d241      	bcs.n	800aee4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	db06      	blt.n	800ae76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae68:	4b25      	ldr	r3, [pc, #148]	; (800af00 <xTaskPriorityInherit+0xc4>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	6959      	ldr	r1, [r3, #20]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7e:	4613      	mov	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4a1f      	ldr	r2, [pc, #124]	; (800af04 <xTaskPriorityInherit+0xc8>)
 800ae88:	4413      	add	r3, r2
 800ae8a:	4299      	cmp	r1, r3
 800ae8c:	d122      	bne.n	800aed4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	3304      	adds	r3, #4
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fe f86e 	bl	8008f74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae98:	4b19      	ldr	r3, [pc, #100]	; (800af00 <xTaskPriorityInherit+0xc4>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea6:	4b18      	ldr	r3, [pc, #96]	; (800af08 <xTaskPriorityInherit+0xcc>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d903      	bls.n	800aeb6 <xTaskPriorityInherit+0x7a>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb2:	4a15      	ldr	r2, [pc, #84]	; (800af08 <xTaskPriorityInherit+0xcc>)
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	4613      	mov	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4a10      	ldr	r2, [pc, #64]	; (800af04 <xTaskPriorityInherit+0xc8>)
 800aec4:	441a      	add	r2, r3
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4619      	mov	r1, r3
 800aecc:	4610      	mov	r0, r2
 800aece:	f7fd fff4 	bl	8008eba <vListInsertEnd>
 800aed2:	e004      	b.n	800aede <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <xTaskPriorityInherit+0xc4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aede:	2301      	movs	r3, #1
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	e008      	b.n	800aef6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aee8:	4b05      	ldr	r3, [pc, #20]	; (800af00 <xTaskPriorityInherit+0xc4>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d201      	bcs.n	800aef6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aef2:	2301      	movs	r3, #1
 800aef4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aef6:	68fb      	ldr	r3, [r7, #12]
	}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20002114 	.word	0x20002114
 800af04:	20002118 	.word	0x20002118
 800af08:	200025f0 	.word	0x200025f0

0800af0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af18:	2300      	movs	r3, #0
 800af1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d056      	beq.n	800afd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af22:	4b2e      	ldr	r3, [pc, #184]	; (800afdc <xTaskPriorityDisinherit+0xd0>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d00a      	beq.n	800af42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	60fb      	str	r3, [r7, #12]
}
 800af3e:	bf00      	nop
 800af40:	e7fe      	b.n	800af40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10a      	bne.n	800af60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	60bb      	str	r3, [r7, #8]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af64:	1e5a      	subs	r2, r3, #1
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af72:	429a      	cmp	r2, r3
 800af74:	d02c      	beq.n	800afd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d128      	bne.n	800afd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	3304      	adds	r3, #4
 800af82:	4618      	mov	r0, r3
 800af84:	f7fd fff6 	bl	8008f74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa0:	4b0f      	ldr	r3, [pc, #60]	; (800afe0 <xTaskPriorityDisinherit+0xd4>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d903      	bls.n	800afb0 <xTaskPriorityDisinherit+0xa4>
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afac:	4a0c      	ldr	r2, [pc, #48]	; (800afe0 <xTaskPriorityDisinherit+0xd4>)
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb4:	4613      	mov	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4a09      	ldr	r2, [pc, #36]	; (800afe4 <xTaskPriorityDisinherit+0xd8>)
 800afbe:	441a      	add	r2, r3
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4619      	mov	r1, r3
 800afc6:	4610      	mov	r0, r2
 800afc8:	f7fd ff77 	bl	8008eba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afcc:	2301      	movs	r3, #1
 800afce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afd0:	697b      	ldr	r3, [r7, #20]
	}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	20002114 	.word	0x20002114
 800afe0:	200025f0 	.word	0x200025f0
 800afe4:	20002118 	.word	0x20002118

0800afe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aff6:	2301      	movs	r3, #1
 800aff8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d06a      	beq.n	800b0d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	60fb      	str	r3, [r7, #12]
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	d902      	bls.n	800b02e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	61fb      	str	r3, [r7, #28]
 800b02c:	e002      	b.n	800b034 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b032:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b038:	69fa      	ldr	r2, [r7, #28]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d04b      	beq.n	800b0d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	429a      	cmp	r2, r3
 800b046:	d146      	bne.n	800b0d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b048:	4b25      	ldr	r3, [pc, #148]	; (800b0e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d10a      	bne.n	800b068 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	60bb      	str	r3, [r7, #8]
}
 800b064:	bf00      	nop
 800b066:	e7fe      	b.n	800b066 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	69fa      	ldr	r2, [r7, #28]
 800b072:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	db04      	blt.n	800b086 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	6959      	ldr	r1, [r3, #20]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4a13      	ldr	r2, [pc, #76]	; (800b0e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b096:	4413      	add	r3, r2
 800b098:	4299      	cmp	r1, r3
 800b09a:	d11c      	bne.n	800b0d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7fd ff67 	bl	8008f74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0aa:	4b0f      	ldr	r3, [pc, #60]	; (800b0e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d903      	bls.n	800b0ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	4a0c      	ldr	r2, [pc, #48]	; (800b0e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b0b8:	6013      	str	r3, [r2, #0]
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0be:	4613      	mov	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4a07      	ldr	r2, [pc, #28]	; (800b0e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b0c8:	441a      	add	r2, r3
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f7fd fef2 	bl	8008eba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0d6:	bf00      	nop
 800b0d8:	3720      	adds	r7, #32
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20002114 	.word	0x20002114
 800b0e4:	20002118 	.word	0x20002118
 800b0e8:	200025f0 	.word	0x200025f0

0800b0ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b0ec:	b480      	push	{r7}
 800b0ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <pvTaskIncrementMutexHeldCount+0x24>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d004      	beq.n	800b102 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b0f8:	4b05      	ldr	r3, [pc, #20]	; (800b110 <pvTaskIncrementMutexHeldCount+0x24>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0fe:	3201      	adds	r2, #1
 800b100:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b102:	4b03      	ldr	r3, [pc, #12]	; (800b110 <pvTaskIncrementMutexHeldCount+0x24>)
 800b104:	681b      	ldr	r3, [r3, #0]
	}
 800b106:	4618      	mov	r0, r3
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	20002114 	.word	0x20002114

0800b114 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
 800b120:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b122:	f000 fec7 	bl	800beb4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b126:	4b29      	ldr	r3, [pc, #164]	; (800b1cc <xTaskNotifyWait+0xb8>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	d01c      	beq.n	800b16e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b134:	4b25      	ldr	r3, [pc, #148]	; (800b1cc <xTaskNotifyWait+0xb8>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	43d2      	mvns	r2, r2
 800b140:	400a      	ands	r2, r1
 800b142:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b146:	4b21      	ldr	r3, [pc, #132]	; (800b1cc <xTaskNotifyWait+0xb8>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00b      	beq.n	800b16e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b156:	2101      	movs	r1, #1
 800b158:	6838      	ldr	r0, [r7, #0]
 800b15a:	f000 f9dd 	bl	800b518 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b15e:	4b1c      	ldr	r3, [pc, #112]	; (800b1d0 <xTaskNotifyWait+0xbc>)
 800b160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b164:	601a      	str	r2, [r3, #0]
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b16e:	f000 fed1 	bl	800bf14 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b172:	f000 fe9f 	bl	800beb4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d005      	beq.n	800b188 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b17c:	4b13      	ldr	r3, [pc, #76]	; (800b1cc <xTaskNotifyWait+0xb8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b188:	4b10      	ldr	r3, [pc, #64]	; (800b1cc <xTaskNotifyWait+0xb8>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b02      	cmp	r3, #2
 800b194:	d002      	beq.n	800b19c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b196:	2300      	movs	r3, #0
 800b198:	617b      	str	r3, [r7, #20]
 800b19a:	e00a      	b.n	800b1b2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b19c:	4b0b      	ldr	r3, [pc, #44]	; (800b1cc <xTaskNotifyWait+0xb8>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	43d2      	mvns	r2, r2
 800b1a8:	400a      	ands	r2, r1
 800b1aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1b2:	4b06      	ldr	r3, [pc, #24]	; (800b1cc <xTaskNotifyWait+0xb8>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800b1bc:	f000 feaa 	bl	800bf14 <vPortExitCritical>

		return xReturn;
 800b1c0:	697b      	ldr	r3, [r7, #20]
	}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3718      	adds	r7, #24
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20002114 	.word	0x20002114
 800b1d0:	e000ed04 	.word	0xe000ed04

0800b1d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08a      	sub	sp, #40	; 0x28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	603b      	str	r3, [r7, #0]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10a      	bne.n	800b204 <xTaskGenericNotify+0x30>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	61bb      	str	r3, [r7, #24]
}
 800b200:	bf00      	nop
 800b202:	e7fe      	b.n	800b202 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b208:	f000 fe54 	bl	800beb4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d004      	beq.n	800b21c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b222:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	2202      	movs	r2, #2
 800b228:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b22c:	79fb      	ldrb	r3, [r7, #7]
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d82d      	bhi.n	800b28e <xTaskGenericNotify+0xba>
 800b232:	a201      	add	r2, pc, #4	; (adr r2, 800b238 <xTaskGenericNotify+0x64>)
 800b234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b238:	0800b2b1 	.word	0x0800b2b1
 800b23c:	0800b24d 	.word	0x0800b24d
 800b240:	0800b25f 	.word	0x0800b25f
 800b244:	0800b26f 	.word	0x0800b26f
 800b248:	0800b279 	.word	0x0800b279
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	431a      	orrs	r2, r3
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b25c:	e02b      	b.n	800b2b6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b26c:	e023      	b.n	800b2b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b276:	e01e      	b.n	800b2b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b278:	7ffb      	ldrb	r3, [r7, #31]
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d004      	beq.n	800b288 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b286:	e016      	b.n	800b2b6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800b288:	2300      	movs	r3, #0
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b28c:	e013      	b.n	800b2b6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b28e:	6a3b      	ldr	r3, [r7, #32]
 800b290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b298:	d00c      	beq.n	800b2b4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	617b      	str	r3, [r7, #20]
}
 800b2ac:	bf00      	nop
 800b2ae:	e7fe      	b.n	800b2ae <xTaskGenericNotify+0xda>
					break;
 800b2b0:	bf00      	nop
 800b2b2:	e000      	b.n	800b2b6 <xTaskGenericNotify+0xe2>

					break;
 800b2b4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b2b6:	7ffb      	ldrb	r3, [r7, #31]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d13a      	bne.n	800b332 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fd fe57 	bl	8008f74 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ca:	4b1d      	ldr	r3, [pc, #116]	; (800b340 <xTaskGenericNotify+0x16c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d903      	bls.n	800b2da <xTaskGenericNotify+0x106>
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d6:	4a1a      	ldr	r2, [pc, #104]	; (800b340 <xTaskGenericNotify+0x16c>)
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4a17      	ldr	r2, [pc, #92]	; (800b344 <xTaskGenericNotify+0x170>)
 800b2e8:	441a      	add	r2, r3
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f7fd fde2 	bl	8008eba <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b2f6:	6a3b      	ldr	r3, [r7, #32]
 800b2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00a      	beq.n	800b314 <xTaskGenericNotify+0x140>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	613b      	str	r3, [r7, #16]
}
 800b310:	bf00      	nop
 800b312:	e7fe      	b.n	800b312 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b318:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <xTaskGenericNotify+0x174>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31e:	429a      	cmp	r2, r3
 800b320:	d907      	bls.n	800b332 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b322:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <xTaskGenericNotify+0x178>)
 800b324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b332:	f000 fdef 	bl	800bf14 <vPortExitCritical>

		return xReturn;
 800b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b338:	4618      	mov	r0, r3
 800b33a:	3728      	adds	r7, #40	; 0x28
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	200025f0 	.word	0x200025f0
 800b344:	20002118 	.word	0x20002118
 800b348:	20002114 	.word	0x20002114
 800b34c:	e000ed04 	.word	0xe000ed04

0800b350 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08e      	sub	sp, #56	; 0x38
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	4613      	mov	r3, r2
 800b35e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b360:	2301      	movs	r3, #1
 800b362:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b380:	f000 fe7a 	bl	800c078 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b388:	f3ef 8211 	mrs	r2, BASEPRI
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	623a      	str	r2, [r7, #32]
 800b39e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b3a0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b3ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b3c6:	79fb      	ldrb	r3, [r7, #7]
 800b3c8:	2b04      	cmp	r3, #4
 800b3ca:	d82f      	bhi.n	800b42c <xTaskGenericNotifyFromISR+0xdc>
 800b3cc:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <xTaskGenericNotifyFromISR+0x84>)
 800b3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d2:	bf00      	nop
 800b3d4:	0800b44f 	.word	0x0800b44f
 800b3d8:	0800b3e9 	.word	0x0800b3e9
 800b3dc:	0800b3fb 	.word	0x0800b3fb
 800b3e0:	0800b40b 	.word	0x0800b40b
 800b3e4:	0800b415 	.word	0x0800b415
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ea:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b3f8:	e02c      	b.n	800b454 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b408:	e024      	b.n	800b454 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b412:	e01f      	b.n	800b454 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b414:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d004      	beq.n	800b426 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b424:	e016      	b.n	800b454 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b426:	2300      	movs	r3, #0
 800b428:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b42a:	e013      	b.n	800b454 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b436:	d00c      	beq.n	800b452 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	61bb      	str	r3, [r7, #24]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b44e:	bf00      	nop
 800b450:	e000      	b.n	800b454 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b452:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b454:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d146      	bne.n	800b4ea <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00a      	beq.n	800b47a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	617b      	str	r3, [r7, #20]
}
 800b476:	bf00      	nop
 800b478:	e7fe      	b.n	800b478 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b47a:	4b21      	ldr	r3, [pc, #132]	; (800b500 <xTaskGenericNotifyFromISR+0x1b0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d11d      	bne.n	800b4be <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	3304      	adds	r3, #4
 800b486:	4618      	mov	r0, r3
 800b488:	f7fd fd74 	bl	8008f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b490:	4b1c      	ldr	r3, [pc, #112]	; (800b504 <xTaskGenericNotifyFromISR+0x1b4>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	429a      	cmp	r2, r3
 800b496:	d903      	bls.n	800b4a0 <xTaskGenericNotifyFromISR+0x150>
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49c:	4a19      	ldr	r2, [pc, #100]	; (800b504 <xTaskGenericNotifyFromISR+0x1b4>)
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4a16      	ldr	r2, [pc, #88]	; (800b508 <xTaskGenericNotifyFromISR+0x1b8>)
 800b4ae:	441a      	add	r2, r3
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	f7fd fcff 	bl	8008eba <vListInsertEnd>
 800b4bc:	e005      	b.n	800b4ca <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	3318      	adds	r3, #24
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4811      	ldr	r0, [pc, #68]	; (800b50c <xTaskGenericNotifyFromISR+0x1bc>)
 800b4c6:	f7fd fcf8 	bl	8008eba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ce:	4b10      	ldr	r3, [pc, #64]	; (800b510 <xTaskGenericNotifyFromISR+0x1c0>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d908      	bls.n	800b4ea <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d002      	beq.n	800b4e4 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b4e4:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <xTaskGenericNotifyFromISR+0x1c4>)
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	f383 8811 	msr	BASEPRI, r3
}
 800b4f4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3738      	adds	r7, #56	; 0x38
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20002610 	.word	0x20002610
 800b504:	200025f0 	.word	0x200025f0
 800b508:	20002118 	.word	0x20002118
 800b50c:	200025a8 	.word	0x200025a8
 800b510:	20002114 	.word	0x20002114
 800b514:	200025fc 	.word	0x200025fc

0800b518 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b522:	4b21      	ldr	r3, [pc, #132]	; (800b5a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b528:	4b20      	ldr	r3, [pc, #128]	; (800b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3304      	adds	r3, #4
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fd fd20 	bl	8008f74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53a:	d10a      	bne.n	800b552 <prvAddCurrentTaskToDelayedList+0x3a>
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d007      	beq.n	800b552 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b542:	4b1a      	ldr	r3, [pc, #104]	; (800b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3304      	adds	r3, #4
 800b548:	4619      	mov	r1, r3
 800b54a:	4819      	ldr	r0, [pc, #100]	; (800b5b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b54c:	f7fd fcb5 	bl	8008eba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b550:	e026      	b.n	800b5a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4413      	add	r3, r2
 800b558:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b55a:	4b14      	ldr	r3, [pc, #80]	; (800b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	429a      	cmp	r2, r3
 800b568:	d209      	bcs.n	800b57e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b56a:	4b12      	ldr	r3, [pc, #72]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	4b0f      	ldr	r3, [pc, #60]	; (800b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3304      	adds	r3, #4
 800b574:	4619      	mov	r1, r3
 800b576:	4610      	mov	r0, r2
 800b578:	f7fd fcc3 	bl	8008f02 <vListInsert>
}
 800b57c:	e010      	b.n	800b5a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b57e:	4b0e      	ldr	r3, [pc, #56]	; (800b5b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	4b0a      	ldr	r3, [pc, #40]	; (800b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3304      	adds	r3, #4
 800b588:	4619      	mov	r1, r3
 800b58a:	4610      	mov	r0, r2
 800b58c:	f7fd fcb9 	bl	8008f02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b590:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	429a      	cmp	r2, r3
 800b598:	d202      	bcs.n	800b5a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b59a:	4a08      	ldr	r2, [pc, #32]	; (800b5bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	6013      	str	r3, [r2, #0]
}
 800b5a0:	bf00      	nop
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	200025ec 	.word	0x200025ec
 800b5ac:	20002114 	.word	0x20002114
 800b5b0:	200025d4 	.word	0x200025d4
 800b5b4:	200025a4 	.word	0x200025a4
 800b5b8:	200025a0 	.word	0x200025a0
 800b5bc:	20002608 	.word	0x20002608

0800b5c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08a      	sub	sp, #40	; 0x28
 800b5c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5ca:	f000 fb07 	bl	800bbdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5ce:	4b1c      	ldr	r3, [pc, #112]	; (800b640 <xTimerCreateTimerTask+0x80>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d021      	beq.n	800b61a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5de:	1d3a      	adds	r2, r7, #4
 800b5e0:	f107 0108 	add.w	r1, r7, #8
 800b5e4:	f107 030c 	add.w	r3, r7, #12
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fd fc1f 	bl	8008e2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	9202      	str	r2, [sp, #8]
 800b5f6:	9301      	str	r3, [sp, #4]
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	460a      	mov	r2, r1
 800b600:	4910      	ldr	r1, [pc, #64]	; (800b644 <xTimerCreateTimerTask+0x84>)
 800b602:	4811      	ldr	r0, [pc, #68]	; (800b648 <xTimerCreateTimerTask+0x88>)
 800b604:	f7fe fda4 	bl	800a150 <xTaskCreateStatic>
 800b608:	4603      	mov	r3, r0
 800b60a:	4a10      	ldr	r2, [pc, #64]	; (800b64c <xTimerCreateTimerTask+0x8c>)
 800b60c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b60e:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <xTimerCreateTimerTask+0x8c>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b616:	2301      	movs	r3, #1
 800b618:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10a      	bne.n	800b636 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	613b      	str	r3, [r7, #16]
}
 800b632:	bf00      	nop
 800b634:	e7fe      	b.n	800b634 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b636:	697b      	ldr	r3, [r7, #20]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	20002644 	.word	0x20002644
 800b644:	0800efb4 	.word	0x0800efb4
 800b648:	0800b785 	.word	0x0800b785
 800b64c:	20002648 	.word	0x20002648

0800b650 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b08a      	sub	sp, #40	; 0x28
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
 800b65c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b65e:	2300      	movs	r3, #0
 800b660:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10a      	bne.n	800b67e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	623b      	str	r3, [r7, #32]
}
 800b67a:	bf00      	nop
 800b67c:	e7fe      	b.n	800b67c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b67e:	4b1a      	ldr	r3, [pc, #104]	; (800b6e8 <xTimerGenericCommand+0x98>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d02a      	beq.n	800b6dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b05      	cmp	r3, #5
 800b696:	dc18      	bgt.n	800b6ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b698:	f7ff fbb2 	bl	800ae00 <xTaskGetSchedulerState>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d109      	bne.n	800b6b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6a2:	4b11      	ldr	r3, [pc, #68]	; (800b6e8 <xTimerGenericCommand+0x98>)
 800b6a4:	6818      	ldr	r0, [r3, #0]
 800b6a6:	f107 0110 	add.w	r1, r7, #16
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ae:	f7fd fee9 	bl	8009484 <xQueueGenericSend>
 800b6b2:	6278      	str	r0, [r7, #36]	; 0x24
 800b6b4:	e012      	b.n	800b6dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6b6:	4b0c      	ldr	r3, [pc, #48]	; (800b6e8 <xTimerGenericCommand+0x98>)
 800b6b8:	6818      	ldr	r0, [r3, #0]
 800b6ba:	f107 0110 	add.w	r1, r7, #16
 800b6be:	2300      	movs	r3, #0
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f7fd fedf 	bl	8009484 <xQueueGenericSend>
 800b6c6:	6278      	str	r0, [r7, #36]	; 0x24
 800b6c8:	e008      	b.n	800b6dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6ca:	4b07      	ldr	r3, [pc, #28]	; (800b6e8 <xTimerGenericCommand+0x98>)
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	f107 0110 	add.w	r1, r7, #16
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	f7fd ffd3 	bl	8009680 <xQueueGenericSendFromISR>
 800b6da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3728      	adds	r7, #40	; 0x28
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20002644 	.word	0x20002644

0800b6ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af02      	add	r7, sp, #8
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f6:	4b22      	ldr	r3, [pc, #136]	; (800b780 <prvProcessExpiredTimer+0x94>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	3304      	adds	r3, #4
 800b704:	4618      	mov	r0, r3
 800b706:	f7fd fc35 	bl	8008f74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	2b00      	cmp	r3, #0
 800b716:	d022      	beq.n	800b75e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	18d1      	adds	r1, r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	6978      	ldr	r0, [r7, #20]
 800b726:	f000 f8d1 	bl	800b8cc <prvInsertTimerInActiveList>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d01f      	beq.n	800b770 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b730:	2300      	movs	r3, #0
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	2300      	movs	r3, #0
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	2100      	movs	r1, #0
 800b73a:	6978      	ldr	r0, [r7, #20]
 800b73c:	f7ff ff88 	bl	800b650 <xTimerGenericCommand>
 800b740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d113      	bne.n	800b770 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74c:	f383 8811 	msr	BASEPRI, r3
 800b750:	f3bf 8f6f 	isb	sy
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	60fb      	str	r3, [r7, #12]
}
 800b75a:	bf00      	nop
 800b75c:	e7fe      	b.n	800b75c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b764:	f023 0301 	bic.w	r3, r3, #1
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	6a1b      	ldr	r3, [r3, #32]
 800b774:	6978      	ldr	r0, [r7, #20]
 800b776:	4798      	blx	r3
}
 800b778:	bf00      	nop
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	2000263c 	.word	0x2000263c

0800b784 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b78c:	f107 0308 	add.w	r3, r7, #8
 800b790:	4618      	mov	r0, r3
 800b792:	f000 f857 	bl	800b844 <prvGetNextExpireTime>
 800b796:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	4619      	mov	r1, r3
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 f803 	bl	800b7a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7a2:	f000 f8d5 	bl	800b950 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7a6:	e7f1      	b.n	800b78c <prvTimerTask+0x8>

0800b7a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7b2:	f7fe ff29 	bl	800a608 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7b6:	f107 0308 	add.w	r3, r7, #8
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 f866 	bl	800b88c <prvSampleTimeNow>
 800b7c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d130      	bne.n	800b82a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <prvProcessTimerOrBlockTask+0x3c>
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d806      	bhi.n	800b7e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b7d6:	f7fe ff25 	bl	800a624 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b7da:	68f9      	ldr	r1, [r7, #12]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff ff85 	bl	800b6ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b7e2:	e024      	b.n	800b82e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d008      	beq.n	800b7fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b7ea:	4b13      	ldr	r3, [pc, #76]	; (800b838 <prvProcessTimerOrBlockTask+0x90>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <prvProcessTimerOrBlockTask+0x50>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e000      	b.n	800b7fa <prvProcessTimerOrBlockTask+0x52>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b7fc:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <prvProcessTimerOrBlockTask+0x94>)
 800b7fe:	6818      	ldr	r0, [r3, #0]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	4619      	mov	r1, r3
 800b80a:	f7fe fc6d 	bl	800a0e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b80e:	f7fe ff09 	bl	800a624 <xTaskResumeAll>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10a      	bne.n	800b82e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b818:	4b09      	ldr	r3, [pc, #36]	; (800b840 <prvProcessTimerOrBlockTask+0x98>)
 800b81a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b81e:	601a      	str	r2, [r3, #0]
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	f3bf 8f6f 	isb	sy
}
 800b828:	e001      	b.n	800b82e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b82a:	f7fe fefb 	bl	800a624 <xTaskResumeAll>
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	20002640 	.word	0x20002640
 800b83c:	20002644 	.word	0x20002644
 800b840:	e000ed04 	.word	0xe000ed04

0800b844 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b84c:	4b0e      	ldr	r3, [pc, #56]	; (800b888 <prvGetNextExpireTime+0x44>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <prvGetNextExpireTime+0x16>
 800b856:	2201      	movs	r2, #1
 800b858:	e000      	b.n	800b85c <prvGetNextExpireTime+0x18>
 800b85a:	2200      	movs	r2, #0
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d105      	bne.n	800b874 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b868:	4b07      	ldr	r3, [pc, #28]	; (800b888 <prvGetNextExpireTime+0x44>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	60fb      	str	r3, [r7, #12]
 800b872:	e001      	b.n	800b878 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b874:	2300      	movs	r3, #0
 800b876:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b878:	68fb      	ldr	r3, [r7, #12]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	2000263c 	.word	0x2000263c

0800b88c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b894:	f7fe ff64 	bl	800a760 <xTaskGetTickCount>
 800b898:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b89a:	4b0b      	ldr	r3, [pc, #44]	; (800b8c8 <prvSampleTimeNow+0x3c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d205      	bcs.n	800b8b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8a4:	f000 f936 	bl	800bb14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	e002      	b.n	800b8b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8b6:	4a04      	ldr	r2, [pc, #16]	; (800b8c8 <prvSampleTimeNow+0x3c>)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	2000264c 	.word	0x2000264c

0800b8cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
 800b8d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d812      	bhi.n	800b918 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	1ad2      	subs	r2, r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d302      	bcc.n	800b906 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b900:	2301      	movs	r3, #1
 800b902:	617b      	str	r3, [r7, #20]
 800b904:	e01b      	b.n	800b93e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b906:	4b10      	ldr	r3, [pc, #64]	; (800b948 <prvInsertTimerInActiveList+0x7c>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	3304      	adds	r3, #4
 800b90e:	4619      	mov	r1, r3
 800b910:	4610      	mov	r0, r2
 800b912:	f7fd faf6 	bl	8008f02 <vListInsert>
 800b916:	e012      	b.n	800b93e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d206      	bcs.n	800b92e <prvInsertTimerInActiveList+0x62>
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d302      	bcc.n	800b92e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b928:	2301      	movs	r3, #1
 800b92a:	617b      	str	r3, [r7, #20]
 800b92c:	e007      	b.n	800b93e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b92e:	4b07      	ldr	r3, [pc, #28]	; (800b94c <prvInsertTimerInActiveList+0x80>)
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3304      	adds	r3, #4
 800b936:	4619      	mov	r1, r3
 800b938:	4610      	mov	r0, r2
 800b93a:	f7fd fae2 	bl	8008f02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b93e:	697b      	ldr	r3, [r7, #20]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	20002640 	.word	0x20002640
 800b94c:	2000263c 	.word	0x2000263c

0800b950 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08e      	sub	sp, #56	; 0x38
 800b954:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b956:	e0ca      	b.n	800baee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	da18      	bge.n	800b990 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b95e:	1d3b      	adds	r3, r7, #4
 800b960:	3304      	adds	r3, #4
 800b962:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10a      	bne.n	800b980 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	61fb      	str	r3, [r7, #28]
}
 800b97c:	bf00      	nop
 800b97e:	e7fe      	b.n	800b97e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b986:	6850      	ldr	r0, [r2, #4]
 800b988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b98a:	6892      	ldr	r2, [r2, #8]
 800b98c:	4611      	mov	r1, r2
 800b98e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	f2c0 80aa 	blt.w	800baec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d004      	beq.n	800b9ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fd fae3 	bl	8008f74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9ae:	463b      	mov	r3, r7
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7ff ff6b 	bl	800b88c <prvSampleTimeNow>
 800b9b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b09      	cmp	r3, #9
 800b9bc:	f200 8097 	bhi.w	800baee <prvProcessReceivedCommands+0x19e>
 800b9c0:	a201      	add	r2, pc, #4	; (adr r2, 800b9c8 <prvProcessReceivedCommands+0x78>)
 800b9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c6:	bf00      	nop
 800b9c8:	0800b9f1 	.word	0x0800b9f1
 800b9cc:	0800b9f1 	.word	0x0800b9f1
 800b9d0:	0800b9f1 	.word	0x0800b9f1
 800b9d4:	0800ba65 	.word	0x0800ba65
 800b9d8:	0800ba79 	.word	0x0800ba79
 800b9dc:	0800bac3 	.word	0x0800bac3
 800b9e0:	0800b9f1 	.word	0x0800b9f1
 800b9e4:	0800b9f1 	.word	0x0800b9f1
 800b9e8:	0800ba65 	.word	0x0800ba65
 800b9ec:	0800ba79 	.word	0x0800ba79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9f6:	f043 0301 	orr.w	r3, r3, #1
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	18d1      	adds	r1, r2, r3
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba10:	f7ff ff5c 	bl	800b8cc <prvInsertTimerInActiveList>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d069      	beq.n	800baee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba28:	f003 0304 	and.w	r3, r3, #4
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d05e      	beq.n	800baee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	699b      	ldr	r3, [r3, #24]
 800ba36:	441a      	add	r2, r3
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	2100      	movs	r1, #0
 800ba40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba42:	f7ff fe05 	bl	800b650 <xTimerGenericCommand>
 800ba46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d14f      	bne.n	800baee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	61bb      	str	r3, [r7, #24]
}
 800ba60:	bf00      	nop
 800ba62:	e7fe      	b.n	800ba62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba6a:	f023 0301 	bic.w	r3, r3, #1
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ba76:	e03a      	b.n	800baee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba7e:	f043 0301 	orr.w	r3, r3, #1
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10a      	bne.n	800baae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	617b      	str	r3, [r7, #20]
}
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	18d1      	adds	r1, r2, r3
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800babc:	f7ff ff06 	bl	800b8cc <prvInsertTimerInActiveList>
					break;
 800bac0:	e015      	b.n	800baee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bac8:	f003 0302 	and.w	r3, r3, #2
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d103      	bne.n	800bad8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bad2:	f000 fbdd 	bl	800c290 <vPortFree>
 800bad6:	e00a      	b.n	800baee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bade:	f023 0301 	bic.w	r3, r3, #1
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800baea:	e000      	b.n	800baee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800baec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800baee:	4b08      	ldr	r3, [pc, #32]	; (800bb10 <prvProcessReceivedCommands+0x1c0>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	1d39      	adds	r1, r7, #4
 800baf4:	2200      	movs	r2, #0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fd feea 	bl	80098d0 <xQueueReceive>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f47f af2a 	bne.w	800b958 <prvProcessReceivedCommands+0x8>
	}
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	3730      	adds	r7, #48	; 0x30
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20002644 	.word	0x20002644

0800bb14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b088      	sub	sp, #32
 800bb18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb1a:	e048      	b.n	800bbae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb1c:	4b2d      	ldr	r3, [pc, #180]	; (800bbd4 <prvSwitchTimerLists+0xc0>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb26:	4b2b      	ldr	r3, [pc, #172]	; (800bbd4 <prvSwitchTimerLists+0xc0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	3304      	adds	r3, #4
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fd fa1d 	bl	8008f74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d02e      	beq.n	800bbae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	4413      	add	r3, r2
 800bb58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d90e      	bls.n	800bb80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb6e:	4b19      	ldr	r3, [pc, #100]	; (800bbd4 <prvSwitchTimerLists+0xc0>)
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	3304      	adds	r3, #4
 800bb76:	4619      	mov	r1, r3
 800bb78:	4610      	mov	r0, r2
 800bb7a:	f7fd f9c2 	bl	8008f02 <vListInsert>
 800bb7e:	e016      	b.n	800bbae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb80:	2300      	movs	r3, #0
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	2300      	movs	r3, #0
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	2100      	movs	r1, #0
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff fd60 	bl	800b650 <xTimerGenericCommand>
 800bb90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10a      	bne.n	800bbae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	603b      	str	r3, [r7, #0]
}
 800bbaa:	bf00      	nop
 800bbac:	e7fe      	b.n	800bbac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbae:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <prvSwitchTimerLists+0xc0>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1b1      	bne.n	800bb1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbb8:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <prvSwitchTimerLists+0xc0>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbbe:	4b06      	ldr	r3, [pc, #24]	; (800bbd8 <prvSwitchTimerLists+0xc4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a04      	ldr	r2, [pc, #16]	; (800bbd4 <prvSwitchTimerLists+0xc0>)
 800bbc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbc6:	4a04      	ldr	r2, [pc, #16]	; (800bbd8 <prvSwitchTimerLists+0xc4>)
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	6013      	str	r3, [r2, #0]
}
 800bbcc:	bf00      	nop
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	2000263c 	.word	0x2000263c
 800bbd8:	20002640 	.word	0x20002640

0800bbdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bbe2:	f000 f967 	bl	800beb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bbe6:	4b15      	ldr	r3, [pc, #84]	; (800bc3c <prvCheckForValidListAndQueue+0x60>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d120      	bne.n	800bc30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bbee:	4814      	ldr	r0, [pc, #80]	; (800bc40 <prvCheckForValidListAndQueue+0x64>)
 800bbf0:	f7fd f936 	bl	8008e60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bbf4:	4813      	ldr	r0, [pc, #76]	; (800bc44 <prvCheckForValidListAndQueue+0x68>)
 800bbf6:	f7fd f933 	bl	8008e60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bbfa:	4b13      	ldr	r3, [pc, #76]	; (800bc48 <prvCheckForValidListAndQueue+0x6c>)
 800bbfc:	4a10      	ldr	r2, [pc, #64]	; (800bc40 <prvCheckForValidListAndQueue+0x64>)
 800bbfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc00:	4b12      	ldr	r3, [pc, #72]	; (800bc4c <prvCheckForValidListAndQueue+0x70>)
 800bc02:	4a10      	ldr	r2, [pc, #64]	; (800bc44 <prvCheckForValidListAndQueue+0x68>)
 800bc04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc06:	2300      	movs	r3, #0
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	4b11      	ldr	r3, [pc, #68]	; (800bc50 <prvCheckForValidListAndQueue+0x74>)
 800bc0c:	4a11      	ldr	r2, [pc, #68]	; (800bc54 <prvCheckForValidListAndQueue+0x78>)
 800bc0e:	2110      	movs	r1, #16
 800bc10:	200a      	movs	r0, #10
 800bc12:	f7fd fa41 	bl	8009098 <xQueueGenericCreateStatic>
 800bc16:	4603      	mov	r3, r0
 800bc18:	4a08      	ldr	r2, [pc, #32]	; (800bc3c <prvCheckForValidListAndQueue+0x60>)
 800bc1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc1c:	4b07      	ldr	r3, [pc, #28]	; (800bc3c <prvCheckForValidListAndQueue+0x60>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d005      	beq.n	800bc30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc24:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <prvCheckForValidListAndQueue+0x60>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	490b      	ldr	r1, [pc, #44]	; (800bc58 <prvCheckForValidListAndQueue+0x7c>)
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fe fa08 	bl	800a040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc30:	f000 f970 	bl	800bf14 <vPortExitCritical>
}
 800bc34:	bf00      	nop
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20002644 	.word	0x20002644
 800bc40:	20002614 	.word	0x20002614
 800bc44:	20002628 	.word	0x20002628
 800bc48:	2000263c 	.word	0x2000263c
 800bc4c:	20002640 	.word	0x20002640
 800bc50:	200026f0 	.word	0x200026f0
 800bc54:	20002650 	.word	0x20002650
 800bc58:	0800efbc 	.word	0x0800efbc

0800bc5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3b04      	subs	r3, #4
 800bc6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bc74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3b04      	subs	r3, #4
 800bc7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	f023 0201 	bic.w	r2, r3, #1
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	3b04      	subs	r3, #4
 800bc8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc8c:	4a0c      	ldr	r2, [pc, #48]	; (800bcc0 <pxPortInitialiseStack+0x64>)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3b14      	subs	r3, #20
 800bc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	3b04      	subs	r3, #4
 800bca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f06f 0202 	mvn.w	r2, #2
 800bcaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3b20      	subs	r3, #32
 800bcb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr
 800bcc0:	0800bcc5 	.word	0x0800bcc5

0800bcc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bcce:	4b12      	ldr	r3, [pc, #72]	; (800bd18 <prvTaskExitError+0x54>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd6:	d00a      	beq.n	800bcee <prvTaskExitError+0x2a>
	__asm volatile
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	60fb      	str	r3, [r7, #12]
}
 800bcea:	bf00      	nop
 800bcec:	e7fe      	b.n	800bcec <prvTaskExitError+0x28>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	60bb      	str	r3, [r7, #8]
}
 800bd00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd02:	bf00      	nop
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d0fc      	beq.n	800bd04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd0a:	bf00      	nop
 800bd0c:	bf00      	nop
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	20000104 	.word	0x20000104
 800bd1c:	00000000 	.word	0x00000000

0800bd20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd20:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <pxCurrentTCBConst2>)
 800bd22:	6819      	ldr	r1, [r3, #0]
 800bd24:	6808      	ldr	r0, [r1, #0]
 800bd26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2a:	f380 8809 	msr	PSP, r0
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f04f 0000 	mov.w	r0, #0
 800bd36:	f380 8811 	msr	BASEPRI, r0
 800bd3a:	4770      	bx	lr
 800bd3c:	f3af 8000 	nop.w

0800bd40 <pxCurrentTCBConst2>:
 800bd40:	20002114 	.word	0x20002114
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop

0800bd48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd48:	4808      	ldr	r0, [pc, #32]	; (800bd6c <prvPortStartFirstTask+0x24>)
 800bd4a:	6800      	ldr	r0, [r0, #0]
 800bd4c:	6800      	ldr	r0, [r0, #0]
 800bd4e:	f380 8808 	msr	MSP, r0
 800bd52:	f04f 0000 	mov.w	r0, #0
 800bd56:	f380 8814 	msr	CONTROL, r0
 800bd5a:	b662      	cpsie	i
 800bd5c:	b661      	cpsie	f
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	df00      	svc	0
 800bd68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd6a:	bf00      	nop
 800bd6c:	e000ed08 	.word	0xe000ed08

0800bd70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bd76:	4b46      	ldr	r3, [pc, #280]	; (800be90 <xPortStartScheduler+0x120>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a46      	ldr	r2, [pc, #280]	; (800be94 <xPortStartScheduler+0x124>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d10a      	bne.n	800bd96 <xPortStartScheduler+0x26>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	613b      	str	r3, [r7, #16]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd96:	4b3e      	ldr	r3, [pc, #248]	; (800be90 <xPortStartScheduler+0x120>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a3f      	ldr	r2, [pc, #252]	; (800be98 <xPortStartScheduler+0x128>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d10a      	bne.n	800bdb6 <xPortStartScheduler+0x46>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	60fb      	str	r3, [r7, #12]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bdb6:	4b39      	ldr	r3, [pc, #228]	; (800be9c <xPortStartScheduler+0x12c>)
 800bdb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	22ff      	movs	r2, #255	; 0xff
 800bdc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bdd0:	78fb      	ldrb	r3, [r7, #3]
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	4b31      	ldr	r3, [pc, #196]	; (800bea0 <xPortStartScheduler+0x130>)
 800bddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bdde:	4b31      	ldr	r3, [pc, #196]	; (800bea4 <xPortStartScheduler+0x134>)
 800bde0:	2207      	movs	r2, #7
 800bde2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bde4:	e009      	b.n	800bdfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bde6:	4b2f      	ldr	r3, [pc, #188]	; (800bea4 <xPortStartScheduler+0x134>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	4a2d      	ldr	r2, [pc, #180]	; (800bea4 <xPortStartScheduler+0x134>)
 800bdee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bdf0:	78fb      	ldrb	r3, [r7, #3]
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdfa:	78fb      	ldrb	r3, [r7, #3]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be02:	2b80      	cmp	r3, #128	; 0x80
 800be04:	d0ef      	beq.n	800bde6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be06:	4b27      	ldr	r3, [pc, #156]	; (800bea4 <xPortStartScheduler+0x134>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f1c3 0307 	rsb	r3, r3, #7
 800be0e:	2b04      	cmp	r3, #4
 800be10:	d00a      	beq.n	800be28 <xPortStartScheduler+0xb8>
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	60bb      	str	r3, [r7, #8]
}
 800be24:	bf00      	nop
 800be26:	e7fe      	b.n	800be26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be28:	4b1e      	ldr	r3, [pc, #120]	; (800bea4 <xPortStartScheduler+0x134>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	021b      	lsls	r3, r3, #8
 800be2e:	4a1d      	ldr	r2, [pc, #116]	; (800bea4 <xPortStartScheduler+0x134>)
 800be30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be32:	4b1c      	ldr	r3, [pc, #112]	; (800bea4 <xPortStartScheduler+0x134>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be3a:	4a1a      	ldr	r2, [pc, #104]	; (800bea4 <xPortStartScheduler+0x134>)
 800be3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	b2da      	uxtb	r2, r3
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be46:	4b18      	ldr	r3, [pc, #96]	; (800bea8 <xPortStartScheduler+0x138>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <xPortStartScheduler+0x138>)
 800be4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be52:	4b15      	ldr	r3, [pc, #84]	; (800bea8 <xPortStartScheduler+0x138>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a14      	ldr	r2, [pc, #80]	; (800bea8 <xPortStartScheduler+0x138>)
 800be58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800be5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be5e:	f000 f8dd 	bl	800c01c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be62:	4b12      	ldr	r3, [pc, #72]	; (800beac <xPortStartScheduler+0x13c>)
 800be64:	2200      	movs	r2, #0
 800be66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be68:	f000 f8fc 	bl	800c064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be6c:	4b10      	ldr	r3, [pc, #64]	; (800beb0 <xPortStartScheduler+0x140>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a0f      	ldr	r2, [pc, #60]	; (800beb0 <xPortStartScheduler+0x140>)
 800be72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800be76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be78:	f7ff ff66 	bl	800bd48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be7c:	f7fe fd3a 	bl	800a8f4 <vTaskSwitchContext>
	prvTaskExitError();
 800be80:	f7ff ff20 	bl	800bcc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	e000ed00 	.word	0xe000ed00
 800be94:	410fc271 	.word	0x410fc271
 800be98:	410fc270 	.word	0x410fc270
 800be9c:	e000e400 	.word	0xe000e400
 800bea0:	20002740 	.word	0x20002740
 800bea4:	20002744 	.word	0x20002744
 800bea8:	e000ed20 	.word	0xe000ed20
 800beac:	20000104 	.word	0x20000104
 800beb0:	e000ef34 	.word	0xe000ef34

0800beb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	607b      	str	r3, [r7, #4]
}
 800becc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bece:	4b0f      	ldr	r3, [pc, #60]	; (800bf0c <vPortEnterCritical+0x58>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3301      	adds	r3, #1
 800bed4:	4a0d      	ldr	r2, [pc, #52]	; (800bf0c <vPortEnterCritical+0x58>)
 800bed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bed8:	4b0c      	ldr	r3, [pc, #48]	; (800bf0c <vPortEnterCritical+0x58>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d10f      	bne.n	800bf00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bee0:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <vPortEnterCritical+0x5c>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00a      	beq.n	800bf00 <vPortEnterCritical+0x4c>
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	603b      	str	r3, [r7, #0]
}
 800befc:	bf00      	nop
 800befe:	e7fe      	b.n	800befe <vPortEnterCritical+0x4a>
	}
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	20000104 	.word	0x20000104
 800bf10:	e000ed04 	.word	0xe000ed04

0800bf14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf1a:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <vPortExitCritical+0x50>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10a      	bne.n	800bf38 <vPortExitCritical+0x24>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	607b      	str	r3, [r7, #4]
}
 800bf34:	bf00      	nop
 800bf36:	e7fe      	b.n	800bf36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf38:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <vPortExitCritical+0x50>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	4a09      	ldr	r2, [pc, #36]	; (800bf64 <vPortExitCritical+0x50>)
 800bf40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf42:	4b08      	ldr	r3, [pc, #32]	; (800bf64 <vPortExitCritical+0x50>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d105      	bne.n	800bf56 <vPortExitCritical+0x42>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	f383 8811 	msr	BASEPRI, r3
}
 800bf54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	20000104 	.word	0x20000104
	...

0800bf70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf70:	f3ef 8009 	mrs	r0, PSP
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	4b15      	ldr	r3, [pc, #84]	; (800bfd0 <pxCurrentTCBConst>)
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	f01e 0f10 	tst.w	lr, #16
 800bf80:	bf08      	it	eq
 800bf82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8a:	6010      	str	r0, [r2, #0]
 800bf8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bf94:	f380 8811 	msr	BASEPRI, r0
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f7fe fca8 	bl	800a8f4 <vTaskSwitchContext>
 800bfa4:	f04f 0000 	mov.w	r0, #0
 800bfa8:	f380 8811 	msr	BASEPRI, r0
 800bfac:	bc09      	pop	{r0, r3}
 800bfae:	6819      	ldr	r1, [r3, #0]
 800bfb0:	6808      	ldr	r0, [r1, #0]
 800bfb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb6:	f01e 0f10 	tst.w	lr, #16
 800bfba:	bf08      	it	eq
 800bfbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bfc0:	f380 8809 	msr	PSP, r0
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	f3af 8000 	nop.w

0800bfd0 <pxCurrentTCBConst>:
 800bfd0:	20002114 	.word	0x20002114
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop

0800bfd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
	__asm volatile
 800bfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe2:	f383 8811 	msr	BASEPRI, r3
 800bfe6:	f3bf 8f6f 	isb	sy
 800bfea:	f3bf 8f4f 	dsb	sy
 800bfee:	607b      	str	r3, [r7, #4]
}
 800bff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bff2:	f7fe fbc5 	bl	800a780 <xTaskIncrementTick>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bffc:	4b06      	ldr	r3, [pc, #24]	; (800c018 <xPortSysTickHandler+0x40>)
 800bffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	2300      	movs	r3, #0
 800c006:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	f383 8811 	msr	BASEPRI, r3
}
 800c00e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c010:	bf00      	nop
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	e000ed04 	.word	0xe000ed04

0800c01c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c01c:	b480      	push	{r7}
 800c01e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c020:	4b0b      	ldr	r3, [pc, #44]	; (800c050 <vPortSetupTimerInterrupt+0x34>)
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c026:	4b0b      	ldr	r3, [pc, #44]	; (800c054 <vPortSetupTimerInterrupt+0x38>)
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c02c:	4b0a      	ldr	r3, [pc, #40]	; (800c058 <vPortSetupTimerInterrupt+0x3c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a0a      	ldr	r2, [pc, #40]	; (800c05c <vPortSetupTimerInterrupt+0x40>)
 800c032:	fba2 2303 	umull	r2, r3, r2, r3
 800c036:	095b      	lsrs	r3, r3, #5
 800c038:	4a09      	ldr	r2, [pc, #36]	; (800c060 <vPortSetupTimerInterrupt+0x44>)
 800c03a:	3b01      	subs	r3, #1
 800c03c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c03e:	4b04      	ldr	r3, [pc, #16]	; (800c050 <vPortSetupTimerInterrupt+0x34>)
 800c040:	2207      	movs	r2, #7
 800c042:	601a      	str	r2, [r3, #0]
}
 800c044:	bf00      	nop
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	e000e010 	.word	0xe000e010
 800c054:	e000e018 	.word	0xe000e018
 800c058:	20000050 	.word	0x20000050
 800c05c:	10624dd3 	.word	0x10624dd3
 800c060:	e000e014 	.word	0xe000e014

0800c064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c074 <vPortEnableVFP+0x10>
 800c068:	6801      	ldr	r1, [r0, #0]
 800c06a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c06e:	6001      	str	r1, [r0, #0]
 800c070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c072:	bf00      	nop
 800c074:	e000ed88 	.word	0xe000ed88

0800c078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c07e:	f3ef 8305 	mrs	r3, IPSR
 800c082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b0f      	cmp	r3, #15
 800c088:	d914      	bls.n	800c0b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c08a:	4a17      	ldr	r2, [pc, #92]	; (800c0e8 <vPortValidateInterruptPriority+0x70>)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	4413      	add	r3, r2
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c094:	4b15      	ldr	r3, [pc, #84]	; (800c0ec <vPortValidateInterruptPriority+0x74>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	7afa      	ldrb	r2, [r7, #11]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d20a      	bcs.n	800c0b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	607b      	str	r3, [r7, #4]
}
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c0b4:	4b0e      	ldr	r3, [pc, #56]	; (800c0f0 <vPortValidateInterruptPriority+0x78>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c0bc:	4b0d      	ldr	r3, [pc, #52]	; (800c0f4 <vPortValidateInterruptPriority+0x7c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d90a      	bls.n	800c0da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	603b      	str	r3, [r7, #0]
}
 800c0d6:	bf00      	nop
 800c0d8:	e7fe      	b.n	800c0d8 <vPortValidateInterruptPriority+0x60>
	}
 800c0da:	bf00      	nop
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	e000e3f0 	.word	0xe000e3f0
 800c0ec:	20002740 	.word	0x20002740
 800c0f0:	e000ed0c 	.word	0xe000ed0c
 800c0f4:	20002744 	.word	0x20002744

0800c0f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08a      	sub	sp, #40	; 0x28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c100:	2300      	movs	r3, #0
 800c102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c104:	f7fe fa80 	bl	800a608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c108:	4b5b      	ldr	r3, [pc, #364]	; (800c278 <pvPortMalloc+0x180>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c110:	f000 f920 	bl	800c354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c114:	4b59      	ldr	r3, [pc, #356]	; (800c27c <pvPortMalloc+0x184>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4013      	ands	r3, r2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f040 8093 	bne.w	800c248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d01d      	beq.n	800c164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c128:	2208      	movs	r2, #8
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4413      	add	r3, r2
 800c12e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f003 0307 	and.w	r3, r3, #7
 800c136:	2b00      	cmp	r3, #0
 800c138:	d014      	beq.n	800c164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f023 0307 	bic.w	r3, r3, #7
 800c140:	3308      	adds	r3, #8
 800c142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f003 0307 	and.w	r3, r3, #7
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00a      	beq.n	800c164 <pvPortMalloc+0x6c>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	617b      	str	r3, [r7, #20]
}
 800c160:	bf00      	nop
 800c162:	e7fe      	b.n	800c162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d06e      	beq.n	800c248 <pvPortMalloc+0x150>
 800c16a:	4b45      	ldr	r3, [pc, #276]	; (800c280 <pvPortMalloc+0x188>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	429a      	cmp	r2, r3
 800c172:	d869      	bhi.n	800c248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c174:	4b43      	ldr	r3, [pc, #268]	; (800c284 <pvPortMalloc+0x18c>)
 800c176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c178:	4b42      	ldr	r3, [pc, #264]	; (800c284 <pvPortMalloc+0x18c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c17e:	e004      	b.n	800c18a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	429a      	cmp	r2, r3
 800c192:	d903      	bls.n	800c19c <pvPortMalloc+0xa4>
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1f1      	bne.n	800c180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c19c:	4b36      	ldr	r3, [pc, #216]	; (800c278 <pvPortMalloc+0x180>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d050      	beq.n	800c248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2208      	movs	r2, #8
 800c1ac:	4413      	add	r3, r2
 800c1ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	6a3b      	ldr	r3, [r7, #32]
 800c1b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	2308      	movs	r3, #8
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d91f      	bls.n	800c208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	f003 0307 	and.w	r3, r3, #7
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00a      	beq.n	800c1f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	613b      	str	r3, [r7, #16]
}
 800c1ec:	bf00      	nop
 800c1ee:	e7fe      	b.n	800c1ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	685a      	ldr	r2, [r3, #4]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	1ad2      	subs	r2, r2, r3
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c202:	69b8      	ldr	r0, [r7, #24]
 800c204:	f000 f908 	bl	800c418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c208:	4b1d      	ldr	r3, [pc, #116]	; (800c280 <pvPortMalloc+0x188>)
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	4a1b      	ldr	r2, [pc, #108]	; (800c280 <pvPortMalloc+0x188>)
 800c214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c216:	4b1a      	ldr	r3, [pc, #104]	; (800c280 <pvPortMalloc+0x188>)
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	4b1b      	ldr	r3, [pc, #108]	; (800c288 <pvPortMalloc+0x190>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d203      	bcs.n	800c22a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c222:	4b17      	ldr	r3, [pc, #92]	; (800c280 <pvPortMalloc+0x188>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a18      	ldr	r2, [pc, #96]	; (800c288 <pvPortMalloc+0x190>)
 800c228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	4b13      	ldr	r3, [pc, #76]	; (800c27c <pvPortMalloc+0x184>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	431a      	orrs	r2, r3
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c23e:	4b13      	ldr	r3, [pc, #76]	; (800c28c <pvPortMalloc+0x194>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3301      	adds	r3, #1
 800c244:	4a11      	ldr	r2, [pc, #68]	; (800c28c <pvPortMalloc+0x194>)
 800c246:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c248:	f7fe f9ec 	bl	800a624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	f003 0307 	and.w	r3, r3, #7
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00a      	beq.n	800c26c <pvPortMalloc+0x174>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	60fb      	str	r3, [r7, #12]
}
 800c268:	bf00      	nop
 800c26a:	e7fe      	b.n	800c26a <pvPortMalloc+0x172>
	return pvReturn;
 800c26c:	69fb      	ldr	r3, [r7, #28]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3728      	adds	r7, #40	; 0x28
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	20006750 	.word	0x20006750
 800c27c:	20006764 	.word	0x20006764
 800c280:	20006754 	.word	0x20006754
 800c284:	20006748 	.word	0x20006748
 800c288:	20006758 	.word	0x20006758
 800c28c:	2000675c 	.word	0x2000675c

0800c290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d04d      	beq.n	800c33e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c2a2:	2308      	movs	r3, #8
 800c2a4:	425b      	negs	r3, r3
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	4b24      	ldr	r3, [pc, #144]	; (800c348 <vPortFree+0xb8>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10a      	bne.n	800c2d4 <vPortFree+0x44>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	60fb      	str	r3, [r7, #12]
}
 800c2d0:	bf00      	nop
 800c2d2:	e7fe      	b.n	800c2d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00a      	beq.n	800c2f2 <vPortFree+0x62>
	__asm volatile
 800c2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	60bb      	str	r3, [r7, #8]
}
 800c2ee:	bf00      	nop
 800c2f0:	e7fe      	b.n	800c2f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	685a      	ldr	r2, [r3, #4]
 800c2f6:	4b14      	ldr	r3, [pc, #80]	; (800c348 <vPortFree+0xb8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d01e      	beq.n	800c33e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d11a      	bne.n	800c33e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	4b0e      	ldr	r3, [pc, #56]	; (800c348 <vPortFree+0xb8>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	43db      	mvns	r3, r3
 800c312:	401a      	ands	r2, r3
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c318:	f7fe f976 	bl	800a608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	4b0a      	ldr	r3, [pc, #40]	; (800c34c <vPortFree+0xbc>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4413      	add	r3, r2
 800c326:	4a09      	ldr	r2, [pc, #36]	; (800c34c <vPortFree+0xbc>)
 800c328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c32a:	6938      	ldr	r0, [r7, #16]
 800c32c:	f000 f874 	bl	800c418 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c330:	4b07      	ldr	r3, [pc, #28]	; (800c350 <vPortFree+0xc0>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	3301      	adds	r3, #1
 800c336:	4a06      	ldr	r2, [pc, #24]	; (800c350 <vPortFree+0xc0>)
 800c338:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c33a:	f7fe f973 	bl	800a624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c33e:	bf00      	nop
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20006764 	.word	0x20006764
 800c34c:	20006754 	.word	0x20006754
 800c350:	20006760 	.word	0x20006760

0800c354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c35a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c35e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c360:	4b27      	ldr	r3, [pc, #156]	; (800c400 <prvHeapInit+0xac>)
 800c362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00c      	beq.n	800c388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3307      	adds	r3, #7
 800c372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f023 0307 	bic.w	r3, r3, #7
 800c37a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	4a1f      	ldr	r2, [pc, #124]	; (800c400 <prvHeapInit+0xac>)
 800c384:	4413      	add	r3, r2
 800c386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c38c:	4a1d      	ldr	r2, [pc, #116]	; (800c404 <prvHeapInit+0xb0>)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c392:	4b1c      	ldr	r3, [pc, #112]	; (800c404 <prvHeapInit+0xb0>)
 800c394:	2200      	movs	r2, #0
 800c396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	4413      	add	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c3a0:	2208      	movs	r2, #8
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	1a9b      	subs	r3, r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f023 0307 	bic.w	r3, r3, #7
 800c3ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4a15      	ldr	r2, [pc, #84]	; (800c408 <prvHeapInit+0xb4>)
 800c3b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3b6:	4b14      	ldr	r3, [pc, #80]	; (800c408 <prvHeapInit+0xb4>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c3be:	4b12      	ldr	r3, [pc, #72]	; (800c408 <prvHeapInit+0xb4>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	1ad2      	subs	r2, r2, r3
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3d4:	4b0c      	ldr	r3, [pc, #48]	; (800c408 <prvHeapInit+0xb4>)
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	4a0a      	ldr	r2, [pc, #40]	; (800c40c <prvHeapInit+0xb8>)
 800c3e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	4a09      	ldr	r2, [pc, #36]	; (800c410 <prvHeapInit+0xbc>)
 800c3ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3ec:	4b09      	ldr	r3, [pc, #36]	; (800c414 <prvHeapInit+0xc0>)
 800c3ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c3f2:	601a      	str	r2, [r3, #0]
}
 800c3f4:	bf00      	nop
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr
 800c400:	20002748 	.word	0x20002748
 800c404:	20006748 	.word	0x20006748
 800c408:	20006750 	.word	0x20006750
 800c40c:	20006758 	.word	0x20006758
 800c410:	20006754 	.word	0x20006754
 800c414:	20006764 	.word	0x20006764

0800c418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c420:	4b28      	ldr	r3, [pc, #160]	; (800c4c4 <prvInsertBlockIntoFreeList+0xac>)
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	e002      	b.n	800c42c <prvInsertBlockIntoFreeList+0x14>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	429a      	cmp	r2, r3
 800c434:	d8f7      	bhi.n	800c426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	4413      	add	r3, r2
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	429a      	cmp	r2, r3
 800c446:	d108      	bne.n	800c45a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	441a      	add	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	441a      	add	r2, r3
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d118      	bne.n	800c4a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	4b15      	ldr	r3, [pc, #84]	; (800c4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	429a      	cmp	r2, r3
 800c478:	d00d      	beq.n	800c496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	441a      	add	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	601a      	str	r2, [r3, #0]
 800c494:	e008      	b.n	800c4a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c496:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	601a      	str	r2, [r3, #0]
 800c49e:	e003      	b.n	800c4a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d002      	beq.n	800c4b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4b6:	bf00      	nop
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	20006748 	.word	0x20006748
 800c4c8:	20006750 	.word	0x20006750

0800c4cc <__errno>:
 800c4cc:	4b01      	ldr	r3, [pc, #4]	; (800c4d4 <__errno+0x8>)
 800c4ce:	6818      	ldr	r0, [r3, #0]
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20000108 	.word	0x20000108

0800c4d8 <_fgets_r>:
 800c4d8:	2a01      	cmp	r2, #1
 800c4da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4de:	4680      	mov	r8, r0
 800c4e0:	460d      	mov	r5, r1
 800c4e2:	4617      	mov	r7, r2
 800c4e4:	461c      	mov	r4, r3
 800c4e6:	dc03      	bgt.n	800c4f0 <_fgets_r+0x18>
 800c4e8:	2500      	movs	r5, #0
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f0:	b118      	cbz	r0, 800c4fa <_fgets_r+0x22>
 800c4f2:	6983      	ldr	r3, [r0, #24]
 800c4f4:	b90b      	cbnz	r3, 800c4fa <_fgets_r+0x22>
 800c4f6:	f000 f8cb 	bl	800c690 <__sinit>
 800c4fa:	4b31      	ldr	r3, [pc, #196]	; (800c5c0 <_fgets_r+0xe8>)
 800c4fc:	429c      	cmp	r4, r3
 800c4fe:	d120      	bne.n	800c542 <_fgets_r+0x6a>
 800c500:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c506:	07de      	lsls	r6, r3, #31
 800c508:	d405      	bmi.n	800c516 <_fgets_r+0x3e>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	0598      	lsls	r0, r3, #22
 800c50e:	d402      	bmi.n	800c516 <_fgets_r+0x3e>
 800c510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c512:	f000 fb2f 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800c516:	3f01      	subs	r7, #1
 800c518:	46a9      	mov	r9, r5
 800c51a:	6866      	ldr	r6, [r4, #4]
 800c51c:	b9f6      	cbnz	r6, 800c55c <_fgets_r+0x84>
 800c51e:	4621      	mov	r1, r4
 800c520:	4640      	mov	r0, r8
 800c522:	f001 f887 	bl	800d634 <__srefill_r>
 800c526:	b1c0      	cbz	r0, 800c55a <_fgets_r+0x82>
 800c528:	45a9      	cmp	r9, r5
 800c52a:	d145      	bne.n	800c5b8 <_fgets_r+0xe0>
 800c52c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c52e:	07d9      	lsls	r1, r3, #31
 800c530:	d4da      	bmi.n	800c4e8 <_fgets_r+0x10>
 800c532:	89a5      	ldrh	r5, [r4, #12]
 800c534:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 800c538:	d1d6      	bne.n	800c4e8 <_fgets_r+0x10>
 800c53a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c53c:	f000 fb1b 	bl	800cb76 <__retarget_lock_release_recursive>
 800c540:	e7d3      	b.n	800c4ea <_fgets_r+0x12>
 800c542:	4b20      	ldr	r3, [pc, #128]	; (800c5c4 <_fgets_r+0xec>)
 800c544:	429c      	cmp	r4, r3
 800c546:	d102      	bne.n	800c54e <_fgets_r+0x76>
 800c548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c54c:	e7da      	b.n	800c504 <_fgets_r+0x2c>
 800c54e:	4b1e      	ldr	r3, [pc, #120]	; (800c5c8 <_fgets_r+0xf0>)
 800c550:	429c      	cmp	r4, r3
 800c552:	bf08      	it	eq
 800c554:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 800c558:	e7d4      	b.n	800c504 <_fgets_r+0x2c>
 800c55a:	6866      	ldr	r6, [r4, #4]
 800c55c:	f8d4 a000 	ldr.w	sl, [r4]
 800c560:	42be      	cmp	r6, r7
 800c562:	bf28      	it	cs
 800c564:	463e      	movcs	r6, r7
 800c566:	4632      	mov	r2, r6
 800c568:	210a      	movs	r1, #10
 800c56a:	4650      	mov	r0, sl
 800c56c:	f7f3 fe38 	bl	80001e0 <memchr>
 800c570:	6863      	ldr	r3, [r4, #4]
 800c572:	b1a0      	cbz	r0, 800c59e <_fgets_r+0xc6>
 800c574:	3001      	adds	r0, #1
 800c576:	eba0 060a 	sub.w	r6, r0, sl
 800c57a:	1b9b      	subs	r3, r3, r6
 800c57c:	e9c4 0300 	strd	r0, r3, [r4]
 800c580:	4632      	mov	r2, r6
 800c582:	4651      	mov	r1, sl
 800c584:	4648      	mov	r0, r9
 800c586:	f000 fb5d 	bl	800cc44 <memcpy>
 800c58a:	2300      	movs	r3, #0
 800c58c:	f809 3006 	strb.w	r3, [r9, r6]
 800c590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c592:	07da      	lsls	r2, r3, #31
 800c594:	d4a9      	bmi.n	800c4ea <_fgets_r+0x12>
 800c596:	89a3      	ldrh	r3, [r4, #12]
 800c598:	059b      	lsls	r3, r3, #22
 800c59a:	d4a6      	bmi.n	800c4ea <_fgets_r+0x12>
 800c59c:	e7cd      	b.n	800c53a <_fgets_r+0x62>
 800c59e:	1b9b      	subs	r3, r3, r6
 800c5a0:	6063      	str	r3, [r4, #4]
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	4433      	add	r3, r6
 800c5a6:	4648      	mov	r0, r9
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	4651      	mov	r1, sl
 800c5ae:	f000 fb49 	bl	800cc44 <memcpy>
 800c5b2:	1bbf      	subs	r7, r7, r6
 800c5b4:	44b1      	add	r9, r6
 800c5b6:	d1b0      	bne.n	800c51a <_fgets_r+0x42>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	f889 3000 	strb.w	r3, [r9]
 800c5be:	e7e7      	b.n	800c590 <_fgets_r+0xb8>
 800c5c0:	0800f6c4 	.word	0x0800f6c4
 800c5c4:	0800f6e4 	.word	0x0800f6e4
 800c5c8:	0800f6a4 	.word	0x0800f6a4

0800c5cc <fgets>:
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	460a      	mov	r2, r1
 800c5d0:	4601      	mov	r1, r0
 800c5d2:	4802      	ldr	r0, [pc, #8]	; (800c5dc <fgets+0x10>)
 800c5d4:	6800      	ldr	r0, [r0, #0]
 800c5d6:	f7ff bf7f 	b.w	800c4d8 <_fgets_r>
 800c5da:	bf00      	nop
 800c5dc:	20000108 	.word	0x20000108

0800c5e0 <std>:
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	b510      	push	{r4, lr}
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	e9c0 3300 	strd	r3, r3, [r0]
 800c5ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5ee:	6083      	str	r3, [r0, #8]
 800c5f0:	8181      	strh	r1, [r0, #12]
 800c5f2:	6643      	str	r3, [r0, #100]	; 0x64
 800c5f4:	81c2      	strh	r2, [r0, #14]
 800c5f6:	6183      	str	r3, [r0, #24]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	2208      	movs	r2, #8
 800c5fc:	305c      	adds	r0, #92	; 0x5c
 800c5fe:	f000 fb2f 	bl	800cc60 <memset>
 800c602:	4b05      	ldr	r3, [pc, #20]	; (800c618 <std+0x38>)
 800c604:	6263      	str	r3, [r4, #36]	; 0x24
 800c606:	4b05      	ldr	r3, [pc, #20]	; (800c61c <std+0x3c>)
 800c608:	62a3      	str	r3, [r4, #40]	; 0x28
 800c60a:	4b05      	ldr	r3, [pc, #20]	; (800c620 <std+0x40>)
 800c60c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c60e:	4b05      	ldr	r3, [pc, #20]	; (800c624 <std+0x44>)
 800c610:	6224      	str	r4, [r4, #32]
 800c612:	6323      	str	r3, [r4, #48]	; 0x30
 800c614:	bd10      	pop	{r4, pc}
 800c616:	bf00      	nop
 800c618:	0800d98d 	.word	0x0800d98d
 800c61c:	0800d9b3 	.word	0x0800d9b3
 800c620:	0800d9eb 	.word	0x0800d9eb
 800c624:	0800da0f 	.word	0x0800da0f

0800c628 <_cleanup_r>:
 800c628:	4901      	ldr	r1, [pc, #4]	; (800c630 <_cleanup_r+0x8>)
 800c62a:	f000 b9f0 	b.w	800ca0e <_fwalk_reent>
 800c62e:	bf00      	nop
 800c630:	0800dd95 	.word	0x0800dd95

0800c634 <__sfmoreglue>:
 800c634:	b570      	push	{r4, r5, r6, lr}
 800c636:	2268      	movs	r2, #104	; 0x68
 800c638:	1e4d      	subs	r5, r1, #1
 800c63a:	4355      	muls	r5, r2
 800c63c:	460e      	mov	r6, r1
 800c63e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c642:	f000 fb81 	bl	800cd48 <_malloc_r>
 800c646:	4604      	mov	r4, r0
 800c648:	b140      	cbz	r0, 800c65c <__sfmoreglue+0x28>
 800c64a:	2100      	movs	r1, #0
 800c64c:	e9c0 1600 	strd	r1, r6, [r0]
 800c650:	300c      	adds	r0, #12
 800c652:	60a0      	str	r0, [r4, #8]
 800c654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c658:	f000 fb02 	bl	800cc60 <memset>
 800c65c:	4620      	mov	r0, r4
 800c65e:	bd70      	pop	{r4, r5, r6, pc}

0800c660 <__sfp_lock_acquire>:
 800c660:	4801      	ldr	r0, [pc, #4]	; (800c668 <__sfp_lock_acquire+0x8>)
 800c662:	f000 ba87 	b.w	800cb74 <__retarget_lock_acquire_recursive>
 800c666:	bf00      	nop
 800c668:	20006769 	.word	0x20006769

0800c66c <__sfp_lock_release>:
 800c66c:	4801      	ldr	r0, [pc, #4]	; (800c674 <__sfp_lock_release+0x8>)
 800c66e:	f000 ba82 	b.w	800cb76 <__retarget_lock_release_recursive>
 800c672:	bf00      	nop
 800c674:	20006769 	.word	0x20006769

0800c678 <__sinit_lock_acquire>:
 800c678:	4801      	ldr	r0, [pc, #4]	; (800c680 <__sinit_lock_acquire+0x8>)
 800c67a:	f000 ba7b 	b.w	800cb74 <__retarget_lock_acquire_recursive>
 800c67e:	bf00      	nop
 800c680:	2000676a 	.word	0x2000676a

0800c684 <__sinit_lock_release>:
 800c684:	4801      	ldr	r0, [pc, #4]	; (800c68c <__sinit_lock_release+0x8>)
 800c686:	f000 ba76 	b.w	800cb76 <__retarget_lock_release_recursive>
 800c68a:	bf00      	nop
 800c68c:	2000676a 	.word	0x2000676a

0800c690 <__sinit>:
 800c690:	b510      	push	{r4, lr}
 800c692:	4604      	mov	r4, r0
 800c694:	f7ff fff0 	bl	800c678 <__sinit_lock_acquire>
 800c698:	69a3      	ldr	r3, [r4, #24]
 800c69a:	b11b      	cbz	r3, 800c6a4 <__sinit+0x14>
 800c69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a0:	f7ff bff0 	b.w	800c684 <__sinit_lock_release>
 800c6a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c6a8:	6523      	str	r3, [r4, #80]	; 0x50
 800c6aa:	4b13      	ldr	r3, [pc, #76]	; (800c6f8 <__sinit+0x68>)
 800c6ac:	4a13      	ldr	r2, [pc, #76]	; (800c6fc <__sinit+0x6c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c6b2:	42a3      	cmp	r3, r4
 800c6b4:	bf04      	itt	eq
 800c6b6:	2301      	moveq	r3, #1
 800c6b8:	61a3      	streq	r3, [r4, #24]
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f000 f820 	bl	800c700 <__sfp>
 800c6c0:	6060      	str	r0, [r4, #4]
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 f81c 	bl	800c700 <__sfp>
 800c6c8:	60a0      	str	r0, [r4, #8]
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f000 f818 	bl	800c700 <__sfp>
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	60e0      	str	r0, [r4, #12]
 800c6d4:	2104      	movs	r1, #4
 800c6d6:	6860      	ldr	r0, [r4, #4]
 800c6d8:	f7ff ff82 	bl	800c5e0 <std>
 800c6dc:	68a0      	ldr	r0, [r4, #8]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	2109      	movs	r1, #9
 800c6e2:	f7ff ff7d 	bl	800c5e0 <std>
 800c6e6:	68e0      	ldr	r0, [r4, #12]
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	2112      	movs	r1, #18
 800c6ec:	f7ff ff78 	bl	800c5e0 <std>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	61a3      	str	r3, [r4, #24]
 800c6f4:	e7d2      	b.n	800c69c <__sinit+0xc>
 800c6f6:	bf00      	nop
 800c6f8:	0800f704 	.word	0x0800f704
 800c6fc:	0800c629 	.word	0x0800c629

0800c700 <__sfp>:
 800c700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c702:	4607      	mov	r7, r0
 800c704:	f7ff ffac 	bl	800c660 <__sfp_lock_acquire>
 800c708:	4b1e      	ldr	r3, [pc, #120]	; (800c784 <__sfp+0x84>)
 800c70a:	681e      	ldr	r6, [r3, #0]
 800c70c:	69b3      	ldr	r3, [r6, #24]
 800c70e:	b913      	cbnz	r3, 800c716 <__sfp+0x16>
 800c710:	4630      	mov	r0, r6
 800c712:	f7ff ffbd 	bl	800c690 <__sinit>
 800c716:	3648      	adds	r6, #72	; 0x48
 800c718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	d503      	bpl.n	800c728 <__sfp+0x28>
 800c720:	6833      	ldr	r3, [r6, #0]
 800c722:	b30b      	cbz	r3, 800c768 <__sfp+0x68>
 800c724:	6836      	ldr	r6, [r6, #0]
 800c726:	e7f7      	b.n	800c718 <__sfp+0x18>
 800c728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c72c:	b9d5      	cbnz	r5, 800c764 <__sfp+0x64>
 800c72e:	4b16      	ldr	r3, [pc, #88]	; (800c788 <__sfp+0x88>)
 800c730:	60e3      	str	r3, [r4, #12]
 800c732:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c736:	6665      	str	r5, [r4, #100]	; 0x64
 800c738:	f000 fa1a 	bl	800cb70 <__retarget_lock_init_recursive>
 800c73c:	f7ff ff96 	bl	800c66c <__sfp_lock_release>
 800c740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c748:	6025      	str	r5, [r4, #0]
 800c74a:	61a5      	str	r5, [r4, #24]
 800c74c:	2208      	movs	r2, #8
 800c74e:	4629      	mov	r1, r5
 800c750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c754:	f000 fa84 	bl	800cc60 <memset>
 800c758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c75c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c760:	4620      	mov	r0, r4
 800c762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c764:	3468      	adds	r4, #104	; 0x68
 800c766:	e7d9      	b.n	800c71c <__sfp+0x1c>
 800c768:	2104      	movs	r1, #4
 800c76a:	4638      	mov	r0, r7
 800c76c:	f7ff ff62 	bl	800c634 <__sfmoreglue>
 800c770:	4604      	mov	r4, r0
 800c772:	6030      	str	r0, [r6, #0]
 800c774:	2800      	cmp	r0, #0
 800c776:	d1d5      	bne.n	800c724 <__sfp+0x24>
 800c778:	f7ff ff78 	bl	800c66c <__sfp_lock_release>
 800c77c:	230c      	movs	r3, #12
 800c77e:	603b      	str	r3, [r7, #0]
 800c780:	e7ee      	b.n	800c760 <__sfp+0x60>
 800c782:	bf00      	nop
 800c784:	0800f704 	.word	0x0800f704
 800c788:	ffff0001 	.word	0xffff0001

0800c78c <_fopen_r>:
 800c78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c78e:	460f      	mov	r7, r1
 800c790:	4611      	mov	r1, r2
 800c792:	aa01      	add	r2, sp, #4
 800c794:	4605      	mov	r5, r0
 800c796:	f001 fb4b 	bl	800de30 <__sflags>
 800c79a:	4606      	mov	r6, r0
 800c79c:	b918      	cbnz	r0, 800c7a6 <_fopen_r+0x1a>
 800c79e:	2400      	movs	r4, #0
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	b003      	add	sp, #12
 800c7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f7ff ffaa 	bl	800c700 <__sfp>
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d0f5      	beq.n	800c79e <_fopen_r+0x12>
 800c7b2:	4639      	mov	r1, r7
 800c7b4:	9a01      	ldr	r2, [sp, #4]
 800c7b6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f000 fe26 	bl	800d40c <_open_r>
 800c7c0:	1e07      	subs	r7, r0, #0
 800c7c2:	da09      	bge.n	800c7d8 <_fopen_r+0x4c>
 800c7c4:	2500      	movs	r5, #0
 800c7c6:	f7ff ff4b 	bl	800c660 <__sfp_lock_acquire>
 800c7ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7cc:	81a5      	strh	r5, [r4, #12]
 800c7ce:	f000 f9d0 	bl	800cb72 <__retarget_lock_close_recursive>
 800c7d2:	f7ff ff4b 	bl	800c66c <__sfp_lock_release>
 800c7d6:	e7e2      	b.n	800c79e <_fopen_r+0x12>
 800c7d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7da:	07db      	lsls	r3, r3, #31
 800c7dc:	d405      	bmi.n	800c7ea <_fopen_r+0x5e>
 800c7de:	89a3      	ldrh	r3, [r4, #12]
 800c7e0:	0598      	lsls	r0, r3, #22
 800c7e2:	d402      	bmi.n	800c7ea <_fopen_r+0x5e>
 800c7e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7e6:	f000 f9c5 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800c7ea:	4b0e      	ldr	r3, [pc, #56]	; (800c824 <_fopen_r+0x98>)
 800c7ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c7ee:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <_fopen_r+0x9c>)
 800c7f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7f2:	4b0e      	ldr	r3, [pc, #56]	; (800c82c <_fopen_r+0xa0>)
 800c7f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7f6:	05f1      	lsls	r1, r6, #23
 800c7f8:	4b0d      	ldr	r3, [pc, #52]	; (800c830 <_fopen_r+0xa4>)
 800c7fa:	81e7      	strh	r7, [r4, #14]
 800c7fc:	81a6      	strh	r6, [r4, #12]
 800c7fe:	6224      	str	r4, [r4, #32]
 800c800:	6323      	str	r3, [r4, #48]	; 0x30
 800c802:	d505      	bpl.n	800c810 <_fopen_r+0x84>
 800c804:	2302      	movs	r3, #2
 800c806:	2200      	movs	r2, #0
 800c808:	4621      	mov	r1, r4
 800c80a:	4628      	mov	r0, r5
 800c80c:	f000 f82c 	bl	800c868 <_fseek_r>
 800c810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c812:	07da      	lsls	r2, r3, #31
 800c814:	d4c4      	bmi.n	800c7a0 <_fopen_r+0x14>
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	059b      	lsls	r3, r3, #22
 800c81a:	d4c1      	bmi.n	800c7a0 <_fopen_r+0x14>
 800c81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c81e:	f000 f9aa 	bl	800cb76 <__retarget_lock_release_recursive>
 800c822:	e7bd      	b.n	800c7a0 <_fopen_r+0x14>
 800c824:	0800d98d 	.word	0x0800d98d
 800c828:	0800d9b3 	.word	0x0800d9b3
 800c82c:	0800d9eb 	.word	0x0800d9eb
 800c830:	0800da0f 	.word	0x0800da0f

0800c834 <fopen>:
 800c834:	4b02      	ldr	r3, [pc, #8]	; (800c840 <fopen+0xc>)
 800c836:	460a      	mov	r2, r1
 800c838:	4601      	mov	r1, r0
 800c83a:	6818      	ldr	r0, [r3, #0]
 800c83c:	f7ff bfa6 	b.w	800c78c <_fopen_r>
 800c840:	20000108 	.word	0x20000108

0800c844 <fiprintf>:
 800c844:	b40e      	push	{r1, r2, r3}
 800c846:	b503      	push	{r0, r1, lr}
 800c848:	4601      	mov	r1, r0
 800c84a:	ab03      	add	r3, sp, #12
 800c84c:	4805      	ldr	r0, [pc, #20]	; (800c864 <fiprintf+0x20>)
 800c84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c852:	6800      	ldr	r0, [r0, #0]
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	f000 fb15 	bl	800ce84 <_vfiprintf_r>
 800c85a:	b002      	add	sp, #8
 800c85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c860:	b003      	add	sp, #12
 800c862:	4770      	bx	lr
 800c864:	20000108 	.word	0x20000108

0800c868 <_fseek_r>:
 800c868:	f000 b800 	b.w	800c86c <_fseeko_r>

0800c86c <_fseeko_r>:
 800c86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c870:	460c      	mov	r4, r1
 800c872:	4617      	mov	r7, r2
 800c874:	461d      	mov	r5, r3
 800c876:	4606      	mov	r6, r0
 800c878:	b118      	cbz	r0, 800c882 <_fseeko_r+0x16>
 800c87a:	6983      	ldr	r3, [r0, #24]
 800c87c:	b90b      	cbnz	r3, 800c882 <_fseeko_r+0x16>
 800c87e:	f7ff ff07 	bl	800c690 <__sinit>
 800c882:	4b51      	ldr	r3, [pc, #324]	; (800c9c8 <_fseeko_r+0x15c>)
 800c884:	429c      	cmp	r4, r3
 800c886:	d122      	bne.n	800c8ce <_fseeko_r+0x62>
 800c888:	6874      	ldr	r4, [r6, #4]
 800c88a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c88c:	07d9      	lsls	r1, r3, #31
 800c88e:	d405      	bmi.n	800c89c <_fseeko_r+0x30>
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	059a      	lsls	r2, r3, #22
 800c894:	d402      	bmi.n	800c89c <_fseeko_r+0x30>
 800c896:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c898:	f000 f96c 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800c8a2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800c8a6:	d103      	bne.n	800c8b0 <_fseeko_r+0x44>
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f001 fa72 	bl	800dd94 <_fflush_r>
 800c8b0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800c8b4:	f1b8 0f00 	cmp.w	r8, #0
 800c8b8:	d113      	bne.n	800c8e2 <_fseeko_r+0x76>
 800c8ba:	231d      	movs	r3, #29
 800c8bc:	6033      	str	r3, [r6, #0]
 800c8be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8c0:	07d9      	lsls	r1, r3, #31
 800c8c2:	d578      	bpl.n	800c9b6 <_fseeko_r+0x14a>
 800c8c4:	f04f 35ff 	mov.w	r5, #4294967295
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ce:	4b3f      	ldr	r3, [pc, #252]	; (800c9cc <_fseeko_r+0x160>)
 800c8d0:	429c      	cmp	r4, r3
 800c8d2:	d101      	bne.n	800c8d8 <_fseeko_r+0x6c>
 800c8d4:	68b4      	ldr	r4, [r6, #8]
 800c8d6:	e7d8      	b.n	800c88a <_fseeko_r+0x1e>
 800c8d8:	4b3d      	ldr	r3, [pc, #244]	; (800c9d0 <_fseeko_r+0x164>)
 800c8da:	429c      	cmp	r4, r3
 800c8dc:	bf08      	it	eq
 800c8de:	68f4      	ldreq	r4, [r6, #12]
 800c8e0:	e7d3      	b.n	800c88a <_fseeko_r+0x1e>
 800c8e2:	2d01      	cmp	r5, #1
 800c8e4:	d036      	beq.n	800c954 <_fseeko_r+0xe8>
 800c8e6:	f035 0302 	bics.w	r3, r5, #2
 800c8ea:	d162      	bne.n	800c9b2 <_fseeko_r+0x146>
 800c8ec:	6923      	ldr	r3, [r4, #16]
 800c8ee:	b91b      	cbnz	r3, 800c8f8 <_fseeko_r+0x8c>
 800c8f0:	4621      	mov	r1, r4
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	f000 f966 	bl	800cbc4 <__smakebuf_r>
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f001 fa4a 	bl	800dd94 <_fflush_r>
 800c900:	2800      	cmp	r0, #0
 800c902:	d1dc      	bne.n	800c8be <_fseeko_r+0x52>
 800c904:	6a21      	ldr	r1, [r4, #32]
 800c906:	462b      	mov	r3, r5
 800c908:	463a      	mov	r2, r7
 800c90a:	4630      	mov	r0, r6
 800c90c:	47c0      	blx	r8
 800c90e:	3001      	adds	r0, #1
 800c910:	d0d5      	beq.n	800c8be <_fseeko_r+0x52>
 800c912:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c914:	b141      	cbz	r1, 800c928 <_fseeko_r+0xbc>
 800c916:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c91a:	4299      	cmp	r1, r3
 800c91c:	d002      	beq.n	800c924 <_fseeko_r+0xb8>
 800c91e:	4630      	mov	r0, r6
 800c920:	f000 f9a6 	bl	800cc70 <_free_r>
 800c924:	2300      	movs	r3, #0
 800c926:	6363      	str	r3, [r4, #52]	; 0x34
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	6023      	str	r3, [r4, #0]
 800c92c:	89a3      	ldrh	r3, [r4, #12]
 800c92e:	2600      	movs	r6, #0
 800c930:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800c934:	6066      	str	r6, [r4, #4]
 800c936:	81a3      	strh	r3, [r4, #12]
 800c938:	2208      	movs	r2, #8
 800c93a:	4631      	mov	r1, r6
 800c93c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c940:	f000 f98e 	bl	800cc60 <memset>
 800c944:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c946:	f015 0501 	ands.w	r5, r5, #1
 800c94a:	d13b      	bne.n	800c9c4 <_fseeko_r+0x158>
 800c94c:	89a3      	ldrh	r3, [r4, #12]
 800c94e:	059b      	lsls	r3, r3, #22
 800c950:	d4ba      	bmi.n	800c8c8 <_fseeko_r+0x5c>
 800c952:	e021      	b.n	800c998 <_fseeko_r+0x12c>
 800c954:	4621      	mov	r1, r4
 800c956:	4630      	mov	r0, r6
 800c958:	f001 fa1c 	bl	800dd94 <_fflush_r>
 800c95c:	89a2      	ldrh	r2, [r4, #12]
 800c95e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c962:	d00c      	beq.n	800c97e <_fseeko_r+0x112>
 800c964:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	075a      	lsls	r2, r3, #29
 800c96a:	d519      	bpl.n	800c9a0 <_fseeko_r+0x134>
 800c96c:	6863      	ldr	r3, [r4, #4]
 800c96e:	1aed      	subs	r5, r5, r3
 800c970:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c972:	b10b      	cbz	r3, 800c978 <_fseeko_r+0x10c>
 800c974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c976:	1aed      	subs	r5, r5, r3
 800c978:	442f      	add	r7, r5
 800c97a:	2500      	movs	r5, #0
 800c97c:	e7b6      	b.n	800c8ec <_fseeko_r+0x80>
 800c97e:	462b      	mov	r3, r5
 800c980:	6a21      	ldr	r1, [r4, #32]
 800c982:	4630      	mov	r0, r6
 800c984:	47c0      	blx	r8
 800c986:	1c43      	adds	r3, r0, #1
 800c988:	4605      	mov	r5, r0
 800c98a:	d1ec      	bne.n	800c966 <_fseeko_r+0xfa>
 800c98c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c98e:	07d8      	lsls	r0, r3, #31
 800c990:	d498      	bmi.n	800c8c4 <_fseeko_r+0x58>
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	0599      	lsls	r1, r3, #22
 800c996:	d495      	bmi.n	800c8c4 <_fseeko_r+0x58>
 800c998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c99a:	f000 f8ec 	bl	800cb76 <__retarget_lock_release_recursive>
 800c99e:	e793      	b.n	800c8c8 <_fseeko_r+0x5c>
 800c9a0:	0718      	lsls	r0, r3, #28
 800c9a2:	d5e9      	bpl.n	800c978 <_fseeko_r+0x10c>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	6922      	ldr	r2, [r4, #16]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d0e5      	beq.n	800c978 <_fseeko_r+0x10c>
 800c9ac:	1a9b      	subs	r3, r3, r2
 800c9ae:	441d      	add	r5, r3
 800c9b0:	e7e2      	b.n	800c978 <_fseeko_r+0x10c>
 800c9b2:	2316      	movs	r3, #22
 800c9b4:	e782      	b.n	800c8bc <_fseeko_r+0x50>
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	059a      	lsls	r2, r3, #22
 800c9ba:	d483      	bmi.n	800c8c4 <_fseeko_r+0x58>
 800c9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9be:	f000 f8da 	bl	800cb76 <__retarget_lock_release_recursive>
 800c9c2:	e77f      	b.n	800c8c4 <_fseeko_r+0x58>
 800c9c4:	4635      	mov	r5, r6
 800c9c6:	e77f      	b.n	800c8c8 <_fseeko_r+0x5c>
 800c9c8:	0800f6c4 	.word	0x0800f6c4
 800c9cc:	0800f6e4 	.word	0x0800f6e4
 800c9d0:	0800f6a4 	.word	0x0800f6a4

0800c9d4 <_fwalk>:
 800c9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d8:	460f      	mov	r7, r1
 800c9da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c9de:	2600      	movs	r6, #0
 800c9e0:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800c9e4:	f1b8 0801 	subs.w	r8, r8, #1
 800c9e8:	d505      	bpl.n	800c9f6 <_fwalk+0x22>
 800c9ea:	6824      	ldr	r4, [r4, #0]
 800c9ec:	2c00      	cmp	r4, #0
 800c9ee:	d1f7      	bne.n	800c9e0 <_fwalk+0xc>
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f6:	89ab      	ldrh	r3, [r5, #12]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d906      	bls.n	800ca0a <_fwalk+0x36>
 800c9fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca00:	3301      	adds	r3, #1
 800ca02:	d002      	beq.n	800ca0a <_fwalk+0x36>
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b8      	blx	r7
 800ca08:	4306      	orrs	r6, r0
 800ca0a:	3568      	adds	r5, #104	; 0x68
 800ca0c:	e7ea      	b.n	800c9e4 <_fwalk+0x10>

0800ca0e <_fwalk_reent>:
 800ca0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca12:	4606      	mov	r6, r0
 800ca14:	4688      	mov	r8, r1
 800ca16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca1a:	2700      	movs	r7, #0
 800ca1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca20:	f1b9 0901 	subs.w	r9, r9, #1
 800ca24:	d505      	bpl.n	800ca32 <_fwalk_reent+0x24>
 800ca26:	6824      	ldr	r4, [r4, #0]
 800ca28:	2c00      	cmp	r4, #0
 800ca2a:	d1f7      	bne.n	800ca1c <_fwalk_reent+0xe>
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca32:	89ab      	ldrh	r3, [r5, #12]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d907      	bls.n	800ca48 <_fwalk_reent+0x3a>
 800ca38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	d003      	beq.n	800ca48 <_fwalk_reent+0x3a>
 800ca40:	4629      	mov	r1, r5
 800ca42:	4630      	mov	r0, r6
 800ca44:	47c0      	blx	r8
 800ca46:	4307      	orrs	r7, r0
 800ca48:	3568      	adds	r5, #104	; 0x68
 800ca4a:	e7e9      	b.n	800ca20 <_fwalk_reent+0x12>

0800ca4c <_fwrite_r>:
 800ca4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca50:	9c08      	ldr	r4, [sp, #32]
 800ca52:	468a      	mov	sl, r1
 800ca54:	4690      	mov	r8, r2
 800ca56:	fb02 f903 	mul.w	r9, r2, r3
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	b118      	cbz	r0, 800ca66 <_fwrite_r+0x1a>
 800ca5e:	6983      	ldr	r3, [r0, #24]
 800ca60:	b90b      	cbnz	r3, 800ca66 <_fwrite_r+0x1a>
 800ca62:	f7ff fe15 	bl	800c690 <__sinit>
 800ca66:	4b26      	ldr	r3, [pc, #152]	; (800cb00 <_fwrite_r+0xb4>)
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	d123      	bne.n	800cab4 <_fwrite_r+0x68>
 800ca6c:	686c      	ldr	r4, [r5, #4]
 800ca6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca70:	07de      	lsls	r6, r3, #31
 800ca72:	d405      	bmi.n	800ca80 <_fwrite_r+0x34>
 800ca74:	89a3      	ldrh	r3, [r4, #12]
 800ca76:	0598      	lsls	r0, r3, #22
 800ca78:	d402      	bmi.n	800ca80 <_fwrite_r+0x34>
 800ca7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca7c:	f000 f87a 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800ca80:	89a3      	ldrh	r3, [r4, #12]
 800ca82:	0719      	lsls	r1, r3, #28
 800ca84:	d520      	bpl.n	800cac8 <_fwrite_r+0x7c>
 800ca86:	6923      	ldr	r3, [r4, #16]
 800ca88:	b1f3      	cbz	r3, 800cac8 <_fwrite_r+0x7c>
 800ca8a:	2600      	movs	r6, #0
 800ca8c:	454e      	cmp	r6, r9
 800ca8e:	d029      	beq.n	800cae4 <_fwrite_r+0x98>
 800ca90:	68a7      	ldr	r7, [r4, #8]
 800ca92:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800ca96:	3f01      	subs	r7, #1
 800ca98:	2f00      	cmp	r7, #0
 800ca9a:	60a7      	str	r7, [r4, #8]
 800ca9c:	da04      	bge.n	800caa8 <_fwrite_r+0x5c>
 800ca9e:	69a3      	ldr	r3, [r4, #24]
 800caa0:	429f      	cmp	r7, r3
 800caa2:	db19      	blt.n	800cad8 <_fwrite_r+0x8c>
 800caa4:	290a      	cmp	r1, #10
 800caa6:	d017      	beq.n	800cad8 <_fwrite_r+0x8c>
 800caa8:	6823      	ldr	r3, [r4, #0]
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	6022      	str	r2, [r4, #0]
 800caae:	7019      	strb	r1, [r3, #0]
 800cab0:	3601      	adds	r6, #1
 800cab2:	e7eb      	b.n	800ca8c <_fwrite_r+0x40>
 800cab4:	4b13      	ldr	r3, [pc, #76]	; (800cb04 <_fwrite_r+0xb8>)
 800cab6:	429c      	cmp	r4, r3
 800cab8:	d101      	bne.n	800cabe <_fwrite_r+0x72>
 800caba:	68ac      	ldr	r4, [r5, #8]
 800cabc:	e7d7      	b.n	800ca6e <_fwrite_r+0x22>
 800cabe:	4b12      	ldr	r3, [pc, #72]	; (800cb08 <_fwrite_r+0xbc>)
 800cac0:	429c      	cmp	r4, r3
 800cac2:	bf08      	it	eq
 800cac4:	68ec      	ldreq	r4, [r5, #12]
 800cac6:	e7d2      	b.n	800ca6e <_fwrite_r+0x22>
 800cac8:	4621      	mov	r1, r4
 800caca:	4628      	mov	r0, r5
 800cacc:	f001 f85e 	bl	800db8c <__swsetup_r>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d0da      	beq.n	800ca8a <_fwrite_r+0x3e>
 800cad4:	2600      	movs	r6, #0
 800cad6:	e005      	b.n	800cae4 <_fwrite_r+0x98>
 800cad8:	4622      	mov	r2, r4
 800cada:	4628      	mov	r0, r5
 800cadc:	f000 fff2 	bl	800dac4 <__swbuf_r>
 800cae0:	3001      	adds	r0, #1
 800cae2:	d1e5      	bne.n	800cab0 <_fwrite_r+0x64>
 800cae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cae6:	07da      	lsls	r2, r3, #31
 800cae8:	d405      	bmi.n	800caf6 <_fwrite_r+0xaa>
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	059b      	lsls	r3, r3, #22
 800caee:	d402      	bmi.n	800caf6 <_fwrite_r+0xaa>
 800caf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caf2:	f000 f840 	bl	800cb76 <__retarget_lock_release_recursive>
 800caf6:	fbb6 f0f8 	udiv	r0, r6, r8
 800cafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafe:	bf00      	nop
 800cb00:	0800f6c4 	.word	0x0800f6c4
 800cb04:	0800f6e4 	.word	0x0800f6e4
 800cb08:	0800f6a4 	.word	0x0800f6a4

0800cb0c <fwrite>:
 800cb0c:	b507      	push	{r0, r1, r2, lr}
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	4613      	mov	r3, r2
 800cb12:	460a      	mov	r2, r1
 800cb14:	4601      	mov	r1, r0
 800cb16:	4803      	ldr	r0, [pc, #12]	; (800cb24 <fwrite+0x18>)
 800cb18:	6800      	ldr	r0, [r0, #0]
 800cb1a:	f7ff ff97 	bl	800ca4c <_fwrite_r>
 800cb1e:	b003      	add	sp, #12
 800cb20:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb24:	20000108 	.word	0x20000108

0800cb28 <__libc_init_array>:
 800cb28:	b570      	push	{r4, r5, r6, lr}
 800cb2a:	4d0d      	ldr	r5, [pc, #52]	; (800cb60 <__libc_init_array+0x38>)
 800cb2c:	4c0d      	ldr	r4, [pc, #52]	; (800cb64 <__libc_init_array+0x3c>)
 800cb2e:	1b64      	subs	r4, r4, r5
 800cb30:	10a4      	asrs	r4, r4, #2
 800cb32:	2600      	movs	r6, #0
 800cb34:	42a6      	cmp	r6, r4
 800cb36:	d109      	bne.n	800cb4c <__libc_init_array+0x24>
 800cb38:	4d0b      	ldr	r5, [pc, #44]	; (800cb68 <__libc_init_array+0x40>)
 800cb3a:	4c0c      	ldr	r4, [pc, #48]	; (800cb6c <__libc_init_array+0x44>)
 800cb3c:	f002 f842 	bl	800ebc4 <_init>
 800cb40:	1b64      	subs	r4, r4, r5
 800cb42:	10a4      	asrs	r4, r4, #2
 800cb44:	2600      	movs	r6, #0
 800cb46:	42a6      	cmp	r6, r4
 800cb48:	d105      	bne.n	800cb56 <__libc_init_array+0x2e>
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
 800cb4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb50:	4798      	blx	r3
 800cb52:	3601      	adds	r6, #1
 800cb54:	e7ee      	b.n	800cb34 <__libc_init_array+0xc>
 800cb56:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb5a:	4798      	blx	r3
 800cb5c:	3601      	adds	r6, #1
 800cb5e:	e7f2      	b.n	800cb46 <__libc_init_array+0x1e>
 800cb60:	0800f860 	.word	0x0800f860
 800cb64:	0800f860 	.word	0x0800f860
 800cb68:	0800f860 	.word	0x0800f860
 800cb6c:	0800f864 	.word	0x0800f864

0800cb70 <__retarget_lock_init_recursive>:
 800cb70:	4770      	bx	lr

0800cb72 <__retarget_lock_close_recursive>:
 800cb72:	4770      	bx	lr

0800cb74 <__retarget_lock_acquire_recursive>:
 800cb74:	4770      	bx	lr

0800cb76 <__retarget_lock_release_recursive>:
 800cb76:	4770      	bx	lr

0800cb78 <__swhatbuf_r>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	460e      	mov	r6, r1
 800cb7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb80:	2900      	cmp	r1, #0
 800cb82:	b096      	sub	sp, #88	; 0x58
 800cb84:	4614      	mov	r4, r2
 800cb86:	461d      	mov	r5, r3
 800cb88:	da08      	bge.n	800cb9c <__swhatbuf_r+0x24>
 800cb8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	602a      	str	r2, [r5, #0]
 800cb92:	061a      	lsls	r2, r3, #24
 800cb94:	d410      	bmi.n	800cbb8 <__swhatbuf_r+0x40>
 800cb96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb9a:	e00e      	b.n	800cbba <__swhatbuf_r+0x42>
 800cb9c:	466a      	mov	r2, sp
 800cb9e:	f001 f97d 	bl	800de9c <_fstat_r>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	dbf1      	blt.n	800cb8a <__swhatbuf_r+0x12>
 800cba6:	9a01      	ldr	r2, [sp, #4]
 800cba8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cbac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cbb0:	425a      	negs	r2, r3
 800cbb2:	415a      	adcs	r2, r3
 800cbb4:	602a      	str	r2, [r5, #0]
 800cbb6:	e7ee      	b.n	800cb96 <__swhatbuf_r+0x1e>
 800cbb8:	2340      	movs	r3, #64	; 0x40
 800cbba:	2000      	movs	r0, #0
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	b016      	add	sp, #88	; 0x58
 800cbc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cbc4 <__smakebuf_r>:
 800cbc4:	898b      	ldrh	r3, [r1, #12]
 800cbc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbc8:	079d      	lsls	r5, r3, #30
 800cbca:	4606      	mov	r6, r0
 800cbcc:	460c      	mov	r4, r1
 800cbce:	d507      	bpl.n	800cbe0 <__smakebuf_r+0x1c>
 800cbd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	6123      	str	r3, [r4, #16]
 800cbd8:	2301      	movs	r3, #1
 800cbda:	6163      	str	r3, [r4, #20]
 800cbdc:	b002      	add	sp, #8
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	ab01      	add	r3, sp, #4
 800cbe2:	466a      	mov	r2, sp
 800cbe4:	f7ff ffc8 	bl	800cb78 <__swhatbuf_r>
 800cbe8:	9900      	ldr	r1, [sp, #0]
 800cbea:	4605      	mov	r5, r0
 800cbec:	4630      	mov	r0, r6
 800cbee:	f000 f8ab 	bl	800cd48 <_malloc_r>
 800cbf2:	b948      	cbnz	r0, 800cc08 <__smakebuf_r+0x44>
 800cbf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf8:	059a      	lsls	r2, r3, #22
 800cbfa:	d4ef      	bmi.n	800cbdc <__smakebuf_r+0x18>
 800cbfc:	f023 0303 	bic.w	r3, r3, #3
 800cc00:	f043 0302 	orr.w	r3, r3, #2
 800cc04:	81a3      	strh	r3, [r4, #12]
 800cc06:	e7e3      	b.n	800cbd0 <__smakebuf_r+0xc>
 800cc08:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <__smakebuf_r+0x7c>)
 800cc0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc0c:	89a3      	ldrh	r3, [r4, #12]
 800cc0e:	6020      	str	r0, [r4, #0]
 800cc10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc14:	81a3      	strh	r3, [r4, #12]
 800cc16:	9b00      	ldr	r3, [sp, #0]
 800cc18:	6163      	str	r3, [r4, #20]
 800cc1a:	9b01      	ldr	r3, [sp, #4]
 800cc1c:	6120      	str	r0, [r4, #16]
 800cc1e:	b15b      	cbz	r3, 800cc38 <__smakebuf_r+0x74>
 800cc20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc24:	4630      	mov	r0, r6
 800cc26:	f001 f94b 	bl	800dec0 <_isatty_r>
 800cc2a:	b128      	cbz	r0, 800cc38 <__smakebuf_r+0x74>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	f023 0303 	bic.w	r3, r3, #3
 800cc32:	f043 0301 	orr.w	r3, r3, #1
 800cc36:	81a3      	strh	r3, [r4, #12]
 800cc38:	89a0      	ldrh	r0, [r4, #12]
 800cc3a:	4305      	orrs	r5, r0
 800cc3c:	81a5      	strh	r5, [r4, #12]
 800cc3e:	e7cd      	b.n	800cbdc <__smakebuf_r+0x18>
 800cc40:	0800c629 	.word	0x0800c629

0800cc44 <memcpy>:
 800cc44:	440a      	add	r2, r1
 800cc46:	4291      	cmp	r1, r2
 800cc48:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc4c:	d100      	bne.n	800cc50 <memcpy+0xc>
 800cc4e:	4770      	bx	lr
 800cc50:	b510      	push	{r4, lr}
 800cc52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc5a:	4291      	cmp	r1, r2
 800cc5c:	d1f9      	bne.n	800cc52 <memcpy+0xe>
 800cc5e:	bd10      	pop	{r4, pc}

0800cc60 <memset>:
 800cc60:	4402      	add	r2, r0
 800cc62:	4603      	mov	r3, r0
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d100      	bne.n	800cc6a <memset+0xa>
 800cc68:	4770      	bx	lr
 800cc6a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc6e:	e7f9      	b.n	800cc64 <memset+0x4>

0800cc70 <_free_r>:
 800cc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc72:	2900      	cmp	r1, #0
 800cc74:	d044      	beq.n	800cd00 <_free_r+0x90>
 800cc76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc7a:	9001      	str	r0, [sp, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f1a1 0404 	sub.w	r4, r1, #4
 800cc82:	bfb8      	it	lt
 800cc84:	18e4      	addlt	r4, r4, r3
 800cc86:	f001 f95f 	bl	800df48 <__malloc_lock>
 800cc8a:	4a1e      	ldr	r2, [pc, #120]	; (800cd04 <_free_r+0x94>)
 800cc8c:	9801      	ldr	r0, [sp, #4]
 800cc8e:	6813      	ldr	r3, [r2, #0]
 800cc90:	b933      	cbnz	r3, 800cca0 <_free_r+0x30>
 800cc92:	6063      	str	r3, [r4, #4]
 800cc94:	6014      	str	r4, [r2, #0]
 800cc96:	b003      	add	sp, #12
 800cc98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc9c:	f001 b95a 	b.w	800df54 <__malloc_unlock>
 800cca0:	42a3      	cmp	r3, r4
 800cca2:	d908      	bls.n	800ccb6 <_free_r+0x46>
 800cca4:	6825      	ldr	r5, [r4, #0]
 800cca6:	1961      	adds	r1, r4, r5
 800cca8:	428b      	cmp	r3, r1
 800ccaa:	bf01      	itttt	eq
 800ccac:	6819      	ldreq	r1, [r3, #0]
 800ccae:	685b      	ldreq	r3, [r3, #4]
 800ccb0:	1949      	addeq	r1, r1, r5
 800ccb2:	6021      	streq	r1, [r4, #0]
 800ccb4:	e7ed      	b.n	800cc92 <_free_r+0x22>
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	b10b      	cbz	r3, 800ccc0 <_free_r+0x50>
 800ccbc:	42a3      	cmp	r3, r4
 800ccbe:	d9fa      	bls.n	800ccb6 <_free_r+0x46>
 800ccc0:	6811      	ldr	r1, [r2, #0]
 800ccc2:	1855      	adds	r5, r2, r1
 800ccc4:	42a5      	cmp	r5, r4
 800ccc6:	d10b      	bne.n	800cce0 <_free_r+0x70>
 800ccc8:	6824      	ldr	r4, [r4, #0]
 800ccca:	4421      	add	r1, r4
 800cccc:	1854      	adds	r4, r2, r1
 800ccce:	42a3      	cmp	r3, r4
 800ccd0:	6011      	str	r1, [r2, #0]
 800ccd2:	d1e0      	bne.n	800cc96 <_free_r+0x26>
 800ccd4:	681c      	ldr	r4, [r3, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	6053      	str	r3, [r2, #4]
 800ccda:	4421      	add	r1, r4
 800ccdc:	6011      	str	r1, [r2, #0]
 800ccde:	e7da      	b.n	800cc96 <_free_r+0x26>
 800cce0:	d902      	bls.n	800cce8 <_free_r+0x78>
 800cce2:	230c      	movs	r3, #12
 800cce4:	6003      	str	r3, [r0, #0]
 800cce6:	e7d6      	b.n	800cc96 <_free_r+0x26>
 800cce8:	6825      	ldr	r5, [r4, #0]
 800ccea:	1961      	adds	r1, r4, r5
 800ccec:	428b      	cmp	r3, r1
 800ccee:	bf04      	itt	eq
 800ccf0:	6819      	ldreq	r1, [r3, #0]
 800ccf2:	685b      	ldreq	r3, [r3, #4]
 800ccf4:	6063      	str	r3, [r4, #4]
 800ccf6:	bf04      	itt	eq
 800ccf8:	1949      	addeq	r1, r1, r5
 800ccfa:	6021      	streq	r1, [r4, #0]
 800ccfc:	6054      	str	r4, [r2, #4]
 800ccfe:	e7ca      	b.n	800cc96 <_free_r+0x26>
 800cd00:	b003      	add	sp, #12
 800cd02:	bd30      	pop	{r4, r5, pc}
 800cd04:	2000676c 	.word	0x2000676c

0800cd08 <sbrk_aligned>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	4e0e      	ldr	r6, [pc, #56]	; (800cd44 <sbrk_aligned+0x3c>)
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	6831      	ldr	r1, [r6, #0]
 800cd10:	4605      	mov	r5, r0
 800cd12:	b911      	cbnz	r1, 800cd1a <sbrk_aligned+0x12>
 800cd14:	f000 fd18 	bl	800d748 <_sbrk_r>
 800cd18:	6030      	str	r0, [r6, #0]
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f000 fd13 	bl	800d748 <_sbrk_r>
 800cd22:	1c43      	adds	r3, r0, #1
 800cd24:	d00a      	beq.n	800cd3c <sbrk_aligned+0x34>
 800cd26:	1cc4      	adds	r4, r0, #3
 800cd28:	f024 0403 	bic.w	r4, r4, #3
 800cd2c:	42a0      	cmp	r0, r4
 800cd2e:	d007      	beq.n	800cd40 <sbrk_aligned+0x38>
 800cd30:	1a21      	subs	r1, r4, r0
 800cd32:	4628      	mov	r0, r5
 800cd34:	f000 fd08 	bl	800d748 <_sbrk_r>
 800cd38:	3001      	adds	r0, #1
 800cd3a:	d101      	bne.n	800cd40 <sbrk_aligned+0x38>
 800cd3c:	f04f 34ff 	mov.w	r4, #4294967295
 800cd40:	4620      	mov	r0, r4
 800cd42:	bd70      	pop	{r4, r5, r6, pc}
 800cd44:	20006770 	.word	0x20006770

0800cd48 <_malloc_r>:
 800cd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4c:	1ccd      	adds	r5, r1, #3
 800cd4e:	f025 0503 	bic.w	r5, r5, #3
 800cd52:	3508      	adds	r5, #8
 800cd54:	2d0c      	cmp	r5, #12
 800cd56:	bf38      	it	cc
 800cd58:	250c      	movcc	r5, #12
 800cd5a:	2d00      	cmp	r5, #0
 800cd5c:	4607      	mov	r7, r0
 800cd5e:	db01      	blt.n	800cd64 <_malloc_r+0x1c>
 800cd60:	42a9      	cmp	r1, r5
 800cd62:	d905      	bls.n	800cd70 <_malloc_r+0x28>
 800cd64:	230c      	movs	r3, #12
 800cd66:	603b      	str	r3, [r7, #0]
 800cd68:	2600      	movs	r6, #0
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd70:	4e2e      	ldr	r6, [pc, #184]	; (800ce2c <_malloc_r+0xe4>)
 800cd72:	f001 f8e9 	bl	800df48 <__malloc_lock>
 800cd76:	6833      	ldr	r3, [r6, #0]
 800cd78:	461c      	mov	r4, r3
 800cd7a:	bb34      	cbnz	r4, 800cdca <_malloc_r+0x82>
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4638      	mov	r0, r7
 800cd80:	f7ff ffc2 	bl	800cd08 <sbrk_aligned>
 800cd84:	1c43      	adds	r3, r0, #1
 800cd86:	4604      	mov	r4, r0
 800cd88:	d14d      	bne.n	800ce26 <_malloc_r+0xde>
 800cd8a:	6834      	ldr	r4, [r6, #0]
 800cd8c:	4626      	mov	r6, r4
 800cd8e:	2e00      	cmp	r6, #0
 800cd90:	d140      	bne.n	800ce14 <_malloc_r+0xcc>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	4631      	mov	r1, r6
 800cd96:	4638      	mov	r0, r7
 800cd98:	eb04 0803 	add.w	r8, r4, r3
 800cd9c:	f000 fcd4 	bl	800d748 <_sbrk_r>
 800cda0:	4580      	cmp	r8, r0
 800cda2:	d13a      	bne.n	800ce1a <_malloc_r+0xd2>
 800cda4:	6821      	ldr	r1, [r4, #0]
 800cda6:	3503      	adds	r5, #3
 800cda8:	1a6d      	subs	r5, r5, r1
 800cdaa:	f025 0503 	bic.w	r5, r5, #3
 800cdae:	3508      	adds	r5, #8
 800cdb0:	2d0c      	cmp	r5, #12
 800cdb2:	bf38      	it	cc
 800cdb4:	250c      	movcc	r5, #12
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	4638      	mov	r0, r7
 800cdba:	f7ff ffa5 	bl	800cd08 <sbrk_aligned>
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	d02b      	beq.n	800ce1a <_malloc_r+0xd2>
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	442b      	add	r3, r5
 800cdc6:	6023      	str	r3, [r4, #0]
 800cdc8:	e00e      	b.n	800cde8 <_malloc_r+0xa0>
 800cdca:	6822      	ldr	r2, [r4, #0]
 800cdcc:	1b52      	subs	r2, r2, r5
 800cdce:	d41e      	bmi.n	800ce0e <_malloc_r+0xc6>
 800cdd0:	2a0b      	cmp	r2, #11
 800cdd2:	d916      	bls.n	800ce02 <_malloc_r+0xba>
 800cdd4:	1961      	adds	r1, r4, r5
 800cdd6:	42a3      	cmp	r3, r4
 800cdd8:	6025      	str	r5, [r4, #0]
 800cdda:	bf18      	it	ne
 800cddc:	6059      	strne	r1, [r3, #4]
 800cdde:	6863      	ldr	r3, [r4, #4]
 800cde0:	bf08      	it	eq
 800cde2:	6031      	streq	r1, [r6, #0]
 800cde4:	5162      	str	r2, [r4, r5]
 800cde6:	604b      	str	r3, [r1, #4]
 800cde8:	4638      	mov	r0, r7
 800cdea:	f104 060b 	add.w	r6, r4, #11
 800cdee:	f001 f8b1 	bl	800df54 <__malloc_unlock>
 800cdf2:	f026 0607 	bic.w	r6, r6, #7
 800cdf6:	1d23      	adds	r3, r4, #4
 800cdf8:	1af2      	subs	r2, r6, r3
 800cdfa:	d0b6      	beq.n	800cd6a <_malloc_r+0x22>
 800cdfc:	1b9b      	subs	r3, r3, r6
 800cdfe:	50a3      	str	r3, [r4, r2]
 800ce00:	e7b3      	b.n	800cd6a <_malloc_r+0x22>
 800ce02:	6862      	ldr	r2, [r4, #4]
 800ce04:	42a3      	cmp	r3, r4
 800ce06:	bf0c      	ite	eq
 800ce08:	6032      	streq	r2, [r6, #0]
 800ce0a:	605a      	strne	r2, [r3, #4]
 800ce0c:	e7ec      	b.n	800cde8 <_malloc_r+0xa0>
 800ce0e:	4623      	mov	r3, r4
 800ce10:	6864      	ldr	r4, [r4, #4]
 800ce12:	e7b2      	b.n	800cd7a <_malloc_r+0x32>
 800ce14:	4634      	mov	r4, r6
 800ce16:	6876      	ldr	r6, [r6, #4]
 800ce18:	e7b9      	b.n	800cd8e <_malloc_r+0x46>
 800ce1a:	230c      	movs	r3, #12
 800ce1c:	603b      	str	r3, [r7, #0]
 800ce1e:	4638      	mov	r0, r7
 800ce20:	f001 f898 	bl	800df54 <__malloc_unlock>
 800ce24:	e7a1      	b.n	800cd6a <_malloc_r+0x22>
 800ce26:	6025      	str	r5, [r4, #0]
 800ce28:	e7de      	b.n	800cde8 <_malloc_r+0xa0>
 800ce2a:	bf00      	nop
 800ce2c:	2000676c 	.word	0x2000676c

0800ce30 <__sfputc_r>:
 800ce30:	6893      	ldr	r3, [r2, #8]
 800ce32:	3b01      	subs	r3, #1
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	b410      	push	{r4}
 800ce38:	6093      	str	r3, [r2, #8]
 800ce3a:	da08      	bge.n	800ce4e <__sfputc_r+0x1e>
 800ce3c:	6994      	ldr	r4, [r2, #24]
 800ce3e:	42a3      	cmp	r3, r4
 800ce40:	db01      	blt.n	800ce46 <__sfputc_r+0x16>
 800ce42:	290a      	cmp	r1, #10
 800ce44:	d103      	bne.n	800ce4e <__sfputc_r+0x1e>
 800ce46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce4a:	f000 be3b 	b.w	800dac4 <__swbuf_r>
 800ce4e:	6813      	ldr	r3, [r2, #0]
 800ce50:	1c58      	adds	r0, r3, #1
 800ce52:	6010      	str	r0, [r2, #0]
 800ce54:	7019      	strb	r1, [r3, #0]
 800ce56:	4608      	mov	r0, r1
 800ce58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce5c:	4770      	bx	lr

0800ce5e <__sfputs_r>:
 800ce5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce60:	4606      	mov	r6, r0
 800ce62:	460f      	mov	r7, r1
 800ce64:	4614      	mov	r4, r2
 800ce66:	18d5      	adds	r5, r2, r3
 800ce68:	42ac      	cmp	r4, r5
 800ce6a:	d101      	bne.n	800ce70 <__sfputs_r+0x12>
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	e007      	b.n	800ce80 <__sfputs_r+0x22>
 800ce70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce74:	463a      	mov	r2, r7
 800ce76:	4630      	mov	r0, r6
 800ce78:	f7ff ffda 	bl	800ce30 <__sfputc_r>
 800ce7c:	1c43      	adds	r3, r0, #1
 800ce7e:	d1f3      	bne.n	800ce68 <__sfputs_r+0xa>
 800ce80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce84 <_vfiprintf_r>:
 800ce84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce88:	460d      	mov	r5, r1
 800ce8a:	b09d      	sub	sp, #116	; 0x74
 800ce8c:	4614      	mov	r4, r2
 800ce8e:	4698      	mov	r8, r3
 800ce90:	4606      	mov	r6, r0
 800ce92:	b118      	cbz	r0, 800ce9c <_vfiprintf_r+0x18>
 800ce94:	6983      	ldr	r3, [r0, #24]
 800ce96:	b90b      	cbnz	r3, 800ce9c <_vfiprintf_r+0x18>
 800ce98:	f7ff fbfa 	bl	800c690 <__sinit>
 800ce9c:	4b89      	ldr	r3, [pc, #548]	; (800d0c4 <_vfiprintf_r+0x240>)
 800ce9e:	429d      	cmp	r5, r3
 800cea0:	d11b      	bne.n	800ceda <_vfiprintf_r+0x56>
 800cea2:	6875      	ldr	r5, [r6, #4]
 800cea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cea6:	07d9      	lsls	r1, r3, #31
 800cea8:	d405      	bmi.n	800ceb6 <_vfiprintf_r+0x32>
 800ceaa:	89ab      	ldrh	r3, [r5, #12]
 800ceac:	059a      	lsls	r2, r3, #22
 800ceae:	d402      	bmi.n	800ceb6 <_vfiprintf_r+0x32>
 800ceb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceb2:	f7ff fe5f 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800ceb6:	89ab      	ldrh	r3, [r5, #12]
 800ceb8:	071b      	lsls	r3, r3, #28
 800ceba:	d501      	bpl.n	800cec0 <_vfiprintf_r+0x3c>
 800cebc:	692b      	ldr	r3, [r5, #16]
 800cebe:	b9eb      	cbnz	r3, 800cefc <_vfiprintf_r+0x78>
 800cec0:	4629      	mov	r1, r5
 800cec2:	4630      	mov	r0, r6
 800cec4:	f000 fe62 	bl	800db8c <__swsetup_r>
 800cec8:	b1c0      	cbz	r0, 800cefc <_vfiprintf_r+0x78>
 800ceca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cecc:	07dc      	lsls	r4, r3, #31
 800cece:	d50e      	bpl.n	800ceee <_vfiprintf_r+0x6a>
 800ced0:	f04f 30ff 	mov.w	r0, #4294967295
 800ced4:	b01d      	add	sp, #116	; 0x74
 800ced6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceda:	4b7b      	ldr	r3, [pc, #492]	; (800d0c8 <_vfiprintf_r+0x244>)
 800cedc:	429d      	cmp	r5, r3
 800cede:	d101      	bne.n	800cee4 <_vfiprintf_r+0x60>
 800cee0:	68b5      	ldr	r5, [r6, #8]
 800cee2:	e7df      	b.n	800cea4 <_vfiprintf_r+0x20>
 800cee4:	4b79      	ldr	r3, [pc, #484]	; (800d0cc <_vfiprintf_r+0x248>)
 800cee6:	429d      	cmp	r5, r3
 800cee8:	bf08      	it	eq
 800ceea:	68f5      	ldreq	r5, [r6, #12]
 800ceec:	e7da      	b.n	800cea4 <_vfiprintf_r+0x20>
 800ceee:	89ab      	ldrh	r3, [r5, #12]
 800cef0:	0598      	lsls	r0, r3, #22
 800cef2:	d4ed      	bmi.n	800ced0 <_vfiprintf_r+0x4c>
 800cef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cef6:	f7ff fe3e 	bl	800cb76 <__retarget_lock_release_recursive>
 800cefa:	e7e9      	b.n	800ced0 <_vfiprintf_r+0x4c>
 800cefc:	2300      	movs	r3, #0
 800cefe:	9309      	str	r3, [sp, #36]	; 0x24
 800cf00:	2320      	movs	r3, #32
 800cf02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf06:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf0a:	2330      	movs	r3, #48	; 0x30
 800cf0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d0d0 <_vfiprintf_r+0x24c>
 800cf10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf14:	f04f 0901 	mov.w	r9, #1
 800cf18:	4623      	mov	r3, r4
 800cf1a:	469a      	mov	sl, r3
 800cf1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf20:	b10a      	cbz	r2, 800cf26 <_vfiprintf_r+0xa2>
 800cf22:	2a25      	cmp	r2, #37	; 0x25
 800cf24:	d1f9      	bne.n	800cf1a <_vfiprintf_r+0x96>
 800cf26:	ebba 0b04 	subs.w	fp, sl, r4
 800cf2a:	d00b      	beq.n	800cf44 <_vfiprintf_r+0xc0>
 800cf2c:	465b      	mov	r3, fp
 800cf2e:	4622      	mov	r2, r4
 800cf30:	4629      	mov	r1, r5
 800cf32:	4630      	mov	r0, r6
 800cf34:	f7ff ff93 	bl	800ce5e <__sfputs_r>
 800cf38:	3001      	adds	r0, #1
 800cf3a:	f000 80aa 	beq.w	800d092 <_vfiprintf_r+0x20e>
 800cf3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf40:	445a      	add	r2, fp
 800cf42:	9209      	str	r2, [sp, #36]	; 0x24
 800cf44:	f89a 3000 	ldrb.w	r3, [sl]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 80a2 	beq.w	800d092 <_vfiprintf_r+0x20e>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f04f 32ff 	mov.w	r2, #4294967295
 800cf54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf58:	f10a 0a01 	add.w	sl, sl, #1
 800cf5c:	9304      	str	r3, [sp, #16]
 800cf5e:	9307      	str	r3, [sp, #28]
 800cf60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf64:	931a      	str	r3, [sp, #104]	; 0x68
 800cf66:	4654      	mov	r4, sl
 800cf68:	2205      	movs	r2, #5
 800cf6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf6e:	4858      	ldr	r0, [pc, #352]	; (800d0d0 <_vfiprintf_r+0x24c>)
 800cf70:	f7f3 f936 	bl	80001e0 <memchr>
 800cf74:	9a04      	ldr	r2, [sp, #16]
 800cf76:	b9d8      	cbnz	r0, 800cfb0 <_vfiprintf_r+0x12c>
 800cf78:	06d1      	lsls	r1, r2, #27
 800cf7a:	bf44      	itt	mi
 800cf7c:	2320      	movmi	r3, #32
 800cf7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf82:	0713      	lsls	r3, r2, #28
 800cf84:	bf44      	itt	mi
 800cf86:	232b      	movmi	r3, #43	; 0x2b
 800cf88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf8c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf90:	2b2a      	cmp	r3, #42	; 0x2a
 800cf92:	d015      	beq.n	800cfc0 <_vfiprintf_r+0x13c>
 800cf94:	9a07      	ldr	r2, [sp, #28]
 800cf96:	4654      	mov	r4, sl
 800cf98:	2000      	movs	r0, #0
 800cf9a:	f04f 0c0a 	mov.w	ip, #10
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfa4:	3b30      	subs	r3, #48	; 0x30
 800cfa6:	2b09      	cmp	r3, #9
 800cfa8:	d94e      	bls.n	800d048 <_vfiprintf_r+0x1c4>
 800cfaa:	b1b0      	cbz	r0, 800cfda <_vfiprintf_r+0x156>
 800cfac:	9207      	str	r2, [sp, #28]
 800cfae:	e014      	b.n	800cfda <_vfiprintf_r+0x156>
 800cfb0:	eba0 0308 	sub.w	r3, r0, r8
 800cfb4:	fa09 f303 	lsl.w	r3, r9, r3
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	9304      	str	r3, [sp, #16]
 800cfbc:	46a2      	mov	sl, r4
 800cfbe:	e7d2      	b.n	800cf66 <_vfiprintf_r+0xe2>
 800cfc0:	9b03      	ldr	r3, [sp, #12]
 800cfc2:	1d19      	adds	r1, r3, #4
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	9103      	str	r1, [sp, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	bfbb      	ittet	lt
 800cfcc:	425b      	neglt	r3, r3
 800cfce:	f042 0202 	orrlt.w	r2, r2, #2
 800cfd2:	9307      	strge	r3, [sp, #28]
 800cfd4:	9307      	strlt	r3, [sp, #28]
 800cfd6:	bfb8      	it	lt
 800cfd8:	9204      	strlt	r2, [sp, #16]
 800cfda:	7823      	ldrb	r3, [r4, #0]
 800cfdc:	2b2e      	cmp	r3, #46	; 0x2e
 800cfde:	d10c      	bne.n	800cffa <_vfiprintf_r+0x176>
 800cfe0:	7863      	ldrb	r3, [r4, #1]
 800cfe2:	2b2a      	cmp	r3, #42	; 0x2a
 800cfe4:	d135      	bne.n	800d052 <_vfiprintf_r+0x1ce>
 800cfe6:	9b03      	ldr	r3, [sp, #12]
 800cfe8:	1d1a      	adds	r2, r3, #4
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	9203      	str	r2, [sp, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	bfb8      	it	lt
 800cff2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cff6:	3402      	adds	r4, #2
 800cff8:	9305      	str	r3, [sp, #20]
 800cffa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d0e0 <_vfiprintf_r+0x25c>
 800cffe:	7821      	ldrb	r1, [r4, #0]
 800d000:	2203      	movs	r2, #3
 800d002:	4650      	mov	r0, sl
 800d004:	f7f3 f8ec 	bl	80001e0 <memchr>
 800d008:	b140      	cbz	r0, 800d01c <_vfiprintf_r+0x198>
 800d00a:	2340      	movs	r3, #64	; 0x40
 800d00c:	eba0 000a 	sub.w	r0, r0, sl
 800d010:	fa03 f000 	lsl.w	r0, r3, r0
 800d014:	9b04      	ldr	r3, [sp, #16]
 800d016:	4303      	orrs	r3, r0
 800d018:	3401      	adds	r4, #1
 800d01a:	9304      	str	r3, [sp, #16]
 800d01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d020:	482c      	ldr	r0, [pc, #176]	; (800d0d4 <_vfiprintf_r+0x250>)
 800d022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d026:	2206      	movs	r2, #6
 800d028:	f7f3 f8da 	bl	80001e0 <memchr>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d03f      	beq.n	800d0b0 <_vfiprintf_r+0x22c>
 800d030:	4b29      	ldr	r3, [pc, #164]	; (800d0d8 <_vfiprintf_r+0x254>)
 800d032:	bb1b      	cbnz	r3, 800d07c <_vfiprintf_r+0x1f8>
 800d034:	9b03      	ldr	r3, [sp, #12]
 800d036:	3307      	adds	r3, #7
 800d038:	f023 0307 	bic.w	r3, r3, #7
 800d03c:	3308      	adds	r3, #8
 800d03e:	9303      	str	r3, [sp, #12]
 800d040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d042:	443b      	add	r3, r7
 800d044:	9309      	str	r3, [sp, #36]	; 0x24
 800d046:	e767      	b.n	800cf18 <_vfiprintf_r+0x94>
 800d048:	fb0c 3202 	mla	r2, ip, r2, r3
 800d04c:	460c      	mov	r4, r1
 800d04e:	2001      	movs	r0, #1
 800d050:	e7a5      	b.n	800cf9e <_vfiprintf_r+0x11a>
 800d052:	2300      	movs	r3, #0
 800d054:	3401      	adds	r4, #1
 800d056:	9305      	str	r3, [sp, #20]
 800d058:	4619      	mov	r1, r3
 800d05a:	f04f 0c0a 	mov.w	ip, #10
 800d05e:	4620      	mov	r0, r4
 800d060:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d064:	3a30      	subs	r2, #48	; 0x30
 800d066:	2a09      	cmp	r2, #9
 800d068:	d903      	bls.n	800d072 <_vfiprintf_r+0x1ee>
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d0c5      	beq.n	800cffa <_vfiprintf_r+0x176>
 800d06e:	9105      	str	r1, [sp, #20]
 800d070:	e7c3      	b.n	800cffa <_vfiprintf_r+0x176>
 800d072:	fb0c 2101 	mla	r1, ip, r1, r2
 800d076:	4604      	mov	r4, r0
 800d078:	2301      	movs	r3, #1
 800d07a:	e7f0      	b.n	800d05e <_vfiprintf_r+0x1da>
 800d07c:	ab03      	add	r3, sp, #12
 800d07e:	9300      	str	r3, [sp, #0]
 800d080:	462a      	mov	r2, r5
 800d082:	4b16      	ldr	r3, [pc, #88]	; (800d0dc <_vfiprintf_r+0x258>)
 800d084:	a904      	add	r1, sp, #16
 800d086:	4630      	mov	r0, r6
 800d088:	f3af 8000 	nop.w
 800d08c:	4607      	mov	r7, r0
 800d08e:	1c78      	adds	r0, r7, #1
 800d090:	d1d6      	bne.n	800d040 <_vfiprintf_r+0x1bc>
 800d092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d094:	07d9      	lsls	r1, r3, #31
 800d096:	d405      	bmi.n	800d0a4 <_vfiprintf_r+0x220>
 800d098:	89ab      	ldrh	r3, [r5, #12]
 800d09a:	059a      	lsls	r2, r3, #22
 800d09c:	d402      	bmi.n	800d0a4 <_vfiprintf_r+0x220>
 800d09e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0a0:	f7ff fd69 	bl	800cb76 <__retarget_lock_release_recursive>
 800d0a4:	89ab      	ldrh	r3, [r5, #12]
 800d0a6:	065b      	lsls	r3, r3, #25
 800d0a8:	f53f af12 	bmi.w	800ced0 <_vfiprintf_r+0x4c>
 800d0ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0ae:	e711      	b.n	800ced4 <_vfiprintf_r+0x50>
 800d0b0:	ab03      	add	r3, sp, #12
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	462a      	mov	r2, r5
 800d0b6:	4b09      	ldr	r3, [pc, #36]	; (800d0dc <_vfiprintf_r+0x258>)
 800d0b8:	a904      	add	r1, sp, #16
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f000 f880 	bl	800d1c0 <_printf_i>
 800d0c0:	e7e4      	b.n	800d08c <_vfiprintf_r+0x208>
 800d0c2:	bf00      	nop
 800d0c4:	0800f6c4 	.word	0x0800f6c4
 800d0c8:	0800f6e4 	.word	0x0800f6e4
 800d0cc:	0800f6a4 	.word	0x0800f6a4
 800d0d0:	0800f708 	.word	0x0800f708
 800d0d4:	0800f712 	.word	0x0800f712
 800d0d8:	00000000 	.word	0x00000000
 800d0dc:	0800ce5f 	.word	0x0800ce5f
 800d0e0:	0800f70e 	.word	0x0800f70e

0800d0e4 <_printf_common>:
 800d0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e8:	4616      	mov	r6, r2
 800d0ea:	4699      	mov	r9, r3
 800d0ec:	688a      	ldr	r2, [r1, #8]
 800d0ee:	690b      	ldr	r3, [r1, #16]
 800d0f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	bfb8      	it	lt
 800d0f8:	4613      	movlt	r3, r2
 800d0fa:	6033      	str	r3, [r6, #0]
 800d0fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d100:	4607      	mov	r7, r0
 800d102:	460c      	mov	r4, r1
 800d104:	b10a      	cbz	r2, 800d10a <_printf_common+0x26>
 800d106:	3301      	adds	r3, #1
 800d108:	6033      	str	r3, [r6, #0]
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	0699      	lsls	r1, r3, #26
 800d10e:	bf42      	ittt	mi
 800d110:	6833      	ldrmi	r3, [r6, #0]
 800d112:	3302      	addmi	r3, #2
 800d114:	6033      	strmi	r3, [r6, #0]
 800d116:	6825      	ldr	r5, [r4, #0]
 800d118:	f015 0506 	ands.w	r5, r5, #6
 800d11c:	d106      	bne.n	800d12c <_printf_common+0x48>
 800d11e:	f104 0a19 	add.w	sl, r4, #25
 800d122:	68e3      	ldr	r3, [r4, #12]
 800d124:	6832      	ldr	r2, [r6, #0]
 800d126:	1a9b      	subs	r3, r3, r2
 800d128:	42ab      	cmp	r3, r5
 800d12a:	dc26      	bgt.n	800d17a <_printf_common+0x96>
 800d12c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d130:	1e13      	subs	r3, r2, #0
 800d132:	6822      	ldr	r2, [r4, #0]
 800d134:	bf18      	it	ne
 800d136:	2301      	movne	r3, #1
 800d138:	0692      	lsls	r2, r2, #26
 800d13a:	d42b      	bmi.n	800d194 <_printf_common+0xb0>
 800d13c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d140:	4649      	mov	r1, r9
 800d142:	4638      	mov	r0, r7
 800d144:	47c0      	blx	r8
 800d146:	3001      	adds	r0, #1
 800d148:	d01e      	beq.n	800d188 <_printf_common+0xa4>
 800d14a:	6823      	ldr	r3, [r4, #0]
 800d14c:	68e5      	ldr	r5, [r4, #12]
 800d14e:	6832      	ldr	r2, [r6, #0]
 800d150:	f003 0306 	and.w	r3, r3, #6
 800d154:	2b04      	cmp	r3, #4
 800d156:	bf08      	it	eq
 800d158:	1aad      	subeq	r5, r5, r2
 800d15a:	68a3      	ldr	r3, [r4, #8]
 800d15c:	6922      	ldr	r2, [r4, #16]
 800d15e:	bf0c      	ite	eq
 800d160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d164:	2500      	movne	r5, #0
 800d166:	4293      	cmp	r3, r2
 800d168:	bfc4      	itt	gt
 800d16a:	1a9b      	subgt	r3, r3, r2
 800d16c:	18ed      	addgt	r5, r5, r3
 800d16e:	2600      	movs	r6, #0
 800d170:	341a      	adds	r4, #26
 800d172:	42b5      	cmp	r5, r6
 800d174:	d11a      	bne.n	800d1ac <_printf_common+0xc8>
 800d176:	2000      	movs	r0, #0
 800d178:	e008      	b.n	800d18c <_printf_common+0xa8>
 800d17a:	2301      	movs	r3, #1
 800d17c:	4652      	mov	r2, sl
 800d17e:	4649      	mov	r1, r9
 800d180:	4638      	mov	r0, r7
 800d182:	47c0      	blx	r8
 800d184:	3001      	adds	r0, #1
 800d186:	d103      	bne.n	800d190 <_printf_common+0xac>
 800d188:	f04f 30ff 	mov.w	r0, #4294967295
 800d18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d190:	3501      	adds	r5, #1
 800d192:	e7c6      	b.n	800d122 <_printf_common+0x3e>
 800d194:	18e1      	adds	r1, r4, r3
 800d196:	1c5a      	adds	r2, r3, #1
 800d198:	2030      	movs	r0, #48	; 0x30
 800d19a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d19e:	4422      	add	r2, r4
 800d1a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1a8:	3302      	adds	r3, #2
 800d1aa:	e7c7      	b.n	800d13c <_printf_common+0x58>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	4622      	mov	r2, r4
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	47c0      	blx	r8
 800d1b6:	3001      	adds	r0, #1
 800d1b8:	d0e6      	beq.n	800d188 <_printf_common+0xa4>
 800d1ba:	3601      	adds	r6, #1
 800d1bc:	e7d9      	b.n	800d172 <_printf_common+0x8e>
	...

0800d1c0 <_printf_i>:
 800d1c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c4:	7e0f      	ldrb	r7, [r1, #24]
 800d1c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1c8:	2f78      	cmp	r7, #120	; 0x78
 800d1ca:	4691      	mov	r9, r2
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	460c      	mov	r4, r1
 800d1d0:	469a      	mov	sl, r3
 800d1d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1d6:	d807      	bhi.n	800d1e8 <_printf_i+0x28>
 800d1d8:	2f62      	cmp	r7, #98	; 0x62
 800d1da:	d80a      	bhi.n	800d1f2 <_printf_i+0x32>
 800d1dc:	2f00      	cmp	r7, #0
 800d1de:	f000 80d8 	beq.w	800d392 <_printf_i+0x1d2>
 800d1e2:	2f58      	cmp	r7, #88	; 0x58
 800d1e4:	f000 80a3 	beq.w	800d32e <_printf_i+0x16e>
 800d1e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1f0:	e03a      	b.n	800d268 <_printf_i+0xa8>
 800d1f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1f6:	2b15      	cmp	r3, #21
 800d1f8:	d8f6      	bhi.n	800d1e8 <_printf_i+0x28>
 800d1fa:	a101      	add	r1, pc, #4	; (adr r1, 800d200 <_printf_i+0x40>)
 800d1fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d200:	0800d259 	.word	0x0800d259
 800d204:	0800d26d 	.word	0x0800d26d
 800d208:	0800d1e9 	.word	0x0800d1e9
 800d20c:	0800d1e9 	.word	0x0800d1e9
 800d210:	0800d1e9 	.word	0x0800d1e9
 800d214:	0800d1e9 	.word	0x0800d1e9
 800d218:	0800d26d 	.word	0x0800d26d
 800d21c:	0800d1e9 	.word	0x0800d1e9
 800d220:	0800d1e9 	.word	0x0800d1e9
 800d224:	0800d1e9 	.word	0x0800d1e9
 800d228:	0800d1e9 	.word	0x0800d1e9
 800d22c:	0800d379 	.word	0x0800d379
 800d230:	0800d29d 	.word	0x0800d29d
 800d234:	0800d35b 	.word	0x0800d35b
 800d238:	0800d1e9 	.word	0x0800d1e9
 800d23c:	0800d1e9 	.word	0x0800d1e9
 800d240:	0800d39b 	.word	0x0800d39b
 800d244:	0800d1e9 	.word	0x0800d1e9
 800d248:	0800d29d 	.word	0x0800d29d
 800d24c:	0800d1e9 	.word	0x0800d1e9
 800d250:	0800d1e9 	.word	0x0800d1e9
 800d254:	0800d363 	.word	0x0800d363
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	1d1a      	adds	r2, r3, #4
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	602a      	str	r2, [r5, #0]
 800d260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d268:	2301      	movs	r3, #1
 800d26a:	e0a3      	b.n	800d3b4 <_printf_i+0x1f4>
 800d26c:	6820      	ldr	r0, [r4, #0]
 800d26e:	6829      	ldr	r1, [r5, #0]
 800d270:	0606      	lsls	r6, r0, #24
 800d272:	f101 0304 	add.w	r3, r1, #4
 800d276:	d50a      	bpl.n	800d28e <_printf_i+0xce>
 800d278:	680e      	ldr	r6, [r1, #0]
 800d27a:	602b      	str	r3, [r5, #0]
 800d27c:	2e00      	cmp	r6, #0
 800d27e:	da03      	bge.n	800d288 <_printf_i+0xc8>
 800d280:	232d      	movs	r3, #45	; 0x2d
 800d282:	4276      	negs	r6, r6
 800d284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d288:	485e      	ldr	r0, [pc, #376]	; (800d404 <_printf_i+0x244>)
 800d28a:	230a      	movs	r3, #10
 800d28c:	e019      	b.n	800d2c2 <_printf_i+0x102>
 800d28e:	680e      	ldr	r6, [r1, #0]
 800d290:	602b      	str	r3, [r5, #0]
 800d292:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d296:	bf18      	it	ne
 800d298:	b236      	sxthne	r6, r6
 800d29a:	e7ef      	b.n	800d27c <_printf_i+0xbc>
 800d29c:	682b      	ldr	r3, [r5, #0]
 800d29e:	6820      	ldr	r0, [r4, #0]
 800d2a0:	1d19      	adds	r1, r3, #4
 800d2a2:	6029      	str	r1, [r5, #0]
 800d2a4:	0601      	lsls	r1, r0, #24
 800d2a6:	d501      	bpl.n	800d2ac <_printf_i+0xec>
 800d2a8:	681e      	ldr	r6, [r3, #0]
 800d2aa:	e002      	b.n	800d2b2 <_printf_i+0xf2>
 800d2ac:	0646      	lsls	r6, r0, #25
 800d2ae:	d5fb      	bpl.n	800d2a8 <_printf_i+0xe8>
 800d2b0:	881e      	ldrh	r6, [r3, #0]
 800d2b2:	4854      	ldr	r0, [pc, #336]	; (800d404 <_printf_i+0x244>)
 800d2b4:	2f6f      	cmp	r7, #111	; 0x6f
 800d2b6:	bf0c      	ite	eq
 800d2b8:	2308      	moveq	r3, #8
 800d2ba:	230a      	movne	r3, #10
 800d2bc:	2100      	movs	r1, #0
 800d2be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2c2:	6865      	ldr	r5, [r4, #4]
 800d2c4:	60a5      	str	r5, [r4, #8]
 800d2c6:	2d00      	cmp	r5, #0
 800d2c8:	bfa2      	ittt	ge
 800d2ca:	6821      	ldrge	r1, [r4, #0]
 800d2cc:	f021 0104 	bicge.w	r1, r1, #4
 800d2d0:	6021      	strge	r1, [r4, #0]
 800d2d2:	b90e      	cbnz	r6, 800d2d8 <_printf_i+0x118>
 800d2d4:	2d00      	cmp	r5, #0
 800d2d6:	d04d      	beq.n	800d374 <_printf_i+0x1b4>
 800d2d8:	4615      	mov	r5, r2
 800d2da:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2de:	fb03 6711 	mls	r7, r3, r1, r6
 800d2e2:	5dc7      	ldrb	r7, [r0, r7]
 800d2e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2e8:	4637      	mov	r7, r6
 800d2ea:	42bb      	cmp	r3, r7
 800d2ec:	460e      	mov	r6, r1
 800d2ee:	d9f4      	bls.n	800d2da <_printf_i+0x11a>
 800d2f0:	2b08      	cmp	r3, #8
 800d2f2:	d10b      	bne.n	800d30c <_printf_i+0x14c>
 800d2f4:	6823      	ldr	r3, [r4, #0]
 800d2f6:	07de      	lsls	r6, r3, #31
 800d2f8:	d508      	bpl.n	800d30c <_printf_i+0x14c>
 800d2fa:	6923      	ldr	r3, [r4, #16]
 800d2fc:	6861      	ldr	r1, [r4, #4]
 800d2fe:	4299      	cmp	r1, r3
 800d300:	bfde      	ittt	le
 800d302:	2330      	movle	r3, #48	; 0x30
 800d304:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d308:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d30c:	1b52      	subs	r2, r2, r5
 800d30e:	6122      	str	r2, [r4, #16]
 800d310:	f8cd a000 	str.w	sl, [sp]
 800d314:	464b      	mov	r3, r9
 800d316:	aa03      	add	r2, sp, #12
 800d318:	4621      	mov	r1, r4
 800d31a:	4640      	mov	r0, r8
 800d31c:	f7ff fee2 	bl	800d0e4 <_printf_common>
 800d320:	3001      	adds	r0, #1
 800d322:	d14c      	bne.n	800d3be <_printf_i+0x1fe>
 800d324:	f04f 30ff 	mov.w	r0, #4294967295
 800d328:	b004      	add	sp, #16
 800d32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d32e:	4835      	ldr	r0, [pc, #212]	; (800d404 <_printf_i+0x244>)
 800d330:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d334:	6829      	ldr	r1, [r5, #0]
 800d336:	6823      	ldr	r3, [r4, #0]
 800d338:	f851 6b04 	ldr.w	r6, [r1], #4
 800d33c:	6029      	str	r1, [r5, #0]
 800d33e:	061d      	lsls	r5, r3, #24
 800d340:	d514      	bpl.n	800d36c <_printf_i+0x1ac>
 800d342:	07df      	lsls	r7, r3, #31
 800d344:	bf44      	itt	mi
 800d346:	f043 0320 	orrmi.w	r3, r3, #32
 800d34a:	6023      	strmi	r3, [r4, #0]
 800d34c:	b91e      	cbnz	r6, 800d356 <_printf_i+0x196>
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	f023 0320 	bic.w	r3, r3, #32
 800d354:	6023      	str	r3, [r4, #0]
 800d356:	2310      	movs	r3, #16
 800d358:	e7b0      	b.n	800d2bc <_printf_i+0xfc>
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	f043 0320 	orr.w	r3, r3, #32
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	2378      	movs	r3, #120	; 0x78
 800d364:	4828      	ldr	r0, [pc, #160]	; (800d408 <_printf_i+0x248>)
 800d366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d36a:	e7e3      	b.n	800d334 <_printf_i+0x174>
 800d36c:	0659      	lsls	r1, r3, #25
 800d36e:	bf48      	it	mi
 800d370:	b2b6      	uxthmi	r6, r6
 800d372:	e7e6      	b.n	800d342 <_printf_i+0x182>
 800d374:	4615      	mov	r5, r2
 800d376:	e7bb      	b.n	800d2f0 <_printf_i+0x130>
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	6826      	ldr	r6, [r4, #0]
 800d37c:	6961      	ldr	r1, [r4, #20]
 800d37e:	1d18      	adds	r0, r3, #4
 800d380:	6028      	str	r0, [r5, #0]
 800d382:	0635      	lsls	r5, r6, #24
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	d501      	bpl.n	800d38c <_printf_i+0x1cc>
 800d388:	6019      	str	r1, [r3, #0]
 800d38a:	e002      	b.n	800d392 <_printf_i+0x1d2>
 800d38c:	0670      	lsls	r0, r6, #25
 800d38e:	d5fb      	bpl.n	800d388 <_printf_i+0x1c8>
 800d390:	8019      	strh	r1, [r3, #0]
 800d392:	2300      	movs	r3, #0
 800d394:	6123      	str	r3, [r4, #16]
 800d396:	4615      	mov	r5, r2
 800d398:	e7ba      	b.n	800d310 <_printf_i+0x150>
 800d39a:	682b      	ldr	r3, [r5, #0]
 800d39c:	1d1a      	adds	r2, r3, #4
 800d39e:	602a      	str	r2, [r5, #0]
 800d3a0:	681d      	ldr	r5, [r3, #0]
 800d3a2:	6862      	ldr	r2, [r4, #4]
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	f7f2 ff1a 	bl	80001e0 <memchr>
 800d3ac:	b108      	cbz	r0, 800d3b2 <_printf_i+0x1f2>
 800d3ae:	1b40      	subs	r0, r0, r5
 800d3b0:	6060      	str	r0, [r4, #4]
 800d3b2:	6863      	ldr	r3, [r4, #4]
 800d3b4:	6123      	str	r3, [r4, #16]
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3bc:	e7a8      	b.n	800d310 <_printf_i+0x150>
 800d3be:	6923      	ldr	r3, [r4, #16]
 800d3c0:	462a      	mov	r2, r5
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	4640      	mov	r0, r8
 800d3c6:	47d0      	blx	sl
 800d3c8:	3001      	adds	r0, #1
 800d3ca:	d0ab      	beq.n	800d324 <_printf_i+0x164>
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	079b      	lsls	r3, r3, #30
 800d3d0:	d413      	bmi.n	800d3fa <_printf_i+0x23a>
 800d3d2:	68e0      	ldr	r0, [r4, #12]
 800d3d4:	9b03      	ldr	r3, [sp, #12]
 800d3d6:	4298      	cmp	r0, r3
 800d3d8:	bfb8      	it	lt
 800d3da:	4618      	movlt	r0, r3
 800d3dc:	e7a4      	b.n	800d328 <_printf_i+0x168>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	4632      	mov	r2, r6
 800d3e2:	4649      	mov	r1, r9
 800d3e4:	4640      	mov	r0, r8
 800d3e6:	47d0      	blx	sl
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	d09b      	beq.n	800d324 <_printf_i+0x164>
 800d3ec:	3501      	adds	r5, #1
 800d3ee:	68e3      	ldr	r3, [r4, #12]
 800d3f0:	9903      	ldr	r1, [sp, #12]
 800d3f2:	1a5b      	subs	r3, r3, r1
 800d3f4:	42ab      	cmp	r3, r5
 800d3f6:	dcf2      	bgt.n	800d3de <_printf_i+0x21e>
 800d3f8:	e7eb      	b.n	800d3d2 <_printf_i+0x212>
 800d3fa:	2500      	movs	r5, #0
 800d3fc:	f104 0619 	add.w	r6, r4, #25
 800d400:	e7f5      	b.n	800d3ee <_printf_i+0x22e>
 800d402:	bf00      	nop
 800d404:	0800f719 	.word	0x0800f719
 800d408:	0800f72a 	.word	0x0800f72a

0800d40c <_open_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	4d07      	ldr	r5, [pc, #28]	; (800d42c <_open_r+0x20>)
 800d410:	4604      	mov	r4, r0
 800d412:	4608      	mov	r0, r1
 800d414:	4611      	mov	r1, r2
 800d416:	2200      	movs	r2, #0
 800d418:	602a      	str	r2, [r5, #0]
 800d41a:	461a      	mov	r2, r3
 800d41c:	f7f5 fc54 	bl	8002cc8 <_open>
 800d420:	1c43      	adds	r3, r0, #1
 800d422:	d102      	bne.n	800d42a <_open_r+0x1e>
 800d424:	682b      	ldr	r3, [r5, #0]
 800d426:	b103      	cbz	r3, 800d42a <_open_r+0x1e>
 800d428:	6023      	str	r3, [r4, #0]
 800d42a:	bd38      	pop	{r3, r4, r5, pc}
 800d42c:	20006774 	.word	0x20006774

0800d430 <iprintf>:
 800d430:	b40f      	push	{r0, r1, r2, r3}
 800d432:	4b0a      	ldr	r3, [pc, #40]	; (800d45c <iprintf+0x2c>)
 800d434:	b513      	push	{r0, r1, r4, lr}
 800d436:	681c      	ldr	r4, [r3, #0]
 800d438:	b124      	cbz	r4, 800d444 <iprintf+0x14>
 800d43a:	69a3      	ldr	r3, [r4, #24]
 800d43c:	b913      	cbnz	r3, 800d444 <iprintf+0x14>
 800d43e:	4620      	mov	r0, r4
 800d440:	f7ff f926 	bl	800c690 <__sinit>
 800d444:	ab05      	add	r3, sp, #20
 800d446:	9a04      	ldr	r2, [sp, #16]
 800d448:	68a1      	ldr	r1, [r4, #8]
 800d44a:	9301      	str	r3, [sp, #4]
 800d44c:	4620      	mov	r0, r4
 800d44e:	f7ff fd19 	bl	800ce84 <_vfiprintf_r>
 800d452:	b002      	add	sp, #8
 800d454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d458:	b004      	add	sp, #16
 800d45a:	4770      	bx	lr
 800d45c:	20000108 	.word	0x20000108

0800d460 <_puts_r>:
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	460e      	mov	r6, r1
 800d464:	4605      	mov	r5, r0
 800d466:	b118      	cbz	r0, 800d470 <_puts_r+0x10>
 800d468:	6983      	ldr	r3, [r0, #24]
 800d46a:	b90b      	cbnz	r3, 800d470 <_puts_r+0x10>
 800d46c:	f7ff f910 	bl	800c690 <__sinit>
 800d470:	69ab      	ldr	r3, [r5, #24]
 800d472:	68ac      	ldr	r4, [r5, #8]
 800d474:	b913      	cbnz	r3, 800d47c <_puts_r+0x1c>
 800d476:	4628      	mov	r0, r5
 800d478:	f7ff f90a 	bl	800c690 <__sinit>
 800d47c:	4b2c      	ldr	r3, [pc, #176]	; (800d530 <_puts_r+0xd0>)
 800d47e:	429c      	cmp	r4, r3
 800d480:	d120      	bne.n	800d4c4 <_puts_r+0x64>
 800d482:	686c      	ldr	r4, [r5, #4]
 800d484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d486:	07db      	lsls	r3, r3, #31
 800d488:	d405      	bmi.n	800d496 <_puts_r+0x36>
 800d48a:	89a3      	ldrh	r3, [r4, #12]
 800d48c:	0598      	lsls	r0, r3, #22
 800d48e:	d402      	bmi.n	800d496 <_puts_r+0x36>
 800d490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d492:	f7ff fb6f 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	0719      	lsls	r1, r3, #28
 800d49a:	d51d      	bpl.n	800d4d8 <_puts_r+0x78>
 800d49c:	6923      	ldr	r3, [r4, #16]
 800d49e:	b1db      	cbz	r3, 800d4d8 <_puts_r+0x78>
 800d4a0:	3e01      	subs	r6, #1
 800d4a2:	68a3      	ldr	r3, [r4, #8]
 800d4a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	60a3      	str	r3, [r4, #8]
 800d4ac:	bb39      	cbnz	r1, 800d4fe <_puts_r+0x9e>
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	da38      	bge.n	800d524 <_puts_r+0xc4>
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	210a      	movs	r1, #10
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f000 fb04 	bl	800dac4 <__swbuf_r>
 800d4bc:	3001      	adds	r0, #1
 800d4be:	d011      	beq.n	800d4e4 <_puts_r+0x84>
 800d4c0:	250a      	movs	r5, #10
 800d4c2:	e011      	b.n	800d4e8 <_puts_r+0x88>
 800d4c4:	4b1b      	ldr	r3, [pc, #108]	; (800d534 <_puts_r+0xd4>)
 800d4c6:	429c      	cmp	r4, r3
 800d4c8:	d101      	bne.n	800d4ce <_puts_r+0x6e>
 800d4ca:	68ac      	ldr	r4, [r5, #8]
 800d4cc:	e7da      	b.n	800d484 <_puts_r+0x24>
 800d4ce:	4b1a      	ldr	r3, [pc, #104]	; (800d538 <_puts_r+0xd8>)
 800d4d0:	429c      	cmp	r4, r3
 800d4d2:	bf08      	it	eq
 800d4d4:	68ec      	ldreq	r4, [r5, #12]
 800d4d6:	e7d5      	b.n	800d484 <_puts_r+0x24>
 800d4d8:	4621      	mov	r1, r4
 800d4da:	4628      	mov	r0, r5
 800d4dc:	f000 fb56 	bl	800db8c <__swsetup_r>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d0dd      	beq.n	800d4a0 <_puts_r+0x40>
 800d4e4:	f04f 35ff 	mov.w	r5, #4294967295
 800d4e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4ea:	07da      	lsls	r2, r3, #31
 800d4ec:	d405      	bmi.n	800d4fa <_puts_r+0x9a>
 800d4ee:	89a3      	ldrh	r3, [r4, #12]
 800d4f0:	059b      	lsls	r3, r3, #22
 800d4f2:	d402      	bmi.n	800d4fa <_puts_r+0x9a>
 800d4f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4f6:	f7ff fb3e 	bl	800cb76 <__retarget_lock_release_recursive>
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	bd70      	pop	{r4, r5, r6, pc}
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	da04      	bge.n	800d50c <_puts_r+0xac>
 800d502:	69a2      	ldr	r2, [r4, #24]
 800d504:	429a      	cmp	r2, r3
 800d506:	dc06      	bgt.n	800d516 <_puts_r+0xb6>
 800d508:	290a      	cmp	r1, #10
 800d50a:	d004      	beq.n	800d516 <_puts_r+0xb6>
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	6022      	str	r2, [r4, #0]
 800d512:	7019      	strb	r1, [r3, #0]
 800d514:	e7c5      	b.n	800d4a2 <_puts_r+0x42>
 800d516:	4622      	mov	r2, r4
 800d518:	4628      	mov	r0, r5
 800d51a:	f000 fad3 	bl	800dac4 <__swbuf_r>
 800d51e:	3001      	adds	r0, #1
 800d520:	d1bf      	bne.n	800d4a2 <_puts_r+0x42>
 800d522:	e7df      	b.n	800d4e4 <_puts_r+0x84>
 800d524:	6823      	ldr	r3, [r4, #0]
 800d526:	250a      	movs	r5, #10
 800d528:	1c5a      	adds	r2, r3, #1
 800d52a:	6022      	str	r2, [r4, #0]
 800d52c:	701d      	strb	r5, [r3, #0]
 800d52e:	e7db      	b.n	800d4e8 <_puts_r+0x88>
 800d530:	0800f6c4 	.word	0x0800f6c4
 800d534:	0800f6e4 	.word	0x0800f6e4
 800d538:	0800f6a4 	.word	0x0800f6a4

0800d53c <puts>:
 800d53c:	4b02      	ldr	r3, [pc, #8]	; (800d548 <puts+0xc>)
 800d53e:	4601      	mov	r1, r0
 800d540:	6818      	ldr	r0, [r3, #0]
 800d542:	f7ff bf8d 	b.w	800d460 <_puts_r>
 800d546:	bf00      	nop
 800d548:	20000108 	.word	0x20000108

0800d54c <cleanup_glue>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	460c      	mov	r4, r1
 800d550:	6809      	ldr	r1, [r1, #0]
 800d552:	4605      	mov	r5, r0
 800d554:	b109      	cbz	r1, 800d55a <cleanup_glue+0xe>
 800d556:	f7ff fff9 	bl	800d54c <cleanup_glue>
 800d55a:	4621      	mov	r1, r4
 800d55c:	4628      	mov	r0, r5
 800d55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d562:	f7ff bb85 	b.w	800cc70 <_free_r>
	...

0800d568 <_reclaim_reent>:
 800d568:	4b2c      	ldr	r3, [pc, #176]	; (800d61c <_reclaim_reent+0xb4>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4283      	cmp	r3, r0
 800d56e:	b570      	push	{r4, r5, r6, lr}
 800d570:	4604      	mov	r4, r0
 800d572:	d051      	beq.n	800d618 <_reclaim_reent+0xb0>
 800d574:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d576:	b143      	cbz	r3, 800d58a <_reclaim_reent+0x22>
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d14a      	bne.n	800d614 <_reclaim_reent+0xac>
 800d57e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d580:	6819      	ldr	r1, [r3, #0]
 800d582:	b111      	cbz	r1, 800d58a <_reclaim_reent+0x22>
 800d584:	4620      	mov	r0, r4
 800d586:	f7ff fb73 	bl	800cc70 <_free_r>
 800d58a:	6961      	ldr	r1, [r4, #20]
 800d58c:	b111      	cbz	r1, 800d594 <_reclaim_reent+0x2c>
 800d58e:	4620      	mov	r0, r4
 800d590:	f7ff fb6e 	bl	800cc70 <_free_r>
 800d594:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d596:	b111      	cbz	r1, 800d59e <_reclaim_reent+0x36>
 800d598:	4620      	mov	r0, r4
 800d59a:	f7ff fb69 	bl	800cc70 <_free_r>
 800d59e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d5a0:	b111      	cbz	r1, 800d5a8 <_reclaim_reent+0x40>
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f7ff fb64 	bl	800cc70 <_free_r>
 800d5a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d5aa:	b111      	cbz	r1, 800d5b2 <_reclaim_reent+0x4a>
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f7ff fb5f 	bl	800cc70 <_free_r>
 800d5b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d5b4:	b111      	cbz	r1, 800d5bc <_reclaim_reent+0x54>
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f7ff fb5a 	bl	800cc70 <_free_r>
 800d5bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d5be:	b111      	cbz	r1, 800d5c6 <_reclaim_reent+0x5e>
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f7ff fb55 	bl	800cc70 <_free_r>
 800d5c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d5c8:	b111      	cbz	r1, 800d5d0 <_reclaim_reent+0x68>
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f7ff fb50 	bl	800cc70 <_free_r>
 800d5d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5d2:	b111      	cbz	r1, 800d5da <_reclaim_reent+0x72>
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f7ff fb4b 	bl	800cc70 <_free_r>
 800d5da:	69a3      	ldr	r3, [r4, #24]
 800d5dc:	b1e3      	cbz	r3, 800d618 <_reclaim_reent+0xb0>
 800d5de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	4798      	blx	r3
 800d5e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d5e6:	b1b9      	cbz	r1, 800d618 <_reclaim_reent+0xb0>
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5ee:	f7ff bfad 	b.w	800d54c <cleanup_glue>
 800d5f2:	5949      	ldr	r1, [r1, r5]
 800d5f4:	b941      	cbnz	r1, 800d608 <_reclaim_reent+0xa0>
 800d5f6:	3504      	adds	r5, #4
 800d5f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5fa:	2d80      	cmp	r5, #128	; 0x80
 800d5fc:	68d9      	ldr	r1, [r3, #12]
 800d5fe:	d1f8      	bne.n	800d5f2 <_reclaim_reent+0x8a>
 800d600:	4620      	mov	r0, r4
 800d602:	f7ff fb35 	bl	800cc70 <_free_r>
 800d606:	e7ba      	b.n	800d57e <_reclaim_reent+0x16>
 800d608:	680e      	ldr	r6, [r1, #0]
 800d60a:	4620      	mov	r0, r4
 800d60c:	f7ff fb30 	bl	800cc70 <_free_r>
 800d610:	4631      	mov	r1, r6
 800d612:	e7ef      	b.n	800d5f4 <_reclaim_reent+0x8c>
 800d614:	2500      	movs	r5, #0
 800d616:	e7ef      	b.n	800d5f8 <_reclaim_reent+0x90>
 800d618:	bd70      	pop	{r4, r5, r6, pc}
 800d61a:	bf00      	nop
 800d61c:	20000108 	.word	0x20000108

0800d620 <lflush>:
 800d620:	8983      	ldrh	r3, [r0, #12]
 800d622:	f003 0309 	and.w	r3, r3, #9
 800d626:	2b09      	cmp	r3, #9
 800d628:	d101      	bne.n	800d62e <lflush+0xe>
 800d62a:	f000 bbef 	b.w	800de0c <fflush>
 800d62e:	2000      	movs	r0, #0
 800d630:	4770      	bx	lr
	...

0800d634 <__srefill_r>:
 800d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d636:	460c      	mov	r4, r1
 800d638:	4605      	mov	r5, r0
 800d63a:	b118      	cbz	r0, 800d644 <__srefill_r+0x10>
 800d63c:	6983      	ldr	r3, [r0, #24]
 800d63e:	b90b      	cbnz	r3, 800d644 <__srefill_r+0x10>
 800d640:	f7ff f826 	bl	800c690 <__sinit>
 800d644:	4b3b      	ldr	r3, [pc, #236]	; (800d734 <__srefill_r+0x100>)
 800d646:	429c      	cmp	r4, r3
 800d648:	d10a      	bne.n	800d660 <__srefill_r+0x2c>
 800d64a:	686c      	ldr	r4, [r5, #4]
 800d64c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d650:	2300      	movs	r3, #0
 800d652:	6063      	str	r3, [r4, #4]
 800d654:	89a3      	ldrh	r3, [r4, #12]
 800d656:	069e      	lsls	r6, r3, #26
 800d658:	d50c      	bpl.n	800d674 <__srefill_r+0x40>
 800d65a:	f04f 30ff 	mov.w	r0, #4294967295
 800d65e:	e066      	b.n	800d72e <__srefill_r+0xfa>
 800d660:	4b35      	ldr	r3, [pc, #212]	; (800d738 <__srefill_r+0x104>)
 800d662:	429c      	cmp	r4, r3
 800d664:	d101      	bne.n	800d66a <__srefill_r+0x36>
 800d666:	68ac      	ldr	r4, [r5, #8]
 800d668:	e7f0      	b.n	800d64c <__srefill_r+0x18>
 800d66a:	4b34      	ldr	r3, [pc, #208]	; (800d73c <__srefill_r+0x108>)
 800d66c:	429c      	cmp	r4, r3
 800d66e:	bf08      	it	eq
 800d670:	68ec      	ldreq	r4, [r5, #12]
 800d672:	e7eb      	b.n	800d64c <__srefill_r+0x18>
 800d674:	0758      	lsls	r0, r3, #29
 800d676:	d448      	bmi.n	800d70a <__srefill_r+0xd6>
 800d678:	06d9      	lsls	r1, r3, #27
 800d67a:	d405      	bmi.n	800d688 <__srefill_r+0x54>
 800d67c:	2309      	movs	r3, #9
 800d67e:	602b      	str	r3, [r5, #0]
 800d680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d684:	81a3      	strh	r3, [r4, #12]
 800d686:	e7e8      	b.n	800d65a <__srefill_r+0x26>
 800d688:	071a      	lsls	r2, r3, #28
 800d68a:	d50b      	bpl.n	800d6a4 <__srefill_r+0x70>
 800d68c:	4621      	mov	r1, r4
 800d68e:	4628      	mov	r0, r5
 800d690:	f000 fb80 	bl	800dd94 <_fflush_r>
 800d694:	2800      	cmp	r0, #0
 800d696:	d1e0      	bne.n	800d65a <__srefill_r+0x26>
 800d698:	89a3      	ldrh	r3, [r4, #12]
 800d69a:	60a0      	str	r0, [r4, #8]
 800d69c:	f023 0308 	bic.w	r3, r3, #8
 800d6a0:	81a3      	strh	r3, [r4, #12]
 800d6a2:	61a0      	str	r0, [r4, #24]
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	f043 0304 	orr.w	r3, r3, #4
 800d6aa:	81a3      	strh	r3, [r4, #12]
 800d6ac:	6923      	ldr	r3, [r4, #16]
 800d6ae:	b91b      	cbnz	r3, 800d6b8 <__srefill_r+0x84>
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f7ff fa86 	bl	800cbc4 <__smakebuf_r>
 800d6b8:	89a6      	ldrh	r6, [r4, #12]
 800d6ba:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800d6be:	07b3      	lsls	r3, r6, #30
 800d6c0:	d00f      	beq.n	800d6e2 <__srefill_r+0xae>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	81a3      	strh	r3, [r4, #12]
 800d6c6:	4b1e      	ldr	r3, [pc, #120]	; (800d740 <__srefill_r+0x10c>)
 800d6c8:	491e      	ldr	r1, [pc, #120]	; (800d744 <__srefill_r+0x110>)
 800d6ca:	6818      	ldr	r0, [r3, #0]
 800d6cc:	f006 0609 	and.w	r6, r6, #9
 800d6d0:	f7ff f980 	bl	800c9d4 <_fwalk>
 800d6d4:	2e09      	cmp	r6, #9
 800d6d6:	81a7      	strh	r7, [r4, #12]
 800d6d8:	d103      	bne.n	800d6e2 <__srefill_r+0xae>
 800d6da:	4621      	mov	r1, r4
 800d6dc:	4628      	mov	r0, r5
 800d6de:	f000 fad3 	bl	800dc88 <__sflush_r>
 800d6e2:	6922      	ldr	r2, [r4, #16]
 800d6e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6e6:	6963      	ldr	r3, [r4, #20]
 800d6e8:	6a21      	ldr	r1, [r4, #32]
 800d6ea:	6022      	str	r2, [r4, #0]
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	47b0      	blx	r6
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	6060      	str	r0, [r4, #4]
 800d6f4:	dc1c      	bgt.n	800d730 <__srefill_r+0xfc>
 800d6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6fa:	bf17      	itett	ne
 800d6fc:	2200      	movne	r2, #0
 800d6fe:	f043 0320 	orreq.w	r3, r3, #32
 800d702:	6062      	strne	r2, [r4, #4]
 800d704:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800d708:	e7bc      	b.n	800d684 <__srefill_r+0x50>
 800d70a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d70c:	2900      	cmp	r1, #0
 800d70e:	d0cd      	beq.n	800d6ac <__srefill_r+0x78>
 800d710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d714:	4299      	cmp	r1, r3
 800d716:	d002      	beq.n	800d71e <__srefill_r+0xea>
 800d718:	4628      	mov	r0, r5
 800d71a:	f7ff faa9 	bl	800cc70 <_free_r>
 800d71e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d720:	6063      	str	r3, [r4, #4]
 800d722:	2000      	movs	r0, #0
 800d724:	6360      	str	r0, [r4, #52]	; 0x34
 800d726:	2b00      	cmp	r3, #0
 800d728:	d0c0      	beq.n	800d6ac <__srefill_r+0x78>
 800d72a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d72c:	6023      	str	r3, [r4, #0]
 800d72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d730:	2000      	movs	r0, #0
 800d732:	e7fc      	b.n	800d72e <__srefill_r+0xfa>
 800d734:	0800f6c4 	.word	0x0800f6c4
 800d738:	0800f6e4 	.word	0x0800f6e4
 800d73c:	0800f6a4 	.word	0x0800f6a4
 800d740:	0800f704 	.word	0x0800f704
 800d744:	0800d621 	.word	0x0800d621

0800d748 <_sbrk_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4d06      	ldr	r5, [pc, #24]	; (800d764 <_sbrk_r+0x1c>)
 800d74c:	2300      	movs	r3, #0
 800d74e:	4604      	mov	r4, r0
 800d750:	4608      	mov	r0, r1
 800d752:	602b      	str	r3, [r5, #0]
 800d754:	f7f5 fad2 	bl	8002cfc <_sbrk>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d102      	bne.n	800d762 <_sbrk_r+0x1a>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	b103      	cbz	r3, 800d762 <_sbrk_r+0x1a>
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	20006774 	.word	0x20006774

0800d768 <setvbuf>:
 800d768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d76c:	461d      	mov	r5, r3
 800d76e:	4b5d      	ldr	r3, [pc, #372]	; (800d8e4 <setvbuf+0x17c>)
 800d770:	681f      	ldr	r7, [r3, #0]
 800d772:	4604      	mov	r4, r0
 800d774:	460e      	mov	r6, r1
 800d776:	4690      	mov	r8, r2
 800d778:	b127      	cbz	r7, 800d784 <setvbuf+0x1c>
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	b913      	cbnz	r3, 800d784 <setvbuf+0x1c>
 800d77e:	4638      	mov	r0, r7
 800d780:	f7fe ff86 	bl	800c690 <__sinit>
 800d784:	4b58      	ldr	r3, [pc, #352]	; (800d8e8 <setvbuf+0x180>)
 800d786:	429c      	cmp	r4, r3
 800d788:	d167      	bne.n	800d85a <setvbuf+0xf2>
 800d78a:	687c      	ldr	r4, [r7, #4]
 800d78c:	f1b8 0f02 	cmp.w	r8, #2
 800d790:	d006      	beq.n	800d7a0 <setvbuf+0x38>
 800d792:	f1b8 0f01 	cmp.w	r8, #1
 800d796:	f200 809f 	bhi.w	800d8d8 <setvbuf+0x170>
 800d79a:	2d00      	cmp	r5, #0
 800d79c:	f2c0 809c 	blt.w	800d8d8 <setvbuf+0x170>
 800d7a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7a2:	07db      	lsls	r3, r3, #31
 800d7a4:	d405      	bmi.n	800d7b2 <setvbuf+0x4a>
 800d7a6:	89a3      	ldrh	r3, [r4, #12]
 800d7a8:	0598      	lsls	r0, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <setvbuf+0x4a>
 800d7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ae:	f7ff f9e1 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800d7b2:	4621      	mov	r1, r4
 800d7b4:	4638      	mov	r0, r7
 800d7b6:	f000 faed 	bl	800dd94 <_fflush_r>
 800d7ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7bc:	b141      	cbz	r1, 800d7d0 <setvbuf+0x68>
 800d7be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7c2:	4299      	cmp	r1, r3
 800d7c4:	d002      	beq.n	800d7cc <setvbuf+0x64>
 800d7c6:	4638      	mov	r0, r7
 800d7c8:	f7ff fa52 	bl	800cc70 <_free_r>
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	6363      	str	r3, [r4, #52]	; 0x34
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	61a3      	str	r3, [r4, #24]
 800d7d4:	6063      	str	r3, [r4, #4]
 800d7d6:	89a3      	ldrh	r3, [r4, #12]
 800d7d8:	0619      	lsls	r1, r3, #24
 800d7da:	d503      	bpl.n	800d7e4 <setvbuf+0x7c>
 800d7dc:	6921      	ldr	r1, [r4, #16]
 800d7de:	4638      	mov	r0, r7
 800d7e0:	f7ff fa46 	bl	800cc70 <_free_r>
 800d7e4:	89a3      	ldrh	r3, [r4, #12]
 800d7e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d7ea:	f023 0303 	bic.w	r3, r3, #3
 800d7ee:	f1b8 0f02 	cmp.w	r8, #2
 800d7f2:	81a3      	strh	r3, [r4, #12]
 800d7f4:	d06c      	beq.n	800d8d0 <setvbuf+0x168>
 800d7f6:	ab01      	add	r3, sp, #4
 800d7f8:	466a      	mov	r2, sp
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	4638      	mov	r0, r7
 800d7fe:	f7ff f9bb 	bl	800cb78 <__swhatbuf_r>
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	4318      	orrs	r0, r3
 800d806:	81a0      	strh	r0, [r4, #12]
 800d808:	2d00      	cmp	r5, #0
 800d80a:	d130      	bne.n	800d86e <setvbuf+0x106>
 800d80c:	9d00      	ldr	r5, [sp, #0]
 800d80e:	4628      	mov	r0, r5
 800d810:	f000 fb78 	bl	800df04 <malloc>
 800d814:	4606      	mov	r6, r0
 800d816:	2800      	cmp	r0, #0
 800d818:	d155      	bne.n	800d8c6 <setvbuf+0x15e>
 800d81a:	f8dd 9000 	ldr.w	r9, [sp]
 800d81e:	45a9      	cmp	r9, r5
 800d820:	d14a      	bne.n	800d8b8 <setvbuf+0x150>
 800d822:	f04f 35ff 	mov.w	r5, #4294967295
 800d826:	2200      	movs	r2, #0
 800d828:	60a2      	str	r2, [r4, #8]
 800d82a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d82e:	6022      	str	r2, [r4, #0]
 800d830:	6122      	str	r2, [r4, #16]
 800d832:	2201      	movs	r2, #1
 800d834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d838:	6162      	str	r2, [r4, #20]
 800d83a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d83c:	f043 0302 	orr.w	r3, r3, #2
 800d840:	07d2      	lsls	r2, r2, #31
 800d842:	81a3      	strh	r3, [r4, #12]
 800d844:	d405      	bmi.n	800d852 <setvbuf+0xea>
 800d846:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d84a:	d102      	bne.n	800d852 <setvbuf+0xea>
 800d84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d84e:	f7ff f992 	bl	800cb76 <__retarget_lock_release_recursive>
 800d852:	4628      	mov	r0, r5
 800d854:	b003      	add	sp, #12
 800d856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d85a:	4b24      	ldr	r3, [pc, #144]	; (800d8ec <setvbuf+0x184>)
 800d85c:	429c      	cmp	r4, r3
 800d85e:	d101      	bne.n	800d864 <setvbuf+0xfc>
 800d860:	68bc      	ldr	r4, [r7, #8]
 800d862:	e793      	b.n	800d78c <setvbuf+0x24>
 800d864:	4b22      	ldr	r3, [pc, #136]	; (800d8f0 <setvbuf+0x188>)
 800d866:	429c      	cmp	r4, r3
 800d868:	bf08      	it	eq
 800d86a:	68fc      	ldreq	r4, [r7, #12]
 800d86c:	e78e      	b.n	800d78c <setvbuf+0x24>
 800d86e:	2e00      	cmp	r6, #0
 800d870:	d0cd      	beq.n	800d80e <setvbuf+0xa6>
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	b913      	cbnz	r3, 800d87c <setvbuf+0x114>
 800d876:	4638      	mov	r0, r7
 800d878:	f7fe ff0a 	bl	800c690 <__sinit>
 800d87c:	f1b8 0f01 	cmp.w	r8, #1
 800d880:	bf08      	it	eq
 800d882:	89a3      	ldrheq	r3, [r4, #12]
 800d884:	6026      	str	r6, [r4, #0]
 800d886:	bf04      	itt	eq
 800d888:	f043 0301 	orreq.w	r3, r3, #1
 800d88c:	81a3      	strheq	r3, [r4, #12]
 800d88e:	89a2      	ldrh	r2, [r4, #12]
 800d890:	f012 0308 	ands.w	r3, r2, #8
 800d894:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d898:	d01c      	beq.n	800d8d4 <setvbuf+0x16c>
 800d89a:	07d3      	lsls	r3, r2, #31
 800d89c:	bf41      	itttt	mi
 800d89e:	2300      	movmi	r3, #0
 800d8a0:	426d      	negmi	r5, r5
 800d8a2:	60a3      	strmi	r3, [r4, #8]
 800d8a4:	61a5      	strmi	r5, [r4, #24]
 800d8a6:	bf58      	it	pl
 800d8a8:	60a5      	strpl	r5, [r4, #8]
 800d8aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d8ac:	f015 0501 	ands.w	r5, r5, #1
 800d8b0:	d115      	bne.n	800d8de <setvbuf+0x176>
 800d8b2:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d8b6:	e7c8      	b.n	800d84a <setvbuf+0xe2>
 800d8b8:	4648      	mov	r0, r9
 800d8ba:	f000 fb23 	bl	800df04 <malloc>
 800d8be:	4606      	mov	r6, r0
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d0ae      	beq.n	800d822 <setvbuf+0xba>
 800d8c4:	464d      	mov	r5, r9
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8cc:	81a3      	strh	r3, [r4, #12]
 800d8ce:	e7d0      	b.n	800d872 <setvbuf+0x10a>
 800d8d0:	2500      	movs	r5, #0
 800d8d2:	e7a8      	b.n	800d826 <setvbuf+0xbe>
 800d8d4:	60a3      	str	r3, [r4, #8]
 800d8d6:	e7e8      	b.n	800d8aa <setvbuf+0x142>
 800d8d8:	f04f 35ff 	mov.w	r5, #4294967295
 800d8dc:	e7b9      	b.n	800d852 <setvbuf+0xea>
 800d8de:	2500      	movs	r5, #0
 800d8e0:	e7b7      	b.n	800d852 <setvbuf+0xea>
 800d8e2:	bf00      	nop
 800d8e4:	20000108 	.word	0x20000108
 800d8e8:	0800f6c4 	.word	0x0800f6c4
 800d8ec:	0800f6e4 	.word	0x0800f6e4
 800d8f0:	0800f6a4 	.word	0x0800f6a4

0800d8f4 <siprintf>:
 800d8f4:	b40e      	push	{r1, r2, r3}
 800d8f6:	b500      	push	{lr}
 800d8f8:	b09c      	sub	sp, #112	; 0x70
 800d8fa:	ab1d      	add	r3, sp, #116	; 0x74
 800d8fc:	9002      	str	r0, [sp, #8]
 800d8fe:	9006      	str	r0, [sp, #24]
 800d900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d904:	4809      	ldr	r0, [pc, #36]	; (800d92c <siprintf+0x38>)
 800d906:	9107      	str	r1, [sp, #28]
 800d908:	9104      	str	r1, [sp, #16]
 800d90a:	4909      	ldr	r1, [pc, #36]	; (800d930 <siprintf+0x3c>)
 800d90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d910:	9105      	str	r1, [sp, #20]
 800d912:	6800      	ldr	r0, [r0, #0]
 800d914:	9301      	str	r3, [sp, #4]
 800d916:	a902      	add	r1, sp, #8
 800d918:	f000 fbac 	bl	800e074 <_svfiprintf_r>
 800d91c:	9b02      	ldr	r3, [sp, #8]
 800d91e:	2200      	movs	r2, #0
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	b01c      	add	sp, #112	; 0x70
 800d924:	f85d eb04 	ldr.w	lr, [sp], #4
 800d928:	b003      	add	sp, #12
 800d92a:	4770      	bx	lr
 800d92c:	20000108 	.word	0x20000108
 800d930:	ffff0208 	.word	0xffff0208

0800d934 <siscanf>:
 800d934:	b40e      	push	{r1, r2, r3}
 800d936:	b510      	push	{r4, lr}
 800d938:	b09f      	sub	sp, #124	; 0x7c
 800d93a:	ac21      	add	r4, sp, #132	; 0x84
 800d93c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d940:	f854 2b04 	ldr.w	r2, [r4], #4
 800d944:	9201      	str	r2, [sp, #4]
 800d946:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d94a:	9004      	str	r0, [sp, #16]
 800d94c:	9008      	str	r0, [sp, #32]
 800d94e:	f7f2 fc97 	bl	8000280 <strlen>
 800d952:	4b0c      	ldr	r3, [pc, #48]	; (800d984 <siscanf+0x50>)
 800d954:	9005      	str	r0, [sp, #20]
 800d956:	9009      	str	r0, [sp, #36]	; 0x24
 800d958:	930d      	str	r3, [sp, #52]	; 0x34
 800d95a:	480b      	ldr	r0, [pc, #44]	; (800d988 <siscanf+0x54>)
 800d95c:	9a01      	ldr	r2, [sp, #4]
 800d95e:	6800      	ldr	r0, [r0, #0]
 800d960:	9403      	str	r4, [sp, #12]
 800d962:	2300      	movs	r3, #0
 800d964:	9311      	str	r3, [sp, #68]	; 0x44
 800d966:	9316      	str	r3, [sp, #88]	; 0x58
 800d968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d96c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d970:	a904      	add	r1, sp, #16
 800d972:	4623      	mov	r3, r4
 800d974:	f000 fcd8 	bl	800e328 <__ssvfiscanf_r>
 800d978:	b01f      	add	sp, #124	; 0x7c
 800d97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d97e:	b003      	add	sp, #12
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop
 800d984:	0800d9af 	.word	0x0800d9af
 800d988:	20000108 	.word	0x20000108

0800d98c <__sread>:
 800d98c:	b510      	push	{r4, lr}
 800d98e:	460c      	mov	r4, r1
 800d990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d994:	f000 ff92 	bl	800e8bc <_read_r>
 800d998:	2800      	cmp	r0, #0
 800d99a:	bfab      	itete	ge
 800d99c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d99e:	89a3      	ldrhlt	r3, [r4, #12]
 800d9a0:	181b      	addge	r3, r3, r0
 800d9a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9a6:	bfac      	ite	ge
 800d9a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9aa:	81a3      	strhlt	r3, [r4, #12]
 800d9ac:	bd10      	pop	{r4, pc}

0800d9ae <__seofread>:
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	4770      	bx	lr

0800d9b2 <__swrite>:
 800d9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b6:	461f      	mov	r7, r3
 800d9b8:	898b      	ldrh	r3, [r1, #12]
 800d9ba:	05db      	lsls	r3, r3, #23
 800d9bc:	4605      	mov	r5, r0
 800d9be:	460c      	mov	r4, r1
 800d9c0:	4616      	mov	r6, r2
 800d9c2:	d505      	bpl.n	800d9d0 <__swrite+0x1e>
 800d9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f000 fa88 	bl	800dee0 <_lseek_r>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	4632      	mov	r2, r6
 800d9de:	463b      	mov	r3, r7
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e6:	f000 b8bf 	b.w	800db68 <_write_r>

0800d9ea <__sseek>:
 800d9ea:	b510      	push	{r4, lr}
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f2:	f000 fa75 	bl	800dee0 <_lseek_r>
 800d9f6:	1c43      	adds	r3, r0, #1
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	bf15      	itete	ne
 800d9fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da06:	81a3      	strheq	r3, [r4, #12]
 800da08:	bf18      	it	ne
 800da0a:	81a3      	strhne	r3, [r4, #12]
 800da0c:	bd10      	pop	{r4, pc}

0800da0e <__sclose>:
 800da0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da12:	f000 b929 	b.w	800dc68 <_close_r>

0800da16 <strncmp>:
 800da16:	b510      	push	{r4, lr}
 800da18:	b17a      	cbz	r2, 800da3a <strncmp+0x24>
 800da1a:	4603      	mov	r3, r0
 800da1c:	3901      	subs	r1, #1
 800da1e:	1884      	adds	r4, r0, r2
 800da20:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da28:	4290      	cmp	r0, r2
 800da2a:	d101      	bne.n	800da30 <strncmp+0x1a>
 800da2c:	42a3      	cmp	r3, r4
 800da2e:	d101      	bne.n	800da34 <strncmp+0x1e>
 800da30:	1a80      	subs	r0, r0, r2
 800da32:	bd10      	pop	{r4, pc}
 800da34:	2800      	cmp	r0, #0
 800da36:	d1f3      	bne.n	800da20 <strncmp+0xa>
 800da38:	e7fa      	b.n	800da30 <strncmp+0x1a>
 800da3a:	4610      	mov	r0, r2
 800da3c:	e7f9      	b.n	800da32 <strncmp+0x1c>

0800da3e <strnlen>:
 800da3e:	b510      	push	{r4, lr}
 800da40:	4602      	mov	r2, r0
 800da42:	4401      	add	r1, r0
 800da44:	428a      	cmp	r2, r1
 800da46:	4613      	mov	r3, r2
 800da48:	d003      	beq.n	800da52 <strnlen+0x14>
 800da4a:	781c      	ldrb	r4, [r3, #0]
 800da4c:	3201      	adds	r2, #1
 800da4e:	2c00      	cmp	r4, #0
 800da50:	d1f8      	bne.n	800da44 <strnlen+0x6>
 800da52:	1a18      	subs	r0, r3, r0
 800da54:	bd10      	pop	{r4, pc}

0800da56 <strstr>:
 800da56:	780a      	ldrb	r2, [r1, #0]
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	b96a      	cbnz	r2, 800da78 <strstr+0x22>
 800da5c:	bd70      	pop	{r4, r5, r6, pc}
 800da5e:	429a      	cmp	r2, r3
 800da60:	d109      	bne.n	800da76 <strstr+0x20>
 800da62:	460c      	mov	r4, r1
 800da64:	4605      	mov	r5, r0
 800da66:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d0f6      	beq.n	800da5c <strstr+0x6>
 800da6e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800da72:	429e      	cmp	r6, r3
 800da74:	d0f7      	beq.n	800da66 <strstr+0x10>
 800da76:	3001      	adds	r0, #1
 800da78:	7803      	ldrb	r3, [r0, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1ef      	bne.n	800da5e <strstr+0x8>
 800da7e:	4618      	mov	r0, r3
 800da80:	e7ec      	b.n	800da5c <strstr+0x6>
	...

0800da84 <_vsiprintf_r>:
 800da84:	b500      	push	{lr}
 800da86:	b09b      	sub	sp, #108	; 0x6c
 800da88:	9100      	str	r1, [sp, #0]
 800da8a:	9104      	str	r1, [sp, #16]
 800da8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da90:	9105      	str	r1, [sp, #20]
 800da92:	9102      	str	r1, [sp, #8]
 800da94:	4905      	ldr	r1, [pc, #20]	; (800daac <_vsiprintf_r+0x28>)
 800da96:	9103      	str	r1, [sp, #12]
 800da98:	4669      	mov	r1, sp
 800da9a:	f000 faeb 	bl	800e074 <_svfiprintf_r>
 800da9e:	9b00      	ldr	r3, [sp, #0]
 800daa0:	2200      	movs	r2, #0
 800daa2:	701a      	strb	r2, [r3, #0]
 800daa4:	b01b      	add	sp, #108	; 0x6c
 800daa6:	f85d fb04 	ldr.w	pc, [sp], #4
 800daaa:	bf00      	nop
 800daac:	ffff0208 	.word	0xffff0208

0800dab0 <vsiprintf>:
 800dab0:	4613      	mov	r3, r2
 800dab2:	460a      	mov	r2, r1
 800dab4:	4601      	mov	r1, r0
 800dab6:	4802      	ldr	r0, [pc, #8]	; (800dac0 <vsiprintf+0x10>)
 800dab8:	6800      	ldr	r0, [r0, #0]
 800daba:	f7ff bfe3 	b.w	800da84 <_vsiprintf_r>
 800dabe:	bf00      	nop
 800dac0:	20000108 	.word	0x20000108

0800dac4 <__swbuf_r>:
 800dac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac6:	460e      	mov	r6, r1
 800dac8:	4614      	mov	r4, r2
 800daca:	4605      	mov	r5, r0
 800dacc:	b118      	cbz	r0, 800dad6 <__swbuf_r+0x12>
 800dace:	6983      	ldr	r3, [r0, #24]
 800dad0:	b90b      	cbnz	r3, 800dad6 <__swbuf_r+0x12>
 800dad2:	f7fe fddd 	bl	800c690 <__sinit>
 800dad6:	4b21      	ldr	r3, [pc, #132]	; (800db5c <__swbuf_r+0x98>)
 800dad8:	429c      	cmp	r4, r3
 800dada:	d12b      	bne.n	800db34 <__swbuf_r+0x70>
 800dadc:	686c      	ldr	r4, [r5, #4]
 800dade:	69a3      	ldr	r3, [r4, #24]
 800dae0:	60a3      	str	r3, [r4, #8]
 800dae2:	89a3      	ldrh	r3, [r4, #12]
 800dae4:	071a      	lsls	r2, r3, #28
 800dae6:	d52f      	bpl.n	800db48 <__swbuf_r+0x84>
 800dae8:	6923      	ldr	r3, [r4, #16]
 800daea:	b36b      	cbz	r3, 800db48 <__swbuf_r+0x84>
 800daec:	6923      	ldr	r3, [r4, #16]
 800daee:	6820      	ldr	r0, [r4, #0]
 800daf0:	1ac0      	subs	r0, r0, r3
 800daf2:	6963      	ldr	r3, [r4, #20]
 800daf4:	b2f6      	uxtb	r6, r6
 800daf6:	4283      	cmp	r3, r0
 800daf8:	4637      	mov	r7, r6
 800dafa:	dc04      	bgt.n	800db06 <__swbuf_r+0x42>
 800dafc:	4621      	mov	r1, r4
 800dafe:	4628      	mov	r0, r5
 800db00:	f000 f948 	bl	800dd94 <_fflush_r>
 800db04:	bb30      	cbnz	r0, 800db54 <__swbuf_r+0x90>
 800db06:	68a3      	ldr	r3, [r4, #8]
 800db08:	3b01      	subs	r3, #1
 800db0a:	60a3      	str	r3, [r4, #8]
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	1c5a      	adds	r2, r3, #1
 800db10:	6022      	str	r2, [r4, #0]
 800db12:	701e      	strb	r6, [r3, #0]
 800db14:	6963      	ldr	r3, [r4, #20]
 800db16:	3001      	adds	r0, #1
 800db18:	4283      	cmp	r3, r0
 800db1a:	d004      	beq.n	800db26 <__swbuf_r+0x62>
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	07db      	lsls	r3, r3, #31
 800db20:	d506      	bpl.n	800db30 <__swbuf_r+0x6c>
 800db22:	2e0a      	cmp	r6, #10
 800db24:	d104      	bne.n	800db30 <__swbuf_r+0x6c>
 800db26:	4621      	mov	r1, r4
 800db28:	4628      	mov	r0, r5
 800db2a:	f000 f933 	bl	800dd94 <_fflush_r>
 800db2e:	b988      	cbnz	r0, 800db54 <__swbuf_r+0x90>
 800db30:	4638      	mov	r0, r7
 800db32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db34:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <__swbuf_r+0x9c>)
 800db36:	429c      	cmp	r4, r3
 800db38:	d101      	bne.n	800db3e <__swbuf_r+0x7a>
 800db3a:	68ac      	ldr	r4, [r5, #8]
 800db3c:	e7cf      	b.n	800dade <__swbuf_r+0x1a>
 800db3e:	4b09      	ldr	r3, [pc, #36]	; (800db64 <__swbuf_r+0xa0>)
 800db40:	429c      	cmp	r4, r3
 800db42:	bf08      	it	eq
 800db44:	68ec      	ldreq	r4, [r5, #12]
 800db46:	e7ca      	b.n	800dade <__swbuf_r+0x1a>
 800db48:	4621      	mov	r1, r4
 800db4a:	4628      	mov	r0, r5
 800db4c:	f000 f81e 	bl	800db8c <__swsetup_r>
 800db50:	2800      	cmp	r0, #0
 800db52:	d0cb      	beq.n	800daec <__swbuf_r+0x28>
 800db54:	f04f 37ff 	mov.w	r7, #4294967295
 800db58:	e7ea      	b.n	800db30 <__swbuf_r+0x6c>
 800db5a:	bf00      	nop
 800db5c:	0800f6c4 	.word	0x0800f6c4
 800db60:	0800f6e4 	.word	0x0800f6e4
 800db64:	0800f6a4 	.word	0x0800f6a4

0800db68 <_write_r>:
 800db68:	b538      	push	{r3, r4, r5, lr}
 800db6a:	4d07      	ldr	r5, [pc, #28]	; (800db88 <_write_r+0x20>)
 800db6c:	4604      	mov	r4, r0
 800db6e:	4608      	mov	r0, r1
 800db70:	4611      	mov	r1, r2
 800db72:	2200      	movs	r2, #0
 800db74:	602a      	str	r2, [r5, #0]
 800db76:	461a      	mov	r2, r3
 800db78:	f7f5 f850 	bl	8002c1c <_write>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	d102      	bne.n	800db86 <_write_r+0x1e>
 800db80:	682b      	ldr	r3, [r5, #0]
 800db82:	b103      	cbz	r3, 800db86 <_write_r+0x1e>
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	20006774 	.word	0x20006774

0800db8c <__swsetup_r>:
 800db8c:	4b32      	ldr	r3, [pc, #200]	; (800dc58 <__swsetup_r+0xcc>)
 800db8e:	b570      	push	{r4, r5, r6, lr}
 800db90:	681d      	ldr	r5, [r3, #0]
 800db92:	4606      	mov	r6, r0
 800db94:	460c      	mov	r4, r1
 800db96:	b125      	cbz	r5, 800dba2 <__swsetup_r+0x16>
 800db98:	69ab      	ldr	r3, [r5, #24]
 800db9a:	b913      	cbnz	r3, 800dba2 <__swsetup_r+0x16>
 800db9c:	4628      	mov	r0, r5
 800db9e:	f7fe fd77 	bl	800c690 <__sinit>
 800dba2:	4b2e      	ldr	r3, [pc, #184]	; (800dc5c <__swsetup_r+0xd0>)
 800dba4:	429c      	cmp	r4, r3
 800dba6:	d10f      	bne.n	800dbc8 <__swsetup_r+0x3c>
 800dba8:	686c      	ldr	r4, [r5, #4]
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbb0:	0719      	lsls	r1, r3, #28
 800dbb2:	d42c      	bmi.n	800dc0e <__swsetup_r+0x82>
 800dbb4:	06dd      	lsls	r5, r3, #27
 800dbb6:	d411      	bmi.n	800dbdc <__swsetup_r+0x50>
 800dbb8:	2309      	movs	r3, #9
 800dbba:	6033      	str	r3, [r6, #0]
 800dbbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbc0:	81a3      	strh	r3, [r4, #12]
 800dbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc6:	e03e      	b.n	800dc46 <__swsetup_r+0xba>
 800dbc8:	4b25      	ldr	r3, [pc, #148]	; (800dc60 <__swsetup_r+0xd4>)
 800dbca:	429c      	cmp	r4, r3
 800dbcc:	d101      	bne.n	800dbd2 <__swsetup_r+0x46>
 800dbce:	68ac      	ldr	r4, [r5, #8]
 800dbd0:	e7eb      	b.n	800dbaa <__swsetup_r+0x1e>
 800dbd2:	4b24      	ldr	r3, [pc, #144]	; (800dc64 <__swsetup_r+0xd8>)
 800dbd4:	429c      	cmp	r4, r3
 800dbd6:	bf08      	it	eq
 800dbd8:	68ec      	ldreq	r4, [r5, #12]
 800dbda:	e7e6      	b.n	800dbaa <__swsetup_r+0x1e>
 800dbdc:	0758      	lsls	r0, r3, #29
 800dbde:	d512      	bpl.n	800dc06 <__swsetup_r+0x7a>
 800dbe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbe2:	b141      	cbz	r1, 800dbf6 <__swsetup_r+0x6a>
 800dbe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbe8:	4299      	cmp	r1, r3
 800dbea:	d002      	beq.n	800dbf2 <__swsetup_r+0x66>
 800dbec:	4630      	mov	r0, r6
 800dbee:	f7ff f83f 	bl	800cc70 <_free_r>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	6363      	str	r3, [r4, #52]	; 0x34
 800dbf6:	89a3      	ldrh	r3, [r4, #12]
 800dbf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbfc:	81a3      	strh	r3, [r4, #12]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6063      	str	r3, [r4, #4]
 800dc02:	6923      	ldr	r3, [r4, #16]
 800dc04:	6023      	str	r3, [r4, #0]
 800dc06:	89a3      	ldrh	r3, [r4, #12]
 800dc08:	f043 0308 	orr.w	r3, r3, #8
 800dc0c:	81a3      	strh	r3, [r4, #12]
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	b94b      	cbnz	r3, 800dc26 <__swsetup_r+0x9a>
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc1c:	d003      	beq.n	800dc26 <__swsetup_r+0x9a>
 800dc1e:	4621      	mov	r1, r4
 800dc20:	4630      	mov	r0, r6
 800dc22:	f7fe ffcf 	bl	800cbc4 <__smakebuf_r>
 800dc26:	89a0      	ldrh	r0, [r4, #12]
 800dc28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc2c:	f010 0301 	ands.w	r3, r0, #1
 800dc30:	d00a      	beq.n	800dc48 <__swsetup_r+0xbc>
 800dc32:	2300      	movs	r3, #0
 800dc34:	60a3      	str	r3, [r4, #8]
 800dc36:	6963      	ldr	r3, [r4, #20]
 800dc38:	425b      	negs	r3, r3
 800dc3a:	61a3      	str	r3, [r4, #24]
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	b943      	cbnz	r3, 800dc52 <__swsetup_r+0xc6>
 800dc40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc44:	d1ba      	bne.n	800dbbc <__swsetup_r+0x30>
 800dc46:	bd70      	pop	{r4, r5, r6, pc}
 800dc48:	0781      	lsls	r1, r0, #30
 800dc4a:	bf58      	it	pl
 800dc4c:	6963      	ldrpl	r3, [r4, #20]
 800dc4e:	60a3      	str	r3, [r4, #8]
 800dc50:	e7f4      	b.n	800dc3c <__swsetup_r+0xb0>
 800dc52:	2000      	movs	r0, #0
 800dc54:	e7f7      	b.n	800dc46 <__swsetup_r+0xba>
 800dc56:	bf00      	nop
 800dc58:	20000108 	.word	0x20000108
 800dc5c:	0800f6c4 	.word	0x0800f6c4
 800dc60:	0800f6e4 	.word	0x0800f6e4
 800dc64:	0800f6a4 	.word	0x0800f6a4

0800dc68 <_close_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	4d06      	ldr	r5, [pc, #24]	; (800dc84 <_close_r+0x1c>)
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	4604      	mov	r4, r0
 800dc70:	4608      	mov	r0, r1
 800dc72:	602b      	str	r3, [r5, #0]
 800dc74:	f7f4 ffef 	bl	8002c56 <_close>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d102      	bne.n	800dc82 <_close_r+0x1a>
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	b103      	cbz	r3, 800dc82 <_close_r+0x1a>
 800dc80:	6023      	str	r3, [r4, #0]
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	20006774 	.word	0x20006774

0800dc88 <__sflush_r>:
 800dc88:	898a      	ldrh	r2, [r1, #12]
 800dc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8e:	4605      	mov	r5, r0
 800dc90:	0710      	lsls	r0, r2, #28
 800dc92:	460c      	mov	r4, r1
 800dc94:	d458      	bmi.n	800dd48 <__sflush_r+0xc0>
 800dc96:	684b      	ldr	r3, [r1, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dc05      	bgt.n	800dca8 <__sflush_r+0x20>
 800dc9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	dc02      	bgt.n	800dca8 <__sflush_r+0x20>
 800dca2:	2000      	movs	r0, #0
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcaa:	2e00      	cmp	r6, #0
 800dcac:	d0f9      	beq.n	800dca2 <__sflush_r+0x1a>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcb4:	682f      	ldr	r7, [r5, #0]
 800dcb6:	602b      	str	r3, [r5, #0]
 800dcb8:	d032      	beq.n	800dd20 <__sflush_r+0x98>
 800dcba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	075a      	lsls	r2, r3, #29
 800dcc0:	d505      	bpl.n	800dcce <__sflush_r+0x46>
 800dcc2:	6863      	ldr	r3, [r4, #4]
 800dcc4:	1ac0      	subs	r0, r0, r3
 800dcc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcc8:	b10b      	cbz	r3, 800dcce <__sflush_r+0x46>
 800dcca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dccc:	1ac0      	subs	r0, r0, r3
 800dcce:	2300      	movs	r3, #0
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcd4:	6a21      	ldr	r1, [r4, #32]
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	47b0      	blx	r6
 800dcda:	1c43      	adds	r3, r0, #1
 800dcdc:	89a3      	ldrh	r3, [r4, #12]
 800dcde:	d106      	bne.n	800dcee <__sflush_r+0x66>
 800dce0:	6829      	ldr	r1, [r5, #0]
 800dce2:	291d      	cmp	r1, #29
 800dce4:	d82c      	bhi.n	800dd40 <__sflush_r+0xb8>
 800dce6:	4a2a      	ldr	r2, [pc, #168]	; (800dd90 <__sflush_r+0x108>)
 800dce8:	40ca      	lsrs	r2, r1
 800dcea:	07d6      	lsls	r6, r2, #31
 800dcec:	d528      	bpl.n	800dd40 <__sflush_r+0xb8>
 800dcee:	2200      	movs	r2, #0
 800dcf0:	6062      	str	r2, [r4, #4]
 800dcf2:	04d9      	lsls	r1, r3, #19
 800dcf4:	6922      	ldr	r2, [r4, #16]
 800dcf6:	6022      	str	r2, [r4, #0]
 800dcf8:	d504      	bpl.n	800dd04 <__sflush_r+0x7c>
 800dcfa:	1c42      	adds	r2, r0, #1
 800dcfc:	d101      	bne.n	800dd02 <__sflush_r+0x7a>
 800dcfe:	682b      	ldr	r3, [r5, #0]
 800dd00:	b903      	cbnz	r3, 800dd04 <__sflush_r+0x7c>
 800dd02:	6560      	str	r0, [r4, #84]	; 0x54
 800dd04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd06:	602f      	str	r7, [r5, #0]
 800dd08:	2900      	cmp	r1, #0
 800dd0a:	d0ca      	beq.n	800dca2 <__sflush_r+0x1a>
 800dd0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd10:	4299      	cmp	r1, r3
 800dd12:	d002      	beq.n	800dd1a <__sflush_r+0x92>
 800dd14:	4628      	mov	r0, r5
 800dd16:	f7fe ffab 	bl	800cc70 <_free_r>
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	6360      	str	r0, [r4, #52]	; 0x34
 800dd1e:	e7c1      	b.n	800dca4 <__sflush_r+0x1c>
 800dd20:	6a21      	ldr	r1, [r4, #32]
 800dd22:	2301      	movs	r3, #1
 800dd24:	4628      	mov	r0, r5
 800dd26:	47b0      	blx	r6
 800dd28:	1c41      	adds	r1, r0, #1
 800dd2a:	d1c7      	bne.n	800dcbc <__sflush_r+0x34>
 800dd2c:	682b      	ldr	r3, [r5, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0c4      	beq.n	800dcbc <__sflush_r+0x34>
 800dd32:	2b1d      	cmp	r3, #29
 800dd34:	d001      	beq.n	800dd3a <__sflush_r+0xb2>
 800dd36:	2b16      	cmp	r3, #22
 800dd38:	d101      	bne.n	800dd3e <__sflush_r+0xb6>
 800dd3a:	602f      	str	r7, [r5, #0]
 800dd3c:	e7b1      	b.n	800dca2 <__sflush_r+0x1a>
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd44:	81a3      	strh	r3, [r4, #12]
 800dd46:	e7ad      	b.n	800dca4 <__sflush_r+0x1c>
 800dd48:	690f      	ldr	r7, [r1, #16]
 800dd4a:	2f00      	cmp	r7, #0
 800dd4c:	d0a9      	beq.n	800dca2 <__sflush_r+0x1a>
 800dd4e:	0793      	lsls	r3, r2, #30
 800dd50:	680e      	ldr	r6, [r1, #0]
 800dd52:	bf08      	it	eq
 800dd54:	694b      	ldreq	r3, [r1, #20]
 800dd56:	600f      	str	r7, [r1, #0]
 800dd58:	bf18      	it	ne
 800dd5a:	2300      	movne	r3, #0
 800dd5c:	eba6 0807 	sub.w	r8, r6, r7
 800dd60:	608b      	str	r3, [r1, #8]
 800dd62:	f1b8 0f00 	cmp.w	r8, #0
 800dd66:	dd9c      	ble.n	800dca2 <__sflush_r+0x1a>
 800dd68:	6a21      	ldr	r1, [r4, #32]
 800dd6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd6c:	4643      	mov	r3, r8
 800dd6e:	463a      	mov	r2, r7
 800dd70:	4628      	mov	r0, r5
 800dd72:	47b0      	blx	r6
 800dd74:	2800      	cmp	r0, #0
 800dd76:	dc06      	bgt.n	800dd86 <__sflush_r+0xfe>
 800dd78:	89a3      	ldrh	r3, [r4, #12]
 800dd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd7e:	81a3      	strh	r3, [r4, #12]
 800dd80:	f04f 30ff 	mov.w	r0, #4294967295
 800dd84:	e78e      	b.n	800dca4 <__sflush_r+0x1c>
 800dd86:	4407      	add	r7, r0
 800dd88:	eba8 0800 	sub.w	r8, r8, r0
 800dd8c:	e7e9      	b.n	800dd62 <__sflush_r+0xda>
 800dd8e:	bf00      	nop
 800dd90:	20400001 	.word	0x20400001

0800dd94 <_fflush_r>:
 800dd94:	b538      	push	{r3, r4, r5, lr}
 800dd96:	690b      	ldr	r3, [r1, #16]
 800dd98:	4605      	mov	r5, r0
 800dd9a:	460c      	mov	r4, r1
 800dd9c:	b913      	cbnz	r3, 800dda4 <_fflush_r+0x10>
 800dd9e:	2500      	movs	r5, #0
 800dda0:	4628      	mov	r0, r5
 800dda2:	bd38      	pop	{r3, r4, r5, pc}
 800dda4:	b118      	cbz	r0, 800ddae <_fflush_r+0x1a>
 800dda6:	6983      	ldr	r3, [r0, #24]
 800dda8:	b90b      	cbnz	r3, 800ddae <_fflush_r+0x1a>
 800ddaa:	f7fe fc71 	bl	800c690 <__sinit>
 800ddae:	4b14      	ldr	r3, [pc, #80]	; (800de00 <_fflush_r+0x6c>)
 800ddb0:	429c      	cmp	r4, r3
 800ddb2:	d11b      	bne.n	800ddec <_fflush_r+0x58>
 800ddb4:	686c      	ldr	r4, [r5, #4]
 800ddb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d0ef      	beq.n	800dd9e <_fflush_r+0xa>
 800ddbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ddc0:	07d0      	lsls	r0, r2, #31
 800ddc2:	d404      	bmi.n	800ddce <_fflush_r+0x3a>
 800ddc4:	0599      	lsls	r1, r3, #22
 800ddc6:	d402      	bmi.n	800ddce <_fflush_r+0x3a>
 800ddc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddca:	f7fe fed3 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800ddce:	4628      	mov	r0, r5
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	f7ff ff59 	bl	800dc88 <__sflush_r>
 800ddd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddd8:	07da      	lsls	r2, r3, #31
 800ddda:	4605      	mov	r5, r0
 800dddc:	d4e0      	bmi.n	800dda0 <_fflush_r+0xc>
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	059b      	lsls	r3, r3, #22
 800dde2:	d4dd      	bmi.n	800dda0 <_fflush_r+0xc>
 800dde4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dde6:	f7fe fec6 	bl	800cb76 <__retarget_lock_release_recursive>
 800ddea:	e7d9      	b.n	800dda0 <_fflush_r+0xc>
 800ddec:	4b05      	ldr	r3, [pc, #20]	; (800de04 <_fflush_r+0x70>)
 800ddee:	429c      	cmp	r4, r3
 800ddf0:	d101      	bne.n	800ddf6 <_fflush_r+0x62>
 800ddf2:	68ac      	ldr	r4, [r5, #8]
 800ddf4:	e7df      	b.n	800ddb6 <_fflush_r+0x22>
 800ddf6:	4b04      	ldr	r3, [pc, #16]	; (800de08 <_fflush_r+0x74>)
 800ddf8:	429c      	cmp	r4, r3
 800ddfa:	bf08      	it	eq
 800ddfc:	68ec      	ldreq	r4, [r5, #12]
 800ddfe:	e7da      	b.n	800ddb6 <_fflush_r+0x22>
 800de00:	0800f6c4 	.word	0x0800f6c4
 800de04:	0800f6e4 	.word	0x0800f6e4
 800de08:	0800f6a4 	.word	0x0800f6a4

0800de0c <fflush>:
 800de0c:	4601      	mov	r1, r0
 800de0e:	b920      	cbnz	r0, 800de1a <fflush+0xe>
 800de10:	4b04      	ldr	r3, [pc, #16]	; (800de24 <fflush+0x18>)
 800de12:	4905      	ldr	r1, [pc, #20]	; (800de28 <fflush+0x1c>)
 800de14:	6818      	ldr	r0, [r3, #0]
 800de16:	f7fe bdfa 	b.w	800ca0e <_fwalk_reent>
 800de1a:	4b04      	ldr	r3, [pc, #16]	; (800de2c <fflush+0x20>)
 800de1c:	6818      	ldr	r0, [r3, #0]
 800de1e:	f7ff bfb9 	b.w	800dd94 <_fflush_r>
 800de22:	bf00      	nop
 800de24:	0800f704 	.word	0x0800f704
 800de28:	0800dd95 	.word	0x0800dd95
 800de2c:	20000108 	.word	0x20000108

0800de30 <__sflags>:
 800de30:	780b      	ldrb	r3, [r1, #0]
 800de32:	2b72      	cmp	r3, #114	; 0x72
 800de34:	b530      	push	{r4, r5, lr}
 800de36:	d022      	beq.n	800de7e <__sflags+0x4e>
 800de38:	2b77      	cmp	r3, #119	; 0x77
 800de3a:	d024      	beq.n	800de86 <__sflags+0x56>
 800de3c:	2b61      	cmp	r3, #97	; 0x61
 800de3e:	d027      	beq.n	800de90 <__sflags+0x60>
 800de40:	2316      	movs	r3, #22
 800de42:	6003      	str	r3, [r0, #0]
 800de44:	2000      	movs	r0, #0
 800de46:	bd30      	pop	{r4, r5, pc}
 800de48:	2d62      	cmp	r5, #98	; 0x62
 800de4a:	d012      	beq.n	800de72 <__sflags+0x42>
 800de4c:	2d78      	cmp	r5, #120	; 0x78
 800de4e:	d013      	beq.n	800de78 <__sflags+0x48>
 800de50:	2d2b      	cmp	r5, #43	; 0x2b
 800de52:	d107      	bne.n	800de64 <__sflags+0x34>
 800de54:	f020 001c 	bic.w	r0, r0, #28
 800de58:	f023 0303 	bic.w	r3, r3, #3
 800de5c:	f040 0010 	orr.w	r0, r0, #16
 800de60:	f043 0302 	orr.w	r3, r3, #2
 800de64:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800de68:	2d00      	cmp	r5, #0
 800de6a:	d1ed      	bne.n	800de48 <__sflags+0x18>
 800de6c:	4323      	orrs	r3, r4
 800de6e:	6013      	str	r3, [r2, #0]
 800de70:	e7e9      	b.n	800de46 <__sflags+0x16>
 800de72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de76:	e7f5      	b.n	800de64 <__sflags+0x34>
 800de78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de7c:	e7f2      	b.n	800de64 <__sflags+0x34>
 800de7e:	2400      	movs	r4, #0
 800de80:	4623      	mov	r3, r4
 800de82:	2004      	movs	r0, #4
 800de84:	e7ee      	b.n	800de64 <__sflags+0x34>
 800de86:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800de8a:	2301      	movs	r3, #1
 800de8c:	2008      	movs	r0, #8
 800de8e:	e7e9      	b.n	800de64 <__sflags+0x34>
 800de90:	f44f 7402 	mov.w	r4, #520	; 0x208
 800de94:	2301      	movs	r3, #1
 800de96:	f44f 7084 	mov.w	r0, #264	; 0x108
 800de9a:	e7e3      	b.n	800de64 <__sflags+0x34>

0800de9c <_fstat_r>:
 800de9c:	b538      	push	{r3, r4, r5, lr}
 800de9e:	4d07      	ldr	r5, [pc, #28]	; (800debc <_fstat_r+0x20>)
 800dea0:	2300      	movs	r3, #0
 800dea2:	4604      	mov	r4, r0
 800dea4:	4608      	mov	r0, r1
 800dea6:	4611      	mov	r1, r2
 800dea8:	602b      	str	r3, [r5, #0]
 800deaa:	f7f4 fee5 	bl	8002c78 <_fstat>
 800deae:	1c43      	adds	r3, r0, #1
 800deb0:	d102      	bne.n	800deb8 <_fstat_r+0x1c>
 800deb2:	682b      	ldr	r3, [r5, #0]
 800deb4:	b103      	cbz	r3, 800deb8 <_fstat_r+0x1c>
 800deb6:	6023      	str	r3, [r4, #0]
 800deb8:	bd38      	pop	{r3, r4, r5, pc}
 800deba:	bf00      	nop
 800debc:	20006774 	.word	0x20006774

0800dec0 <_isatty_r>:
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4d06      	ldr	r5, [pc, #24]	; (800dedc <_isatty_r+0x1c>)
 800dec4:	2300      	movs	r3, #0
 800dec6:	4604      	mov	r4, r0
 800dec8:	4608      	mov	r0, r1
 800deca:	602b      	str	r3, [r5, #0]
 800decc:	f7f4 fee4 	bl	8002c98 <_isatty>
 800ded0:	1c43      	adds	r3, r0, #1
 800ded2:	d102      	bne.n	800deda <_isatty_r+0x1a>
 800ded4:	682b      	ldr	r3, [r5, #0]
 800ded6:	b103      	cbz	r3, 800deda <_isatty_r+0x1a>
 800ded8:	6023      	str	r3, [r4, #0]
 800deda:	bd38      	pop	{r3, r4, r5, pc}
 800dedc:	20006774 	.word	0x20006774

0800dee0 <_lseek_r>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4d07      	ldr	r5, [pc, #28]	; (800df00 <_lseek_r+0x20>)
 800dee4:	4604      	mov	r4, r0
 800dee6:	4608      	mov	r0, r1
 800dee8:	4611      	mov	r1, r2
 800deea:	2200      	movs	r2, #0
 800deec:	602a      	str	r2, [r5, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	f7f4 fedd 	bl	8002cae <_lseek>
 800def4:	1c43      	adds	r3, r0, #1
 800def6:	d102      	bne.n	800defe <_lseek_r+0x1e>
 800def8:	682b      	ldr	r3, [r5, #0]
 800defa:	b103      	cbz	r3, 800defe <_lseek_r+0x1e>
 800defc:	6023      	str	r3, [r4, #0]
 800defe:	bd38      	pop	{r3, r4, r5, pc}
 800df00:	20006774 	.word	0x20006774

0800df04 <malloc>:
 800df04:	4b02      	ldr	r3, [pc, #8]	; (800df10 <malloc+0xc>)
 800df06:	4601      	mov	r1, r0
 800df08:	6818      	ldr	r0, [r3, #0]
 800df0a:	f7fe bf1d 	b.w	800cd48 <_malloc_r>
 800df0e:	bf00      	nop
 800df10:	20000108 	.word	0x20000108

0800df14 <memmove>:
 800df14:	4288      	cmp	r0, r1
 800df16:	b510      	push	{r4, lr}
 800df18:	eb01 0402 	add.w	r4, r1, r2
 800df1c:	d902      	bls.n	800df24 <memmove+0x10>
 800df1e:	4284      	cmp	r4, r0
 800df20:	4623      	mov	r3, r4
 800df22:	d807      	bhi.n	800df34 <memmove+0x20>
 800df24:	1e43      	subs	r3, r0, #1
 800df26:	42a1      	cmp	r1, r4
 800df28:	d008      	beq.n	800df3c <memmove+0x28>
 800df2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df32:	e7f8      	b.n	800df26 <memmove+0x12>
 800df34:	4402      	add	r2, r0
 800df36:	4601      	mov	r1, r0
 800df38:	428a      	cmp	r2, r1
 800df3a:	d100      	bne.n	800df3e <memmove+0x2a>
 800df3c:	bd10      	pop	{r4, pc}
 800df3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df46:	e7f7      	b.n	800df38 <memmove+0x24>

0800df48 <__malloc_lock>:
 800df48:	4801      	ldr	r0, [pc, #4]	; (800df50 <__malloc_lock+0x8>)
 800df4a:	f7fe be13 	b.w	800cb74 <__retarget_lock_acquire_recursive>
 800df4e:	bf00      	nop
 800df50:	20006768 	.word	0x20006768

0800df54 <__malloc_unlock>:
 800df54:	4801      	ldr	r0, [pc, #4]	; (800df5c <__malloc_unlock+0x8>)
 800df56:	f7fe be0e 	b.w	800cb76 <__retarget_lock_release_recursive>
 800df5a:	bf00      	nop
 800df5c:	20006768 	.word	0x20006768

0800df60 <_realloc_r>:
 800df60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df64:	4680      	mov	r8, r0
 800df66:	4614      	mov	r4, r2
 800df68:	460e      	mov	r6, r1
 800df6a:	b921      	cbnz	r1, 800df76 <_realloc_r+0x16>
 800df6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df70:	4611      	mov	r1, r2
 800df72:	f7fe bee9 	b.w	800cd48 <_malloc_r>
 800df76:	b92a      	cbnz	r2, 800df84 <_realloc_r+0x24>
 800df78:	f7fe fe7a 	bl	800cc70 <_free_r>
 800df7c:	4625      	mov	r5, r4
 800df7e:	4628      	mov	r0, r5
 800df80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df84:	f000 fe16 	bl	800ebb4 <_malloc_usable_size_r>
 800df88:	4284      	cmp	r4, r0
 800df8a:	4607      	mov	r7, r0
 800df8c:	d802      	bhi.n	800df94 <_realloc_r+0x34>
 800df8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df92:	d812      	bhi.n	800dfba <_realloc_r+0x5a>
 800df94:	4621      	mov	r1, r4
 800df96:	4640      	mov	r0, r8
 800df98:	f7fe fed6 	bl	800cd48 <_malloc_r>
 800df9c:	4605      	mov	r5, r0
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d0ed      	beq.n	800df7e <_realloc_r+0x1e>
 800dfa2:	42bc      	cmp	r4, r7
 800dfa4:	4622      	mov	r2, r4
 800dfa6:	4631      	mov	r1, r6
 800dfa8:	bf28      	it	cs
 800dfaa:	463a      	movcs	r2, r7
 800dfac:	f7fe fe4a 	bl	800cc44 <memcpy>
 800dfb0:	4631      	mov	r1, r6
 800dfb2:	4640      	mov	r0, r8
 800dfb4:	f7fe fe5c 	bl	800cc70 <_free_r>
 800dfb8:	e7e1      	b.n	800df7e <_realloc_r+0x1e>
 800dfba:	4635      	mov	r5, r6
 800dfbc:	e7df      	b.n	800df7e <_realloc_r+0x1e>

0800dfbe <__ssputs_r>:
 800dfbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc2:	688e      	ldr	r6, [r1, #8]
 800dfc4:	429e      	cmp	r6, r3
 800dfc6:	4682      	mov	sl, r0
 800dfc8:	460c      	mov	r4, r1
 800dfca:	4690      	mov	r8, r2
 800dfcc:	461f      	mov	r7, r3
 800dfce:	d838      	bhi.n	800e042 <__ssputs_r+0x84>
 800dfd0:	898a      	ldrh	r2, [r1, #12]
 800dfd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfd6:	d032      	beq.n	800e03e <__ssputs_r+0x80>
 800dfd8:	6825      	ldr	r5, [r4, #0]
 800dfda:	6909      	ldr	r1, [r1, #16]
 800dfdc:	eba5 0901 	sub.w	r9, r5, r1
 800dfe0:	6965      	ldr	r5, [r4, #20]
 800dfe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfea:	3301      	adds	r3, #1
 800dfec:	444b      	add	r3, r9
 800dfee:	106d      	asrs	r5, r5, #1
 800dff0:	429d      	cmp	r5, r3
 800dff2:	bf38      	it	cc
 800dff4:	461d      	movcc	r5, r3
 800dff6:	0553      	lsls	r3, r2, #21
 800dff8:	d531      	bpl.n	800e05e <__ssputs_r+0xa0>
 800dffa:	4629      	mov	r1, r5
 800dffc:	f7fe fea4 	bl	800cd48 <_malloc_r>
 800e000:	4606      	mov	r6, r0
 800e002:	b950      	cbnz	r0, 800e01a <__ssputs_r+0x5c>
 800e004:	230c      	movs	r3, #12
 800e006:	f8ca 3000 	str.w	r3, [sl]
 800e00a:	89a3      	ldrh	r3, [r4, #12]
 800e00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e010:	81a3      	strh	r3, [r4, #12]
 800e012:	f04f 30ff 	mov.w	r0, #4294967295
 800e016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e01a:	6921      	ldr	r1, [r4, #16]
 800e01c:	464a      	mov	r2, r9
 800e01e:	f7fe fe11 	bl	800cc44 <memcpy>
 800e022:	89a3      	ldrh	r3, [r4, #12]
 800e024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e02c:	81a3      	strh	r3, [r4, #12]
 800e02e:	6126      	str	r6, [r4, #16]
 800e030:	6165      	str	r5, [r4, #20]
 800e032:	444e      	add	r6, r9
 800e034:	eba5 0509 	sub.w	r5, r5, r9
 800e038:	6026      	str	r6, [r4, #0]
 800e03a:	60a5      	str	r5, [r4, #8]
 800e03c:	463e      	mov	r6, r7
 800e03e:	42be      	cmp	r6, r7
 800e040:	d900      	bls.n	800e044 <__ssputs_r+0x86>
 800e042:	463e      	mov	r6, r7
 800e044:	6820      	ldr	r0, [r4, #0]
 800e046:	4632      	mov	r2, r6
 800e048:	4641      	mov	r1, r8
 800e04a:	f7ff ff63 	bl	800df14 <memmove>
 800e04e:	68a3      	ldr	r3, [r4, #8]
 800e050:	1b9b      	subs	r3, r3, r6
 800e052:	60a3      	str	r3, [r4, #8]
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	4433      	add	r3, r6
 800e058:	6023      	str	r3, [r4, #0]
 800e05a:	2000      	movs	r0, #0
 800e05c:	e7db      	b.n	800e016 <__ssputs_r+0x58>
 800e05e:	462a      	mov	r2, r5
 800e060:	f7ff ff7e 	bl	800df60 <_realloc_r>
 800e064:	4606      	mov	r6, r0
 800e066:	2800      	cmp	r0, #0
 800e068:	d1e1      	bne.n	800e02e <__ssputs_r+0x70>
 800e06a:	6921      	ldr	r1, [r4, #16]
 800e06c:	4650      	mov	r0, sl
 800e06e:	f7fe fdff 	bl	800cc70 <_free_r>
 800e072:	e7c7      	b.n	800e004 <__ssputs_r+0x46>

0800e074 <_svfiprintf_r>:
 800e074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e078:	4698      	mov	r8, r3
 800e07a:	898b      	ldrh	r3, [r1, #12]
 800e07c:	061b      	lsls	r3, r3, #24
 800e07e:	b09d      	sub	sp, #116	; 0x74
 800e080:	4607      	mov	r7, r0
 800e082:	460d      	mov	r5, r1
 800e084:	4614      	mov	r4, r2
 800e086:	d50e      	bpl.n	800e0a6 <_svfiprintf_r+0x32>
 800e088:	690b      	ldr	r3, [r1, #16]
 800e08a:	b963      	cbnz	r3, 800e0a6 <_svfiprintf_r+0x32>
 800e08c:	2140      	movs	r1, #64	; 0x40
 800e08e:	f7fe fe5b 	bl	800cd48 <_malloc_r>
 800e092:	6028      	str	r0, [r5, #0]
 800e094:	6128      	str	r0, [r5, #16]
 800e096:	b920      	cbnz	r0, 800e0a2 <_svfiprintf_r+0x2e>
 800e098:	230c      	movs	r3, #12
 800e09a:	603b      	str	r3, [r7, #0]
 800e09c:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a0:	e0d1      	b.n	800e246 <_svfiprintf_r+0x1d2>
 800e0a2:	2340      	movs	r3, #64	; 0x40
 800e0a4:	616b      	str	r3, [r5, #20]
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e0aa:	2320      	movs	r3, #32
 800e0ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0b4:	2330      	movs	r3, #48	; 0x30
 800e0b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e260 <_svfiprintf_r+0x1ec>
 800e0ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0be:	f04f 0901 	mov.w	r9, #1
 800e0c2:	4623      	mov	r3, r4
 800e0c4:	469a      	mov	sl, r3
 800e0c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0ca:	b10a      	cbz	r2, 800e0d0 <_svfiprintf_r+0x5c>
 800e0cc:	2a25      	cmp	r2, #37	; 0x25
 800e0ce:	d1f9      	bne.n	800e0c4 <_svfiprintf_r+0x50>
 800e0d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e0d4:	d00b      	beq.n	800e0ee <_svfiprintf_r+0x7a>
 800e0d6:	465b      	mov	r3, fp
 800e0d8:	4622      	mov	r2, r4
 800e0da:	4629      	mov	r1, r5
 800e0dc:	4638      	mov	r0, r7
 800e0de:	f7ff ff6e 	bl	800dfbe <__ssputs_r>
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	f000 80aa 	beq.w	800e23c <_svfiprintf_r+0x1c8>
 800e0e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0ea:	445a      	add	r2, fp
 800e0ec:	9209      	str	r2, [sp, #36]	; 0x24
 800e0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f000 80a2 	beq.w	800e23c <_svfiprintf_r+0x1c8>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e102:	f10a 0a01 	add.w	sl, sl, #1
 800e106:	9304      	str	r3, [sp, #16]
 800e108:	9307      	str	r3, [sp, #28]
 800e10a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e10e:	931a      	str	r3, [sp, #104]	; 0x68
 800e110:	4654      	mov	r4, sl
 800e112:	2205      	movs	r2, #5
 800e114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e118:	4851      	ldr	r0, [pc, #324]	; (800e260 <_svfiprintf_r+0x1ec>)
 800e11a:	f7f2 f861 	bl	80001e0 <memchr>
 800e11e:	9a04      	ldr	r2, [sp, #16]
 800e120:	b9d8      	cbnz	r0, 800e15a <_svfiprintf_r+0xe6>
 800e122:	06d0      	lsls	r0, r2, #27
 800e124:	bf44      	itt	mi
 800e126:	2320      	movmi	r3, #32
 800e128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e12c:	0711      	lsls	r1, r2, #28
 800e12e:	bf44      	itt	mi
 800e130:	232b      	movmi	r3, #43	; 0x2b
 800e132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e136:	f89a 3000 	ldrb.w	r3, [sl]
 800e13a:	2b2a      	cmp	r3, #42	; 0x2a
 800e13c:	d015      	beq.n	800e16a <_svfiprintf_r+0xf6>
 800e13e:	9a07      	ldr	r2, [sp, #28]
 800e140:	4654      	mov	r4, sl
 800e142:	2000      	movs	r0, #0
 800e144:	f04f 0c0a 	mov.w	ip, #10
 800e148:	4621      	mov	r1, r4
 800e14a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e14e:	3b30      	subs	r3, #48	; 0x30
 800e150:	2b09      	cmp	r3, #9
 800e152:	d94e      	bls.n	800e1f2 <_svfiprintf_r+0x17e>
 800e154:	b1b0      	cbz	r0, 800e184 <_svfiprintf_r+0x110>
 800e156:	9207      	str	r2, [sp, #28]
 800e158:	e014      	b.n	800e184 <_svfiprintf_r+0x110>
 800e15a:	eba0 0308 	sub.w	r3, r0, r8
 800e15e:	fa09 f303 	lsl.w	r3, r9, r3
 800e162:	4313      	orrs	r3, r2
 800e164:	9304      	str	r3, [sp, #16]
 800e166:	46a2      	mov	sl, r4
 800e168:	e7d2      	b.n	800e110 <_svfiprintf_r+0x9c>
 800e16a:	9b03      	ldr	r3, [sp, #12]
 800e16c:	1d19      	adds	r1, r3, #4
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	9103      	str	r1, [sp, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	bfbb      	ittet	lt
 800e176:	425b      	neglt	r3, r3
 800e178:	f042 0202 	orrlt.w	r2, r2, #2
 800e17c:	9307      	strge	r3, [sp, #28]
 800e17e:	9307      	strlt	r3, [sp, #28]
 800e180:	bfb8      	it	lt
 800e182:	9204      	strlt	r2, [sp, #16]
 800e184:	7823      	ldrb	r3, [r4, #0]
 800e186:	2b2e      	cmp	r3, #46	; 0x2e
 800e188:	d10c      	bne.n	800e1a4 <_svfiprintf_r+0x130>
 800e18a:	7863      	ldrb	r3, [r4, #1]
 800e18c:	2b2a      	cmp	r3, #42	; 0x2a
 800e18e:	d135      	bne.n	800e1fc <_svfiprintf_r+0x188>
 800e190:	9b03      	ldr	r3, [sp, #12]
 800e192:	1d1a      	adds	r2, r3, #4
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	9203      	str	r2, [sp, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	bfb8      	it	lt
 800e19c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1a0:	3402      	adds	r4, #2
 800e1a2:	9305      	str	r3, [sp, #20]
 800e1a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e270 <_svfiprintf_r+0x1fc>
 800e1a8:	7821      	ldrb	r1, [r4, #0]
 800e1aa:	2203      	movs	r2, #3
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	f7f2 f817 	bl	80001e0 <memchr>
 800e1b2:	b140      	cbz	r0, 800e1c6 <_svfiprintf_r+0x152>
 800e1b4:	2340      	movs	r3, #64	; 0x40
 800e1b6:	eba0 000a 	sub.w	r0, r0, sl
 800e1ba:	fa03 f000 	lsl.w	r0, r3, r0
 800e1be:	9b04      	ldr	r3, [sp, #16]
 800e1c0:	4303      	orrs	r3, r0
 800e1c2:	3401      	adds	r4, #1
 800e1c4:	9304      	str	r3, [sp, #16]
 800e1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ca:	4826      	ldr	r0, [pc, #152]	; (800e264 <_svfiprintf_r+0x1f0>)
 800e1cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1d0:	2206      	movs	r2, #6
 800e1d2:	f7f2 f805 	bl	80001e0 <memchr>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d038      	beq.n	800e24c <_svfiprintf_r+0x1d8>
 800e1da:	4b23      	ldr	r3, [pc, #140]	; (800e268 <_svfiprintf_r+0x1f4>)
 800e1dc:	bb1b      	cbnz	r3, 800e226 <_svfiprintf_r+0x1b2>
 800e1de:	9b03      	ldr	r3, [sp, #12]
 800e1e0:	3307      	adds	r3, #7
 800e1e2:	f023 0307 	bic.w	r3, r3, #7
 800e1e6:	3308      	adds	r3, #8
 800e1e8:	9303      	str	r3, [sp, #12]
 800e1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ec:	4433      	add	r3, r6
 800e1ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e1f0:	e767      	b.n	800e0c2 <_svfiprintf_r+0x4e>
 800e1f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1f6:	460c      	mov	r4, r1
 800e1f8:	2001      	movs	r0, #1
 800e1fa:	e7a5      	b.n	800e148 <_svfiprintf_r+0xd4>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	3401      	adds	r4, #1
 800e200:	9305      	str	r3, [sp, #20]
 800e202:	4619      	mov	r1, r3
 800e204:	f04f 0c0a 	mov.w	ip, #10
 800e208:	4620      	mov	r0, r4
 800e20a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e20e:	3a30      	subs	r2, #48	; 0x30
 800e210:	2a09      	cmp	r2, #9
 800e212:	d903      	bls.n	800e21c <_svfiprintf_r+0x1a8>
 800e214:	2b00      	cmp	r3, #0
 800e216:	d0c5      	beq.n	800e1a4 <_svfiprintf_r+0x130>
 800e218:	9105      	str	r1, [sp, #20]
 800e21a:	e7c3      	b.n	800e1a4 <_svfiprintf_r+0x130>
 800e21c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e220:	4604      	mov	r4, r0
 800e222:	2301      	movs	r3, #1
 800e224:	e7f0      	b.n	800e208 <_svfiprintf_r+0x194>
 800e226:	ab03      	add	r3, sp, #12
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	462a      	mov	r2, r5
 800e22c:	4b0f      	ldr	r3, [pc, #60]	; (800e26c <_svfiprintf_r+0x1f8>)
 800e22e:	a904      	add	r1, sp, #16
 800e230:	4638      	mov	r0, r7
 800e232:	f3af 8000 	nop.w
 800e236:	1c42      	adds	r2, r0, #1
 800e238:	4606      	mov	r6, r0
 800e23a:	d1d6      	bne.n	800e1ea <_svfiprintf_r+0x176>
 800e23c:	89ab      	ldrh	r3, [r5, #12]
 800e23e:	065b      	lsls	r3, r3, #25
 800e240:	f53f af2c 	bmi.w	800e09c <_svfiprintf_r+0x28>
 800e244:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e246:	b01d      	add	sp, #116	; 0x74
 800e248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24c:	ab03      	add	r3, sp, #12
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	462a      	mov	r2, r5
 800e252:	4b06      	ldr	r3, [pc, #24]	; (800e26c <_svfiprintf_r+0x1f8>)
 800e254:	a904      	add	r1, sp, #16
 800e256:	4638      	mov	r0, r7
 800e258:	f7fe ffb2 	bl	800d1c0 <_printf_i>
 800e25c:	e7eb      	b.n	800e236 <_svfiprintf_r+0x1c2>
 800e25e:	bf00      	nop
 800e260:	0800f708 	.word	0x0800f708
 800e264:	0800f712 	.word	0x0800f712
 800e268:	00000000 	.word	0x00000000
 800e26c:	0800dfbf 	.word	0x0800dfbf
 800e270:	0800f70e 	.word	0x0800f70e

0800e274 <_sungetc_r>:
 800e274:	b538      	push	{r3, r4, r5, lr}
 800e276:	1c4b      	adds	r3, r1, #1
 800e278:	4614      	mov	r4, r2
 800e27a:	d103      	bne.n	800e284 <_sungetc_r+0x10>
 800e27c:	f04f 35ff 	mov.w	r5, #4294967295
 800e280:	4628      	mov	r0, r5
 800e282:	bd38      	pop	{r3, r4, r5, pc}
 800e284:	8993      	ldrh	r3, [r2, #12]
 800e286:	f023 0320 	bic.w	r3, r3, #32
 800e28a:	8193      	strh	r3, [r2, #12]
 800e28c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e28e:	6852      	ldr	r2, [r2, #4]
 800e290:	b2cd      	uxtb	r5, r1
 800e292:	b18b      	cbz	r3, 800e2b8 <_sungetc_r+0x44>
 800e294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e296:	4293      	cmp	r3, r2
 800e298:	dd08      	ble.n	800e2ac <_sungetc_r+0x38>
 800e29a:	6823      	ldr	r3, [r4, #0]
 800e29c:	1e5a      	subs	r2, r3, #1
 800e29e:	6022      	str	r2, [r4, #0]
 800e2a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e2a4:	6863      	ldr	r3, [r4, #4]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	6063      	str	r3, [r4, #4]
 800e2aa:	e7e9      	b.n	800e280 <_sungetc_r+0xc>
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	f000 fc47 	bl	800eb40 <__submore>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d0f1      	beq.n	800e29a <_sungetc_r+0x26>
 800e2b6:	e7e1      	b.n	800e27c <_sungetc_r+0x8>
 800e2b8:	6921      	ldr	r1, [r4, #16]
 800e2ba:	6823      	ldr	r3, [r4, #0]
 800e2bc:	b151      	cbz	r1, 800e2d4 <_sungetc_r+0x60>
 800e2be:	4299      	cmp	r1, r3
 800e2c0:	d208      	bcs.n	800e2d4 <_sungetc_r+0x60>
 800e2c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e2c6:	42a9      	cmp	r1, r5
 800e2c8:	d104      	bne.n	800e2d4 <_sungetc_r+0x60>
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	3201      	adds	r2, #1
 800e2ce:	6023      	str	r3, [r4, #0]
 800e2d0:	6062      	str	r2, [r4, #4]
 800e2d2:	e7d5      	b.n	800e280 <_sungetc_r+0xc>
 800e2d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2dc:	6363      	str	r3, [r4, #52]	; 0x34
 800e2de:	2303      	movs	r3, #3
 800e2e0:	63a3      	str	r3, [r4, #56]	; 0x38
 800e2e2:	4623      	mov	r3, r4
 800e2e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e7dc      	b.n	800e2a8 <_sungetc_r+0x34>

0800e2ee <__ssrefill_r>:
 800e2ee:	b510      	push	{r4, lr}
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e2f4:	b169      	cbz	r1, 800e312 <__ssrefill_r+0x24>
 800e2f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2fa:	4299      	cmp	r1, r3
 800e2fc:	d001      	beq.n	800e302 <__ssrefill_r+0x14>
 800e2fe:	f7fe fcb7 	bl	800cc70 <_free_r>
 800e302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e304:	6063      	str	r3, [r4, #4]
 800e306:	2000      	movs	r0, #0
 800e308:	6360      	str	r0, [r4, #52]	; 0x34
 800e30a:	b113      	cbz	r3, 800e312 <__ssrefill_r+0x24>
 800e30c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e30e:	6023      	str	r3, [r4, #0]
 800e310:	bd10      	pop	{r4, pc}
 800e312:	6923      	ldr	r3, [r4, #16]
 800e314:	6023      	str	r3, [r4, #0]
 800e316:	2300      	movs	r3, #0
 800e318:	6063      	str	r3, [r4, #4]
 800e31a:	89a3      	ldrh	r3, [r4, #12]
 800e31c:	f043 0320 	orr.w	r3, r3, #32
 800e320:	81a3      	strh	r3, [r4, #12]
 800e322:	f04f 30ff 	mov.w	r0, #4294967295
 800e326:	e7f3      	b.n	800e310 <__ssrefill_r+0x22>

0800e328 <__ssvfiscanf_r>:
 800e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e32c:	460c      	mov	r4, r1
 800e32e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e332:	2100      	movs	r1, #0
 800e334:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e338:	49a6      	ldr	r1, [pc, #664]	; (800e5d4 <__ssvfiscanf_r+0x2ac>)
 800e33a:	91a0      	str	r1, [sp, #640]	; 0x280
 800e33c:	f10d 0804 	add.w	r8, sp, #4
 800e340:	49a5      	ldr	r1, [pc, #660]	; (800e5d8 <__ssvfiscanf_r+0x2b0>)
 800e342:	4fa6      	ldr	r7, [pc, #664]	; (800e5dc <__ssvfiscanf_r+0x2b4>)
 800e344:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e5e0 <__ssvfiscanf_r+0x2b8>
 800e348:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e34c:	4606      	mov	r6, r0
 800e34e:	91a1      	str	r1, [sp, #644]	; 0x284
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	7813      	ldrb	r3, [r2, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 815a 	beq.w	800e60e <__ssvfiscanf_r+0x2e6>
 800e35a:	5dd9      	ldrb	r1, [r3, r7]
 800e35c:	f011 0108 	ands.w	r1, r1, #8
 800e360:	f102 0501 	add.w	r5, r2, #1
 800e364:	d019      	beq.n	800e39a <__ssvfiscanf_r+0x72>
 800e366:	6863      	ldr	r3, [r4, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	dd0f      	ble.n	800e38c <__ssvfiscanf_r+0x64>
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	781a      	ldrb	r2, [r3, #0]
 800e370:	5cba      	ldrb	r2, [r7, r2]
 800e372:	0712      	lsls	r2, r2, #28
 800e374:	d401      	bmi.n	800e37a <__ssvfiscanf_r+0x52>
 800e376:	462a      	mov	r2, r5
 800e378:	e7eb      	b.n	800e352 <__ssvfiscanf_r+0x2a>
 800e37a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e37c:	3201      	adds	r2, #1
 800e37e:	9245      	str	r2, [sp, #276]	; 0x114
 800e380:	6862      	ldr	r2, [r4, #4]
 800e382:	3301      	adds	r3, #1
 800e384:	3a01      	subs	r2, #1
 800e386:	6062      	str	r2, [r4, #4]
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	e7ec      	b.n	800e366 <__ssvfiscanf_r+0x3e>
 800e38c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e38e:	4621      	mov	r1, r4
 800e390:	4630      	mov	r0, r6
 800e392:	4798      	blx	r3
 800e394:	2800      	cmp	r0, #0
 800e396:	d0e9      	beq.n	800e36c <__ssvfiscanf_r+0x44>
 800e398:	e7ed      	b.n	800e376 <__ssvfiscanf_r+0x4e>
 800e39a:	2b25      	cmp	r3, #37	; 0x25
 800e39c:	d012      	beq.n	800e3c4 <__ssvfiscanf_r+0x9c>
 800e39e:	469a      	mov	sl, r3
 800e3a0:	6863      	ldr	r3, [r4, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f340 8091 	ble.w	800e4ca <__ssvfiscanf_r+0x1a2>
 800e3a8:	6822      	ldr	r2, [r4, #0]
 800e3aa:	7813      	ldrb	r3, [r2, #0]
 800e3ac:	4553      	cmp	r3, sl
 800e3ae:	f040 812e 	bne.w	800e60e <__ssvfiscanf_r+0x2e6>
 800e3b2:	6863      	ldr	r3, [r4, #4]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	6063      	str	r3, [r4, #4]
 800e3b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e3ba:	3201      	adds	r2, #1
 800e3bc:	3301      	adds	r3, #1
 800e3be:	6022      	str	r2, [r4, #0]
 800e3c0:	9345      	str	r3, [sp, #276]	; 0x114
 800e3c2:	e7d8      	b.n	800e376 <__ssvfiscanf_r+0x4e>
 800e3c4:	9141      	str	r1, [sp, #260]	; 0x104
 800e3c6:	9143      	str	r1, [sp, #268]	; 0x10c
 800e3c8:	7853      	ldrb	r3, [r2, #1]
 800e3ca:	2b2a      	cmp	r3, #42	; 0x2a
 800e3cc:	bf02      	ittt	eq
 800e3ce:	2310      	moveq	r3, #16
 800e3d0:	1c95      	addeq	r5, r2, #2
 800e3d2:	9341      	streq	r3, [sp, #260]	; 0x104
 800e3d4:	220a      	movs	r2, #10
 800e3d6:	46aa      	mov	sl, r5
 800e3d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e3dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e3e0:	2b09      	cmp	r3, #9
 800e3e2:	d91d      	bls.n	800e420 <__ssvfiscanf_r+0xf8>
 800e3e4:	487e      	ldr	r0, [pc, #504]	; (800e5e0 <__ssvfiscanf_r+0x2b8>)
 800e3e6:	2203      	movs	r2, #3
 800e3e8:	f7f1 fefa 	bl	80001e0 <memchr>
 800e3ec:	b140      	cbz	r0, 800e400 <__ssvfiscanf_r+0xd8>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	eba0 0009 	sub.w	r0, r0, r9
 800e3f4:	fa03 f000 	lsl.w	r0, r3, r0
 800e3f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e3fa:	4318      	orrs	r0, r3
 800e3fc:	9041      	str	r0, [sp, #260]	; 0x104
 800e3fe:	4655      	mov	r5, sl
 800e400:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e404:	2b78      	cmp	r3, #120	; 0x78
 800e406:	d806      	bhi.n	800e416 <__ssvfiscanf_r+0xee>
 800e408:	2b57      	cmp	r3, #87	; 0x57
 800e40a:	d810      	bhi.n	800e42e <__ssvfiscanf_r+0x106>
 800e40c:	2b25      	cmp	r3, #37	; 0x25
 800e40e:	d0c6      	beq.n	800e39e <__ssvfiscanf_r+0x76>
 800e410:	d856      	bhi.n	800e4c0 <__ssvfiscanf_r+0x198>
 800e412:	2b00      	cmp	r3, #0
 800e414:	d064      	beq.n	800e4e0 <__ssvfiscanf_r+0x1b8>
 800e416:	2303      	movs	r3, #3
 800e418:	9347      	str	r3, [sp, #284]	; 0x11c
 800e41a:	230a      	movs	r3, #10
 800e41c:	9342      	str	r3, [sp, #264]	; 0x108
 800e41e:	e071      	b.n	800e504 <__ssvfiscanf_r+0x1dc>
 800e420:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e422:	fb02 1103 	mla	r1, r2, r3, r1
 800e426:	3930      	subs	r1, #48	; 0x30
 800e428:	9143      	str	r1, [sp, #268]	; 0x10c
 800e42a:	4655      	mov	r5, sl
 800e42c:	e7d3      	b.n	800e3d6 <__ssvfiscanf_r+0xae>
 800e42e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e432:	2a20      	cmp	r2, #32
 800e434:	d8ef      	bhi.n	800e416 <__ssvfiscanf_r+0xee>
 800e436:	a101      	add	r1, pc, #4	; (adr r1, 800e43c <__ssvfiscanf_r+0x114>)
 800e438:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e43c:	0800e4ef 	.word	0x0800e4ef
 800e440:	0800e417 	.word	0x0800e417
 800e444:	0800e417 	.word	0x0800e417
 800e448:	0800e54d 	.word	0x0800e54d
 800e44c:	0800e417 	.word	0x0800e417
 800e450:	0800e417 	.word	0x0800e417
 800e454:	0800e417 	.word	0x0800e417
 800e458:	0800e417 	.word	0x0800e417
 800e45c:	0800e417 	.word	0x0800e417
 800e460:	0800e417 	.word	0x0800e417
 800e464:	0800e417 	.word	0x0800e417
 800e468:	0800e563 	.word	0x0800e563
 800e46c:	0800e539 	.word	0x0800e539
 800e470:	0800e4c7 	.word	0x0800e4c7
 800e474:	0800e4c7 	.word	0x0800e4c7
 800e478:	0800e4c7 	.word	0x0800e4c7
 800e47c:	0800e417 	.word	0x0800e417
 800e480:	0800e53d 	.word	0x0800e53d
 800e484:	0800e417 	.word	0x0800e417
 800e488:	0800e417 	.word	0x0800e417
 800e48c:	0800e417 	.word	0x0800e417
 800e490:	0800e417 	.word	0x0800e417
 800e494:	0800e573 	.word	0x0800e573
 800e498:	0800e545 	.word	0x0800e545
 800e49c:	0800e4e7 	.word	0x0800e4e7
 800e4a0:	0800e417 	.word	0x0800e417
 800e4a4:	0800e417 	.word	0x0800e417
 800e4a8:	0800e56f 	.word	0x0800e56f
 800e4ac:	0800e417 	.word	0x0800e417
 800e4b0:	0800e539 	.word	0x0800e539
 800e4b4:	0800e417 	.word	0x0800e417
 800e4b8:	0800e417 	.word	0x0800e417
 800e4bc:	0800e4ef 	.word	0x0800e4ef
 800e4c0:	3b45      	subs	r3, #69	; 0x45
 800e4c2:	2b02      	cmp	r3, #2
 800e4c4:	d8a7      	bhi.n	800e416 <__ssvfiscanf_r+0xee>
 800e4c6:	2305      	movs	r3, #5
 800e4c8:	e01b      	b.n	800e502 <__ssvfiscanf_r+0x1da>
 800e4ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	4798      	blx	r3
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	f43f af68 	beq.w	800e3a8 <__ssvfiscanf_r+0x80>
 800e4d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	f040 808d 	bne.w	800e5fa <__ssvfiscanf_r+0x2d2>
 800e4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e4:	e08f      	b.n	800e606 <__ssvfiscanf_r+0x2de>
 800e4e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e4e8:	f042 0220 	orr.w	r2, r2, #32
 800e4ec:	9241      	str	r2, [sp, #260]	; 0x104
 800e4ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e4f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4f4:	9241      	str	r2, [sp, #260]	; 0x104
 800e4f6:	2210      	movs	r2, #16
 800e4f8:	2b6f      	cmp	r3, #111	; 0x6f
 800e4fa:	9242      	str	r2, [sp, #264]	; 0x108
 800e4fc:	bf34      	ite	cc
 800e4fe:	2303      	movcc	r3, #3
 800e500:	2304      	movcs	r3, #4
 800e502:	9347      	str	r3, [sp, #284]	; 0x11c
 800e504:	6863      	ldr	r3, [r4, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	dd42      	ble.n	800e590 <__ssvfiscanf_r+0x268>
 800e50a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e50c:	0659      	lsls	r1, r3, #25
 800e50e:	d404      	bmi.n	800e51a <__ssvfiscanf_r+0x1f2>
 800e510:	6823      	ldr	r3, [r4, #0]
 800e512:	781a      	ldrb	r2, [r3, #0]
 800e514:	5cba      	ldrb	r2, [r7, r2]
 800e516:	0712      	lsls	r2, r2, #28
 800e518:	d441      	bmi.n	800e59e <__ssvfiscanf_r+0x276>
 800e51a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e51c:	2b02      	cmp	r3, #2
 800e51e:	dc50      	bgt.n	800e5c2 <__ssvfiscanf_r+0x29a>
 800e520:	466b      	mov	r3, sp
 800e522:	4622      	mov	r2, r4
 800e524:	a941      	add	r1, sp, #260	; 0x104
 800e526:	4630      	mov	r0, r6
 800e528:	f000 f876 	bl	800e618 <_scanf_chars>
 800e52c:	2801      	cmp	r0, #1
 800e52e:	d06e      	beq.n	800e60e <__ssvfiscanf_r+0x2e6>
 800e530:	2802      	cmp	r0, #2
 800e532:	f47f af20 	bne.w	800e376 <__ssvfiscanf_r+0x4e>
 800e536:	e7cf      	b.n	800e4d8 <__ssvfiscanf_r+0x1b0>
 800e538:	220a      	movs	r2, #10
 800e53a:	e7dd      	b.n	800e4f8 <__ssvfiscanf_r+0x1d0>
 800e53c:	2300      	movs	r3, #0
 800e53e:	9342      	str	r3, [sp, #264]	; 0x108
 800e540:	2303      	movs	r3, #3
 800e542:	e7de      	b.n	800e502 <__ssvfiscanf_r+0x1da>
 800e544:	2308      	movs	r3, #8
 800e546:	9342      	str	r3, [sp, #264]	; 0x108
 800e548:	2304      	movs	r3, #4
 800e54a:	e7da      	b.n	800e502 <__ssvfiscanf_r+0x1da>
 800e54c:	4629      	mov	r1, r5
 800e54e:	4640      	mov	r0, r8
 800e550:	f000 f9c6 	bl	800e8e0 <__sccl>
 800e554:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e55a:	9341      	str	r3, [sp, #260]	; 0x104
 800e55c:	4605      	mov	r5, r0
 800e55e:	2301      	movs	r3, #1
 800e560:	e7cf      	b.n	800e502 <__ssvfiscanf_r+0x1da>
 800e562:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e568:	9341      	str	r3, [sp, #260]	; 0x104
 800e56a:	2300      	movs	r3, #0
 800e56c:	e7c9      	b.n	800e502 <__ssvfiscanf_r+0x1da>
 800e56e:	2302      	movs	r3, #2
 800e570:	e7c7      	b.n	800e502 <__ssvfiscanf_r+0x1da>
 800e572:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e574:	06c3      	lsls	r3, r0, #27
 800e576:	f53f aefe 	bmi.w	800e376 <__ssvfiscanf_r+0x4e>
 800e57a:	9b00      	ldr	r3, [sp, #0]
 800e57c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e57e:	1d19      	adds	r1, r3, #4
 800e580:	9100      	str	r1, [sp, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f010 0f01 	tst.w	r0, #1
 800e588:	bf14      	ite	ne
 800e58a:	801a      	strhne	r2, [r3, #0]
 800e58c:	601a      	streq	r2, [r3, #0]
 800e58e:	e6f2      	b.n	800e376 <__ssvfiscanf_r+0x4e>
 800e590:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e592:	4621      	mov	r1, r4
 800e594:	4630      	mov	r0, r6
 800e596:	4798      	blx	r3
 800e598:	2800      	cmp	r0, #0
 800e59a:	d0b6      	beq.n	800e50a <__ssvfiscanf_r+0x1e2>
 800e59c:	e79c      	b.n	800e4d8 <__ssvfiscanf_r+0x1b0>
 800e59e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5a0:	3201      	adds	r2, #1
 800e5a2:	9245      	str	r2, [sp, #276]	; 0x114
 800e5a4:	6862      	ldr	r2, [r4, #4]
 800e5a6:	3a01      	subs	r2, #1
 800e5a8:	2a00      	cmp	r2, #0
 800e5aa:	6062      	str	r2, [r4, #4]
 800e5ac:	dd02      	ble.n	800e5b4 <__ssvfiscanf_r+0x28c>
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	e7ad      	b.n	800e510 <__ssvfiscanf_r+0x1e8>
 800e5b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5b6:	4621      	mov	r1, r4
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	4798      	blx	r3
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d0a7      	beq.n	800e510 <__ssvfiscanf_r+0x1e8>
 800e5c0:	e78a      	b.n	800e4d8 <__ssvfiscanf_r+0x1b0>
 800e5c2:	2b04      	cmp	r3, #4
 800e5c4:	dc0e      	bgt.n	800e5e4 <__ssvfiscanf_r+0x2bc>
 800e5c6:	466b      	mov	r3, sp
 800e5c8:	4622      	mov	r2, r4
 800e5ca:	a941      	add	r1, sp, #260	; 0x104
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	f000 f87d 	bl	800e6cc <_scanf_i>
 800e5d2:	e7ab      	b.n	800e52c <__ssvfiscanf_r+0x204>
 800e5d4:	0800e275 	.word	0x0800e275
 800e5d8:	0800e2ef 	.word	0x0800e2ef
 800e5dc:	0800f757 	.word	0x0800f757
 800e5e0:	0800f70e 	.word	0x0800f70e
 800e5e4:	4b0b      	ldr	r3, [pc, #44]	; (800e614 <__ssvfiscanf_r+0x2ec>)
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f43f aec5 	beq.w	800e376 <__ssvfiscanf_r+0x4e>
 800e5ec:	466b      	mov	r3, sp
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	a941      	add	r1, sp, #260	; 0x104
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f3af 8000 	nop.w
 800e5f8:	e798      	b.n	800e52c <__ssvfiscanf_r+0x204>
 800e5fa:	89a3      	ldrh	r3, [r4, #12]
 800e5fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e600:	bf18      	it	ne
 800e602:	f04f 30ff 	movne.w	r0, #4294967295
 800e606:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e60e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e610:	e7f9      	b.n	800e606 <__ssvfiscanf_r+0x2de>
 800e612:	bf00      	nop
 800e614:	00000000 	.word	0x00000000

0800e618 <_scanf_chars>:
 800e618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e61c:	4615      	mov	r5, r2
 800e61e:	688a      	ldr	r2, [r1, #8]
 800e620:	4680      	mov	r8, r0
 800e622:	460c      	mov	r4, r1
 800e624:	b932      	cbnz	r2, 800e634 <_scanf_chars+0x1c>
 800e626:	698a      	ldr	r2, [r1, #24]
 800e628:	2a00      	cmp	r2, #0
 800e62a:	bf0c      	ite	eq
 800e62c:	2201      	moveq	r2, #1
 800e62e:	f04f 32ff 	movne.w	r2, #4294967295
 800e632:	608a      	str	r2, [r1, #8]
 800e634:	6822      	ldr	r2, [r4, #0]
 800e636:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e6c8 <_scanf_chars+0xb0>
 800e63a:	06d1      	lsls	r1, r2, #27
 800e63c:	bf5f      	itttt	pl
 800e63e:	681a      	ldrpl	r2, [r3, #0]
 800e640:	1d11      	addpl	r1, r2, #4
 800e642:	6019      	strpl	r1, [r3, #0]
 800e644:	6816      	ldrpl	r6, [r2, #0]
 800e646:	2700      	movs	r7, #0
 800e648:	69a0      	ldr	r0, [r4, #24]
 800e64a:	b188      	cbz	r0, 800e670 <_scanf_chars+0x58>
 800e64c:	2801      	cmp	r0, #1
 800e64e:	d107      	bne.n	800e660 <_scanf_chars+0x48>
 800e650:	682a      	ldr	r2, [r5, #0]
 800e652:	7811      	ldrb	r1, [r2, #0]
 800e654:	6962      	ldr	r2, [r4, #20]
 800e656:	5c52      	ldrb	r2, [r2, r1]
 800e658:	b952      	cbnz	r2, 800e670 <_scanf_chars+0x58>
 800e65a:	2f00      	cmp	r7, #0
 800e65c:	d031      	beq.n	800e6c2 <_scanf_chars+0xaa>
 800e65e:	e022      	b.n	800e6a6 <_scanf_chars+0x8e>
 800e660:	2802      	cmp	r0, #2
 800e662:	d120      	bne.n	800e6a6 <_scanf_chars+0x8e>
 800e664:	682b      	ldr	r3, [r5, #0]
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e66c:	071b      	lsls	r3, r3, #28
 800e66e:	d41a      	bmi.n	800e6a6 <_scanf_chars+0x8e>
 800e670:	6823      	ldr	r3, [r4, #0]
 800e672:	06da      	lsls	r2, r3, #27
 800e674:	bf5e      	ittt	pl
 800e676:	682b      	ldrpl	r3, [r5, #0]
 800e678:	781b      	ldrbpl	r3, [r3, #0]
 800e67a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e67e:	682a      	ldr	r2, [r5, #0]
 800e680:	686b      	ldr	r3, [r5, #4]
 800e682:	3201      	adds	r2, #1
 800e684:	602a      	str	r2, [r5, #0]
 800e686:	68a2      	ldr	r2, [r4, #8]
 800e688:	3b01      	subs	r3, #1
 800e68a:	3a01      	subs	r2, #1
 800e68c:	606b      	str	r3, [r5, #4]
 800e68e:	3701      	adds	r7, #1
 800e690:	60a2      	str	r2, [r4, #8]
 800e692:	b142      	cbz	r2, 800e6a6 <_scanf_chars+0x8e>
 800e694:	2b00      	cmp	r3, #0
 800e696:	dcd7      	bgt.n	800e648 <_scanf_chars+0x30>
 800e698:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e69c:	4629      	mov	r1, r5
 800e69e:	4640      	mov	r0, r8
 800e6a0:	4798      	blx	r3
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d0d0      	beq.n	800e648 <_scanf_chars+0x30>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	f013 0310 	ands.w	r3, r3, #16
 800e6ac:	d105      	bne.n	800e6ba <_scanf_chars+0xa2>
 800e6ae:	68e2      	ldr	r2, [r4, #12]
 800e6b0:	3201      	adds	r2, #1
 800e6b2:	60e2      	str	r2, [r4, #12]
 800e6b4:	69a2      	ldr	r2, [r4, #24]
 800e6b6:	b102      	cbz	r2, 800e6ba <_scanf_chars+0xa2>
 800e6b8:	7033      	strb	r3, [r6, #0]
 800e6ba:	6923      	ldr	r3, [r4, #16]
 800e6bc:	443b      	add	r3, r7
 800e6be:	6123      	str	r3, [r4, #16]
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6c6:	bf00      	nop
 800e6c8:	0800f757 	.word	0x0800f757

0800e6cc <_scanf_i>:
 800e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d0:	4698      	mov	r8, r3
 800e6d2:	4b76      	ldr	r3, [pc, #472]	; (800e8ac <_scanf_i+0x1e0>)
 800e6d4:	460c      	mov	r4, r1
 800e6d6:	4682      	mov	sl, r0
 800e6d8:	4616      	mov	r6, r2
 800e6da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e6de:	b087      	sub	sp, #28
 800e6e0:	ab03      	add	r3, sp, #12
 800e6e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e6e6:	4b72      	ldr	r3, [pc, #456]	; (800e8b0 <_scanf_i+0x1e4>)
 800e6e8:	69a1      	ldr	r1, [r4, #24]
 800e6ea:	4a72      	ldr	r2, [pc, #456]	; (800e8b4 <_scanf_i+0x1e8>)
 800e6ec:	2903      	cmp	r1, #3
 800e6ee:	bf18      	it	ne
 800e6f0:	461a      	movne	r2, r3
 800e6f2:	68a3      	ldr	r3, [r4, #8]
 800e6f4:	9201      	str	r2, [sp, #4]
 800e6f6:	1e5a      	subs	r2, r3, #1
 800e6f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e6fc:	bf88      	it	hi
 800e6fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e702:	4627      	mov	r7, r4
 800e704:	bf82      	ittt	hi
 800e706:	eb03 0905 	addhi.w	r9, r3, r5
 800e70a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e70e:	60a3      	strhi	r3, [r4, #8]
 800e710:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e714:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e718:	bf98      	it	ls
 800e71a:	f04f 0900 	movls.w	r9, #0
 800e71e:	6023      	str	r3, [r4, #0]
 800e720:	463d      	mov	r5, r7
 800e722:	f04f 0b00 	mov.w	fp, #0
 800e726:	6831      	ldr	r1, [r6, #0]
 800e728:	ab03      	add	r3, sp, #12
 800e72a:	7809      	ldrb	r1, [r1, #0]
 800e72c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e730:	2202      	movs	r2, #2
 800e732:	f7f1 fd55 	bl	80001e0 <memchr>
 800e736:	b328      	cbz	r0, 800e784 <_scanf_i+0xb8>
 800e738:	f1bb 0f01 	cmp.w	fp, #1
 800e73c:	d159      	bne.n	800e7f2 <_scanf_i+0x126>
 800e73e:	6862      	ldr	r2, [r4, #4]
 800e740:	b92a      	cbnz	r2, 800e74e <_scanf_i+0x82>
 800e742:	6822      	ldr	r2, [r4, #0]
 800e744:	2308      	movs	r3, #8
 800e746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e74a:	6063      	str	r3, [r4, #4]
 800e74c:	6022      	str	r2, [r4, #0]
 800e74e:	6822      	ldr	r2, [r4, #0]
 800e750:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e754:	6022      	str	r2, [r4, #0]
 800e756:	68a2      	ldr	r2, [r4, #8]
 800e758:	1e51      	subs	r1, r2, #1
 800e75a:	60a1      	str	r1, [r4, #8]
 800e75c:	b192      	cbz	r2, 800e784 <_scanf_i+0xb8>
 800e75e:	6832      	ldr	r2, [r6, #0]
 800e760:	1c51      	adds	r1, r2, #1
 800e762:	6031      	str	r1, [r6, #0]
 800e764:	7812      	ldrb	r2, [r2, #0]
 800e766:	f805 2b01 	strb.w	r2, [r5], #1
 800e76a:	6872      	ldr	r2, [r6, #4]
 800e76c:	3a01      	subs	r2, #1
 800e76e:	2a00      	cmp	r2, #0
 800e770:	6072      	str	r2, [r6, #4]
 800e772:	dc07      	bgt.n	800e784 <_scanf_i+0xb8>
 800e774:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e778:	4631      	mov	r1, r6
 800e77a:	4650      	mov	r0, sl
 800e77c:	4790      	blx	r2
 800e77e:	2800      	cmp	r0, #0
 800e780:	f040 8085 	bne.w	800e88e <_scanf_i+0x1c2>
 800e784:	f10b 0b01 	add.w	fp, fp, #1
 800e788:	f1bb 0f03 	cmp.w	fp, #3
 800e78c:	d1cb      	bne.n	800e726 <_scanf_i+0x5a>
 800e78e:	6863      	ldr	r3, [r4, #4]
 800e790:	b90b      	cbnz	r3, 800e796 <_scanf_i+0xca>
 800e792:	230a      	movs	r3, #10
 800e794:	6063      	str	r3, [r4, #4]
 800e796:	6863      	ldr	r3, [r4, #4]
 800e798:	4947      	ldr	r1, [pc, #284]	; (800e8b8 <_scanf_i+0x1ec>)
 800e79a:	6960      	ldr	r0, [r4, #20]
 800e79c:	1ac9      	subs	r1, r1, r3
 800e79e:	f000 f89f 	bl	800e8e0 <__sccl>
 800e7a2:	f04f 0b00 	mov.w	fp, #0
 800e7a6:	68a3      	ldr	r3, [r4, #8]
 800e7a8:	6822      	ldr	r2, [r4, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d03d      	beq.n	800e82a <_scanf_i+0x15e>
 800e7ae:	6831      	ldr	r1, [r6, #0]
 800e7b0:	6960      	ldr	r0, [r4, #20]
 800e7b2:	f891 c000 	ldrb.w	ip, [r1]
 800e7b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	d035      	beq.n	800e82a <_scanf_i+0x15e>
 800e7be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e7c2:	d124      	bne.n	800e80e <_scanf_i+0x142>
 800e7c4:	0510      	lsls	r0, r2, #20
 800e7c6:	d522      	bpl.n	800e80e <_scanf_i+0x142>
 800e7c8:	f10b 0b01 	add.w	fp, fp, #1
 800e7cc:	f1b9 0f00 	cmp.w	r9, #0
 800e7d0:	d003      	beq.n	800e7da <_scanf_i+0x10e>
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	f109 39ff 	add.w	r9, r9, #4294967295
 800e7d8:	60a3      	str	r3, [r4, #8]
 800e7da:	6873      	ldr	r3, [r6, #4]
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	6073      	str	r3, [r6, #4]
 800e7e2:	dd1b      	ble.n	800e81c <_scanf_i+0x150>
 800e7e4:	6833      	ldr	r3, [r6, #0]
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	6033      	str	r3, [r6, #0]
 800e7ea:	68a3      	ldr	r3, [r4, #8]
 800e7ec:	3b01      	subs	r3, #1
 800e7ee:	60a3      	str	r3, [r4, #8]
 800e7f0:	e7d9      	b.n	800e7a6 <_scanf_i+0xda>
 800e7f2:	f1bb 0f02 	cmp.w	fp, #2
 800e7f6:	d1ae      	bne.n	800e756 <_scanf_i+0x8a>
 800e7f8:	6822      	ldr	r2, [r4, #0]
 800e7fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e7fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e802:	d1bf      	bne.n	800e784 <_scanf_i+0xb8>
 800e804:	2310      	movs	r3, #16
 800e806:	6063      	str	r3, [r4, #4]
 800e808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e80c:	e7a2      	b.n	800e754 <_scanf_i+0x88>
 800e80e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e812:	6022      	str	r2, [r4, #0]
 800e814:	780b      	ldrb	r3, [r1, #0]
 800e816:	f805 3b01 	strb.w	r3, [r5], #1
 800e81a:	e7de      	b.n	800e7da <_scanf_i+0x10e>
 800e81c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e820:	4631      	mov	r1, r6
 800e822:	4650      	mov	r0, sl
 800e824:	4798      	blx	r3
 800e826:	2800      	cmp	r0, #0
 800e828:	d0df      	beq.n	800e7ea <_scanf_i+0x11e>
 800e82a:	6823      	ldr	r3, [r4, #0]
 800e82c:	05db      	lsls	r3, r3, #23
 800e82e:	d50d      	bpl.n	800e84c <_scanf_i+0x180>
 800e830:	42bd      	cmp	r5, r7
 800e832:	d909      	bls.n	800e848 <_scanf_i+0x17c>
 800e834:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e838:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e83c:	4632      	mov	r2, r6
 800e83e:	4650      	mov	r0, sl
 800e840:	4798      	blx	r3
 800e842:	f105 39ff 	add.w	r9, r5, #4294967295
 800e846:	464d      	mov	r5, r9
 800e848:	42bd      	cmp	r5, r7
 800e84a:	d02d      	beq.n	800e8a8 <_scanf_i+0x1dc>
 800e84c:	6822      	ldr	r2, [r4, #0]
 800e84e:	f012 0210 	ands.w	r2, r2, #16
 800e852:	d113      	bne.n	800e87c <_scanf_i+0x1b0>
 800e854:	702a      	strb	r2, [r5, #0]
 800e856:	6863      	ldr	r3, [r4, #4]
 800e858:	9e01      	ldr	r6, [sp, #4]
 800e85a:	4639      	mov	r1, r7
 800e85c:	4650      	mov	r0, sl
 800e85e:	47b0      	blx	r6
 800e860:	6821      	ldr	r1, [r4, #0]
 800e862:	f8d8 3000 	ldr.w	r3, [r8]
 800e866:	f011 0f20 	tst.w	r1, #32
 800e86a:	d013      	beq.n	800e894 <_scanf_i+0x1c8>
 800e86c:	1d1a      	adds	r2, r3, #4
 800e86e:	f8c8 2000 	str.w	r2, [r8]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6018      	str	r0, [r3, #0]
 800e876:	68e3      	ldr	r3, [r4, #12]
 800e878:	3301      	adds	r3, #1
 800e87a:	60e3      	str	r3, [r4, #12]
 800e87c:	1bed      	subs	r5, r5, r7
 800e87e:	44ab      	add	fp, r5
 800e880:	6925      	ldr	r5, [r4, #16]
 800e882:	445d      	add	r5, fp
 800e884:	6125      	str	r5, [r4, #16]
 800e886:	2000      	movs	r0, #0
 800e888:	b007      	add	sp, #28
 800e88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88e:	f04f 0b00 	mov.w	fp, #0
 800e892:	e7ca      	b.n	800e82a <_scanf_i+0x15e>
 800e894:	1d1a      	adds	r2, r3, #4
 800e896:	f8c8 2000 	str.w	r2, [r8]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f011 0f01 	tst.w	r1, #1
 800e8a0:	bf14      	ite	ne
 800e8a2:	8018      	strhne	r0, [r3, #0]
 800e8a4:	6018      	streq	r0, [r3, #0]
 800e8a6:	e7e6      	b.n	800e876 <_scanf_i+0x1aa>
 800e8a8:	2001      	movs	r0, #1
 800e8aa:	e7ed      	b.n	800e888 <_scanf_i+0x1bc>
 800e8ac:	0800efc4 	.word	0x0800efc4
 800e8b0:	0800eb3d 	.word	0x0800eb3d
 800e8b4:	0800ea55 	.word	0x0800ea55
 800e8b8:	0800f754 	.word	0x0800f754

0800e8bc <_read_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4d07      	ldr	r5, [pc, #28]	; (800e8dc <_read_r+0x20>)
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	4608      	mov	r0, r1
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	602a      	str	r2, [r5, #0]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	f7f4 f988 	bl	8002be0 <_read>
 800e8d0:	1c43      	adds	r3, r0, #1
 800e8d2:	d102      	bne.n	800e8da <_read_r+0x1e>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	b103      	cbz	r3, 800e8da <_read_r+0x1e>
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	bd38      	pop	{r3, r4, r5, pc}
 800e8dc:	20006774 	.word	0x20006774

0800e8e0 <__sccl>:
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	780b      	ldrb	r3, [r1, #0]
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	2b5e      	cmp	r3, #94	; 0x5e
 800e8e8:	bf0b      	itete	eq
 800e8ea:	784b      	ldrbeq	r3, [r1, #1]
 800e8ec:	1c48      	addne	r0, r1, #1
 800e8ee:	1c88      	addeq	r0, r1, #2
 800e8f0:	2200      	movne	r2, #0
 800e8f2:	bf08      	it	eq
 800e8f4:	2201      	moveq	r2, #1
 800e8f6:	1e61      	subs	r1, r4, #1
 800e8f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e8fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e900:	42a9      	cmp	r1, r5
 800e902:	d1fb      	bne.n	800e8fc <__sccl+0x1c>
 800e904:	b90b      	cbnz	r3, 800e90a <__sccl+0x2a>
 800e906:	3801      	subs	r0, #1
 800e908:	bd70      	pop	{r4, r5, r6, pc}
 800e90a:	f082 0201 	eor.w	r2, r2, #1
 800e90e:	54e2      	strb	r2, [r4, r3]
 800e910:	4605      	mov	r5, r0
 800e912:	4628      	mov	r0, r5
 800e914:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e918:	292d      	cmp	r1, #45	; 0x2d
 800e91a:	d006      	beq.n	800e92a <__sccl+0x4a>
 800e91c:	295d      	cmp	r1, #93	; 0x5d
 800e91e:	d0f3      	beq.n	800e908 <__sccl+0x28>
 800e920:	b909      	cbnz	r1, 800e926 <__sccl+0x46>
 800e922:	4628      	mov	r0, r5
 800e924:	e7f0      	b.n	800e908 <__sccl+0x28>
 800e926:	460b      	mov	r3, r1
 800e928:	e7f1      	b.n	800e90e <__sccl+0x2e>
 800e92a:	786e      	ldrb	r6, [r5, #1]
 800e92c:	2e5d      	cmp	r6, #93	; 0x5d
 800e92e:	d0fa      	beq.n	800e926 <__sccl+0x46>
 800e930:	42b3      	cmp	r3, r6
 800e932:	dcf8      	bgt.n	800e926 <__sccl+0x46>
 800e934:	3502      	adds	r5, #2
 800e936:	4619      	mov	r1, r3
 800e938:	3101      	adds	r1, #1
 800e93a:	428e      	cmp	r6, r1
 800e93c:	5462      	strb	r2, [r4, r1]
 800e93e:	dcfb      	bgt.n	800e938 <__sccl+0x58>
 800e940:	1af1      	subs	r1, r6, r3
 800e942:	3901      	subs	r1, #1
 800e944:	1c58      	adds	r0, r3, #1
 800e946:	42b3      	cmp	r3, r6
 800e948:	bfa8      	it	ge
 800e94a:	2100      	movge	r1, #0
 800e94c:	1843      	adds	r3, r0, r1
 800e94e:	e7e0      	b.n	800e912 <__sccl+0x32>

0800e950 <_strtol_l.constprop.0>:
 800e950:	2b01      	cmp	r3, #1
 800e952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e956:	d001      	beq.n	800e95c <_strtol_l.constprop.0+0xc>
 800e958:	2b24      	cmp	r3, #36	; 0x24
 800e95a:	d906      	bls.n	800e96a <_strtol_l.constprop.0+0x1a>
 800e95c:	f7fd fdb6 	bl	800c4cc <__errno>
 800e960:	2316      	movs	r3, #22
 800e962:	6003      	str	r3, [r0, #0]
 800e964:	2000      	movs	r0, #0
 800e966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e96a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ea50 <_strtol_l.constprop.0+0x100>
 800e96e:	460d      	mov	r5, r1
 800e970:	462e      	mov	r6, r5
 800e972:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e976:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e97a:	f017 0708 	ands.w	r7, r7, #8
 800e97e:	d1f7      	bne.n	800e970 <_strtol_l.constprop.0+0x20>
 800e980:	2c2d      	cmp	r4, #45	; 0x2d
 800e982:	d132      	bne.n	800e9ea <_strtol_l.constprop.0+0x9a>
 800e984:	782c      	ldrb	r4, [r5, #0]
 800e986:	2701      	movs	r7, #1
 800e988:	1cb5      	adds	r5, r6, #2
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d05b      	beq.n	800ea46 <_strtol_l.constprop.0+0xf6>
 800e98e:	2b10      	cmp	r3, #16
 800e990:	d109      	bne.n	800e9a6 <_strtol_l.constprop.0+0x56>
 800e992:	2c30      	cmp	r4, #48	; 0x30
 800e994:	d107      	bne.n	800e9a6 <_strtol_l.constprop.0+0x56>
 800e996:	782c      	ldrb	r4, [r5, #0]
 800e998:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e99c:	2c58      	cmp	r4, #88	; 0x58
 800e99e:	d14d      	bne.n	800ea3c <_strtol_l.constprop.0+0xec>
 800e9a0:	786c      	ldrb	r4, [r5, #1]
 800e9a2:	2310      	movs	r3, #16
 800e9a4:	3502      	adds	r5, #2
 800e9a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e9aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800e9ae:	f04f 0c00 	mov.w	ip, #0
 800e9b2:	fbb8 f9f3 	udiv	r9, r8, r3
 800e9b6:	4666      	mov	r6, ip
 800e9b8:	fb03 8a19 	mls	sl, r3, r9, r8
 800e9bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e9c0:	f1be 0f09 	cmp.w	lr, #9
 800e9c4:	d816      	bhi.n	800e9f4 <_strtol_l.constprop.0+0xa4>
 800e9c6:	4674      	mov	r4, lr
 800e9c8:	42a3      	cmp	r3, r4
 800e9ca:	dd24      	ble.n	800ea16 <_strtol_l.constprop.0+0xc6>
 800e9cc:	f1bc 0f00 	cmp.w	ip, #0
 800e9d0:	db1e      	blt.n	800ea10 <_strtol_l.constprop.0+0xc0>
 800e9d2:	45b1      	cmp	r9, r6
 800e9d4:	d31c      	bcc.n	800ea10 <_strtol_l.constprop.0+0xc0>
 800e9d6:	d101      	bne.n	800e9dc <_strtol_l.constprop.0+0x8c>
 800e9d8:	45a2      	cmp	sl, r4
 800e9da:	db19      	blt.n	800ea10 <_strtol_l.constprop.0+0xc0>
 800e9dc:	fb06 4603 	mla	r6, r6, r3, r4
 800e9e0:	f04f 0c01 	mov.w	ip, #1
 800e9e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9e8:	e7e8      	b.n	800e9bc <_strtol_l.constprop.0+0x6c>
 800e9ea:	2c2b      	cmp	r4, #43	; 0x2b
 800e9ec:	bf04      	itt	eq
 800e9ee:	782c      	ldrbeq	r4, [r5, #0]
 800e9f0:	1cb5      	addeq	r5, r6, #2
 800e9f2:	e7ca      	b.n	800e98a <_strtol_l.constprop.0+0x3a>
 800e9f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e9f8:	f1be 0f19 	cmp.w	lr, #25
 800e9fc:	d801      	bhi.n	800ea02 <_strtol_l.constprop.0+0xb2>
 800e9fe:	3c37      	subs	r4, #55	; 0x37
 800ea00:	e7e2      	b.n	800e9c8 <_strtol_l.constprop.0+0x78>
 800ea02:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ea06:	f1be 0f19 	cmp.w	lr, #25
 800ea0a:	d804      	bhi.n	800ea16 <_strtol_l.constprop.0+0xc6>
 800ea0c:	3c57      	subs	r4, #87	; 0x57
 800ea0e:	e7db      	b.n	800e9c8 <_strtol_l.constprop.0+0x78>
 800ea10:	f04f 3cff 	mov.w	ip, #4294967295
 800ea14:	e7e6      	b.n	800e9e4 <_strtol_l.constprop.0+0x94>
 800ea16:	f1bc 0f00 	cmp.w	ip, #0
 800ea1a:	da05      	bge.n	800ea28 <_strtol_l.constprop.0+0xd8>
 800ea1c:	2322      	movs	r3, #34	; 0x22
 800ea1e:	6003      	str	r3, [r0, #0]
 800ea20:	4646      	mov	r6, r8
 800ea22:	b942      	cbnz	r2, 800ea36 <_strtol_l.constprop.0+0xe6>
 800ea24:	4630      	mov	r0, r6
 800ea26:	e79e      	b.n	800e966 <_strtol_l.constprop.0+0x16>
 800ea28:	b107      	cbz	r7, 800ea2c <_strtol_l.constprop.0+0xdc>
 800ea2a:	4276      	negs	r6, r6
 800ea2c:	2a00      	cmp	r2, #0
 800ea2e:	d0f9      	beq.n	800ea24 <_strtol_l.constprop.0+0xd4>
 800ea30:	f1bc 0f00 	cmp.w	ip, #0
 800ea34:	d000      	beq.n	800ea38 <_strtol_l.constprop.0+0xe8>
 800ea36:	1e69      	subs	r1, r5, #1
 800ea38:	6011      	str	r1, [r2, #0]
 800ea3a:	e7f3      	b.n	800ea24 <_strtol_l.constprop.0+0xd4>
 800ea3c:	2430      	movs	r4, #48	; 0x30
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1b1      	bne.n	800e9a6 <_strtol_l.constprop.0+0x56>
 800ea42:	2308      	movs	r3, #8
 800ea44:	e7af      	b.n	800e9a6 <_strtol_l.constprop.0+0x56>
 800ea46:	2c30      	cmp	r4, #48	; 0x30
 800ea48:	d0a5      	beq.n	800e996 <_strtol_l.constprop.0+0x46>
 800ea4a:	230a      	movs	r3, #10
 800ea4c:	e7ab      	b.n	800e9a6 <_strtol_l.constprop.0+0x56>
 800ea4e:	bf00      	nop
 800ea50:	0800f757 	.word	0x0800f757

0800ea54 <_strtol_r>:
 800ea54:	f7ff bf7c 	b.w	800e950 <_strtol_l.constprop.0>

0800ea58 <_strtoul_l.constprop.0>:
 800ea58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea5c:	4f36      	ldr	r7, [pc, #216]	; (800eb38 <_strtoul_l.constprop.0+0xe0>)
 800ea5e:	4686      	mov	lr, r0
 800ea60:	460d      	mov	r5, r1
 800ea62:	4628      	mov	r0, r5
 800ea64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea68:	5de6      	ldrb	r6, [r4, r7]
 800ea6a:	f016 0608 	ands.w	r6, r6, #8
 800ea6e:	d1f8      	bne.n	800ea62 <_strtoul_l.constprop.0+0xa>
 800ea70:	2c2d      	cmp	r4, #45	; 0x2d
 800ea72:	d12f      	bne.n	800ead4 <_strtoul_l.constprop.0+0x7c>
 800ea74:	782c      	ldrb	r4, [r5, #0]
 800ea76:	2601      	movs	r6, #1
 800ea78:	1c85      	adds	r5, r0, #2
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d057      	beq.n	800eb2e <_strtoul_l.constprop.0+0xd6>
 800ea7e:	2b10      	cmp	r3, #16
 800ea80:	d109      	bne.n	800ea96 <_strtoul_l.constprop.0+0x3e>
 800ea82:	2c30      	cmp	r4, #48	; 0x30
 800ea84:	d107      	bne.n	800ea96 <_strtoul_l.constprop.0+0x3e>
 800ea86:	7828      	ldrb	r0, [r5, #0]
 800ea88:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ea8c:	2858      	cmp	r0, #88	; 0x58
 800ea8e:	d149      	bne.n	800eb24 <_strtoul_l.constprop.0+0xcc>
 800ea90:	786c      	ldrb	r4, [r5, #1]
 800ea92:	2310      	movs	r3, #16
 800ea94:	3502      	adds	r5, #2
 800ea96:	f04f 38ff 	mov.w	r8, #4294967295
 800ea9a:	2700      	movs	r7, #0
 800ea9c:	fbb8 f8f3 	udiv	r8, r8, r3
 800eaa0:	fb03 f908 	mul.w	r9, r3, r8
 800eaa4:	ea6f 0909 	mvn.w	r9, r9
 800eaa8:	4638      	mov	r0, r7
 800eaaa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800eaae:	f1bc 0f09 	cmp.w	ip, #9
 800eab2:	d814      	bhi.n	800eade <_strtoul_l.constprop.0+0x86>
 800eab4:	4664      	mov	r4, ip
 800eab6:	42a3      	cmp	r3, r4
 800eab8:	dd22      	ble.n	800eb00 <_strtoul_l.constprop.0+0xa8>
 800eaba:	2f00      	cmp	r7, #0
 800eabc:	db1d      	blt.n	800eafa <_strtoul_l.constprop.0+0xa2>
 800eabe:	4580      	cmp	r8, r0
 800eac0:	d31b      	bcc.n	800eafa <_strtoul_l.constprop.0+0xa2>
 800eac2:	d101      	bne.n	800eac8 <_strtoul_l.constprop.0+0x70>
 800eac4:	45a1      	cmp	r9, r4
 800eac6:	db18      	blt.n	800eafa <_strtoul_l.constprop.0+0xa2>
 800eac8:	fb00 4003 	mla	r0, r0, r3, r4
 800eacc:	2701      	movs	r7, #1
 800eace:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ead2:	e7ea      	b.n	800eaaa <_strtoul_l.constprop.0+0x52>
 800ead4:	2c2b      	cmp	r4, #43	; 0x2b
 800ead6:	bf04      	itt	eq
 800ead8:	782c      	ldrbeq	r4, [r5, #0]
 800eada:	1c85      	addeq	r5, r0, #2
 800eadc:	e7cd      	b.n	800ea7a <_strtoul_l.constprop.0+0x22>
 800eade:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eae2:	f1bc 0f19 	cmp.w	ip, #25
 800eae6:	d801      	bhi.n	800eaec <_strtoul_l.constprop.0+0x94>
 800eae8:	3c37      	subs	r4, #55	; 0x37
 800eaea:	e7e4      	b.n	800eab6 <_strtoul_l.constprop.0+0x5e>
 800eaec:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800eaf0:	f1bc 0f19 	cmp.w	ip, #25
 800eaf4:	d804      	bhi.n	800eb00 <_strtoul_l.constprop.0+0xa8>
 800eaf6:	3c57      	subs	r4, #87	; 0x57
 800eaf8:	e7dd      	b.n	800eab6 <_strtoul_l.constprop.0+0x5e>
 800eafa:	f04f 37ff 	mov.w	r7, #4294967295
 800eafe:	e7e6      	b.n	800eace <_strtoul_l.constprop.0+0x76>
 800eb00:	2f00      	cmp	r7, #0
 800eb02:	da07      	bge.n	800eb14 <_strtoul_l.constprop.0+0xbc>
 800eb04:	2322      	movs	r3, #34	; 0x22
 800eb06:	f8ce 3000 	str.w	r3, [lr]
 800eb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0e:	b932      	cbnz	r2, 800eb1e <_strtoul_l.constprop.0+0xc6>
 800eb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb14:	b106      	cbz	r6, 800eb18 <_strtoul_l.constprop.0+0xc0>
 800eb16:	4240      	negs	r0, r0
 800eb18:	2a00      	cmp	r2, #0
 800eb1a:	d0f9      	beq.n	800eb10 <_strtoul_l.constprop.0+0xb8>
 800eb1c:	b107      	cbz	r7, 800eb20 <_strtoul_l.constprop.0+0xc8>
 800eb1e:	1e69      	subs	r1, r5, #1
 800eb20:	6011      	str	r1, [r2, #0]
 800eb22:	e7f5      	b.n	800eb10 <_strtoul_l.constprop.0+0xb8>
 800eb24:	2430      	movs	r4, #48	; 0x30
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1b5      	bne.n	800ea96 <_strtoul_l.constprop.0+0x3e>
 800eb2a:	2308      	movs	r3, #8
 800eb2c:	e7b3      	b.n	800ea96 <_strtoul_l.constprop.0+0x3e>
 800eb2e:	2c30      	cmp	r4, #48	; 0x30
 800eb30:	d0a9      	beq.n	800ea86 <_strtoul_l.constprop.0+0x2e>
 800eb32:	230a      	movs	r3, #10
 800eb34:	e7af      	b.n	800ea96 <_strtoul_l.constprop.0+0x3e>
 800eb36:	bf00      	nop
 800eb38:	0800f757 	.word	0x0800f757

0800eb3c <_strtoul_r>:
 800eb3c:	f7ff bf8c 	b.w	800ea58 <_strtoul_l.constprop.0>

0800eb40 <__submore>:
 800eb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb44:	460c      	mov	r4, r1
 800eb46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eb48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb4c:	4299      	cmp	r1, r3
 800eb4e:	d11d      	bne.n	800eb8c <__submore+0x4c>
 800eb50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eb54:	f7fe f8f8 	bl	800cd48 <_malloc_r>
 800eb58:	b918      	cbnz	r0, 800eb62 <__submore+0x22>
 800eb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb66:	63a3      	str	r3, [r4, #56]	; 0x38
 800eb68:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800eb6c:	6360      	str	r0, [r4, #52]	; 0x34
 800eb6e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800eb72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800eb76:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800eb7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eb7e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800eb82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800eb86:	6020      	str	r0, [r4, #0]
 800eb88:	2000      	movs	r0, #0
 800eb8a:	e7e8      	b.n	800eb5e <__submore+0x1e>
 800eb8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800eb8e:	0077      	lsls	r7, r6, #1
 800eb90:	463a      	mov	r2, r7
 800eb92:	f7ff f9e5 	bl	800df60 <_realloc_r>
 800eb96:	4605      	mov	r5, r0
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	d0de      	beq.n	800eb5a <__submore+0x1a>
 800eb9c:	eb00 0806 	add.w	r8, r0, r6
 800eba0:	4601      	mov	r1, r0
 800eba2:	4632      	mov	r2, r6
 800eba4:	4640      	mov	r0, r8
 800eba6:	f7fe f84d 	bl	800cc44 <memcpy>
 800ebaa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ebae:	f8c4 8000 	str.w	r8, [r4]
 800ebb2:	e7e9      	b.n	800eb88 <__submore+0x48>

0800ebb4 <_malloc_usable_size_r>:
 800ebb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebb8:	1f18      	subs	r0, r3, #4
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	bfbc      	itt	lt
 800ebbe:	580b      	ldrlt	r3, [r1, r0]
 800ebc0:	18c0      	addlt	r0, r0, r3
 800ebc2:	4770      	bx	lr

0800ebc4 <_init>:
 800ebc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc6:	bf00      	nop
 800ebc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebca:	bc08      	pop	{r3}
 800ebcc:	469e      	mov	lr, r3
 800ebce:	4770      	bx	lr

0800ebd0 <_fini>:
 800ebd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd2:	bf00      	nop
 800ebd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebd6:	bc08      	pop	{r3}
 800ebd8:	469e      	mov	lr, r3
 800ebda:	4770      	bx	lr
